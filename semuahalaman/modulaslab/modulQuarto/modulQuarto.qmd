---
title: "modul Quarto"
author: "Asisten Lab Departemen Matematika UI"
---

## Overview

Quarto makes it easy to create a simple about page for an individual or organization. When the `about` option is provided for a document, a special template will be used to layout the content of the current page with a custom layout designed to present a person or organization.

For example:

``` markdown
---
title: "Finley Malloc"
about:
  template: jolla
  image: profile.jpg
  links:
    - icon: twitter
      text: twitter
      href: https://twitter.com
    - icon: github
      text: Github
      href: https://github.com
---

Finley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending time unicycling and playing with her pet iguana.

## Education

University of California, San Diego | San Diego, CA
PhD in Mathematics | Sept 2011 - June 2015

Macalester College | St. Paul, MN
B.A in Economics | Sept 2007 - June 2011

## Experience

Wengo Analytics | Head Data Scientist | April 2018 - present

GeoScynce | Chief Analyst | Spet 2012 - April 2018
```

The contents of this page will be laid out using the `jolla` template with the `profile.jpg` image, and generate a set of links for the items specified in `links`.

You can write and format the content of the page however you'd like - when the page is rendered, Quarto will use the content and options provided in the `about` option to create the about page, arranging the content of the `about` option with the content in the page itself.

## Templates

Quarto includes 5 built in templates, drawing inspiration from the [Postcards R Package](https://cran.r-project.org/web/packages/postcards/readme/README.html). Built-in templates include:

-   `jolla`
-   `trestles`
-   `solana`
-   `marquee`
-   `broadside`

Each template will position the about elements with the content in a different layout. Select the template using the `template` option:

``` yaml
about:
  template: trestles
```

Here is a preview of each of the templates:

::: panel-tabset
### jolla

![](images/about-jolla.png){.border fig-alt="Screenshot of About page with jolla template. Photo is a centered circle above a heading with the author's name. There is a centered paragraph below the header, a separator line, and then buttons for twitter and github centered at the bottom."}

### trestles

![](images/about-trestles.png){.border fig-alt="Screenshot of About page with trestles template. On the left-hand side there is a rectangular photo above the author's name, and two buttons (one for twitter, and one for github below). On the right hand side there is a paragraph of body text followed by headered sections for Education and Experience."}

### solana

![](images/about-solana.png){.border fig-alt="Screenshot of About page with solana template. The left-hand side has the name as a main header with buttons for twitter and github below it. Below the buttons there is a paragraph of body text, followed by headered sections for Education and Experience. In the upper right-hand column there is a rectangular image."}

### marquee

![](images/about-marquee.png){.border fig-alt="Screenshot of About page with marquee template. A large square image is at the top. Beneath that the author's name is a header, and there is a paragraph of body text, followed by headered sections for Education and Experience. Centered at the bottom of the page are links to Twitter and GitHub with their respective icons next to them."}

### broadside

![](images/about-broadside.png){.border fig-alt="Screenshot of About page with broadside template. The left side is a rectangular image. On the right-hand side the author's name is a header, and there is a paragraph of body text, followed by headered sections for Education and Experience. Centered at the bottom of the page are links to Twitter and GitHub with their respective icons next to them."}
:::

### Image

The image for the about page will be read from the document-level `image` option:

``` yaml
title: Finley Malloc
image: profile.jpg
about:
  template: jolla
```

In addition, you can customize how the image is displayed in the page to better meet your needs by setting the following options.

| option        | description                                                                           | templates                     |
|------------------|----------------------------------|--------------------|
| `image-width` | A valid CSS width for your image.                                                     | all                           |
| `image-shape` | The shape of the image on the about page. Choose from:`rectangle`, `round`, `rounded` | `jolla`, `solana`, `trestles` |
| `image-alt`   | Alternative text for image                                                            | all                           |
| `image-title` | Title for image                                                                       | all                           |

For example:

``` yaml
title: Finley Malloc
image: profile.png
about:
  template: trestles
  image-width: 10em
  image-shape: round
```

### Links

Your about page also may contain a set of links to other resources about you or your organization. Each template will render these links in a slightly different way. Here are the options that you can specify for each link:

| Option       | Description                                                                                                                        |
|-------------------|-----------------------------------------------------|
| `href`       | Link to file contained with the project or an external URL.                                                                        |
| `text`       | Text to display for navigation item (defaults to the document `title` if not provided).                                            |
| `icon`       | Name of one of the standard [Bootstrap 5 icons](https://icons.getbootstrap.com/) (e.g. "github", "twitter", "share", etc.).        |
| `aria-label` | [Accessible label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label) for the navigation item. |

## Partial Page Content

By default, the about page will be generated using the entire contents of the page. If you'd like, however, you may also choose to use only a portion of the page's content to populate the about template. In this case, you can specify an `id` for the about page in the document front matter. When rendering the page, Quarto will find any `div` with that `id` and use the contents of that `div` to populate the about template. The `div` that provided the contents will be replaced with the formatted 'about' content. For example, you could write:

``` markdown
---
title: "Finley Malloc"
about:
  id: hero-heading
  template: jolla
  image: profile.jpg
  links:
    - icon: twitter
      text: twitter
      href: https://twitter.com
    - icon: github
      text: Github
      href: https://github.com
---

### This content appears above the formatted about page content.

:::{#hero-heading}

Finley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending time unicycling and playing with her pet iguana.

## Education

University of California, San Diego | San Diego, CA
PhD in Mathematics | Sept 2011 - June 2015

Macalester College | St. Paul, MN
B.A in Economics | Sept 2007 - June 2011

## Experience

Wengo Analytics | Head Data Scientist | April 2018 - present

GeoScynce | Chief Analyst | Sept 2012 - April 2018

:::

### This content appears below the formatted about page content.
```
## Overview

In addition to the 3 built in types of listings, you can also build a completely custom display of the items. This custom display can generate any HTML and can optionally still take advantage of the sorting, filtering, and pagination provided by listings.

## Listing Templates

To build a custom listing display, you create an [EJS template](https://ejs.co) that will be used to generate the HTML for a set of items that are passed to the template. EJS templates allow you to generate HTML using plain javascript, making it easy to loop through items and output their values in your custom HTML.


To use a custom template, pass it in the `template` option for a listing:

``` yaml
listing:
  template: gallery.ejs
```

When a listing with a custom template is rendered, the listing contents will be read and processed into a set of items that are passed to the template for rendering. For example, in this case, all the documents in the posts directory will be read into items and passed to the `gallery.ejs` template.

``` yaml
listing:
  contents: posts
  template: gallery.ejs
```

A simple template for outputing a list of documents might look like:

``` html
<ul>
<% for (const item of items) { %>
  <li><a href="<%- item.path %>"><%= item.title %></a></li>
<% } %>
</ul>
```

which produces simple HTML output like:

![](images/listing-custom-output.png){.border}

When rendered, the above template will receive an array of listing items called `items`. When the contents of a listing are loaded from a list of documents, each of those items will be populated with the fields described in [Listing Fields](website-listings.qmd#listing-fields). In addition, any other fields included in a documents metadata will be passed as a property of the item, making it possible to use custom metadata in your documents and the listing display.

::: {.callout-note}

Note that Quarto uses `lodash` to render the EJS templates. The `lodash` uses different syntax for HTML escaping text in templates. 

````
HTML escaped value:   <%- value %>
HTML unescaped value: <%= value %>
````

:::

## Metadata Listings

The `contents` option for a listing most commonly contains a list of paths or globs, but it can also contain metadata. When contents are metadata, the metadata will be read into items and passed to the template. For example:

``` yaml
listing:
  template: custom.ejs
  contents:
    - name: First Item
      href: https://www.quarto.org
      custom-field: A custom value
    - name: Second Item
      href: https://www.rstudio.org
      custom-field: A second custom value
```

could be rendered using:

```` html
```{=html}
<ul>
<% for (const item of items) { %>
  <li>
    <a href="<%- item.href %>"><%= item.name %></a><br/>
    <%= item['custom-field'] %>
  </li>
<% } %>
</ul>
```
````

which produces a simple HTML display like:

![](images/listing-custom-metadata.png){.border}

## Metadata File Listings

The `contents` option for a listing can also point to one or more `yaml` files (which contain metadata). In that case, the metadata will be read from the files into items and passed to the template. For example:

``` yaml
listing:
  template: custom.ejs
  contents:
    - items.yml
```

where the contents of `items.yml` is:

``` yaml
- name: First Item
  href: https://www.quarto.org
  custom-field: A custom value
- name: Second Item
  href: https://www.rstudio.org
  custom-field: A second custom value
```

### Template Examples

Portions of this website are built using custom listings. The best place to start is with [our gallery](/docs/gallery/index.qmd), which is a listing built using a custom template and a metadata file. You can view the source code used to create the gallery page in our [Github repository](https://github.com/quarto-dev/quarto-web).

| File                                                                                       | Description                                                                          |
|-------------------------------------|-----------------------------------|
| [gallery.yml](https://github.com/quarto-dev/quarto-web/blob/main/docs/gallery/gallery.yml) | The metadata that controls what items are displayed in the gallery listing.          |
| [gallery.ejs](https://github.com/quarto-dev/quarto-web/blob/main/docs/gallery/gallery.ejs) | The template used to display the items on the page.                                  |
| [index.qmd](https://github.com/quarto-dev/quarto-web/blob/main/docs/gallery/index.qmd)     | The Quarto document that configures and positions the listing in the `#gallery` div. |

: {tbl-colwidths="\[30,70\]"}

## Sorting, Filtering, and Pagination

By default, sorting, filtering, and pagination are disabled for custom listings templates, but with some simple changes to your template and listing options, you can add this capability to your custom listing. To do this, you need to include the following three things in your custom template:

1.  Include a `list` class on the HTML tag that contains the list of items.

2.  For each item, include `<%= metadataAttrs(item) %>` in the HTML tag that contains the item. This will allow Quarto to write custom attributes that are used for sorting and filtering.

3.  Within each item, include a class that identifies the tag whose text represents the contents of an item's field. The class must be the name of the field prefixed with `listing-`, for example the tag whose inner text is the `item.name` should include a class `listing-name`.

For example, we can modify the above `custom.ejs` template as follows:

``` html
<ul class="list">
<% for (const item of items) { %>
  <li <%= metadataAttrs(item) %>>
    <a href="<%- item.href %>" class="listing-name"><%= item.name %></a><br/>
    <span class="listing-custom-field"><%= item['custom-field'] %><span>
  </li>
<% } %>
</ul>
```

Once you have included these items in your template, you can then enable the options in your listing:

``` yaml
listing:
  sort-ui: true
  filter-ui: true
  page-size: 10
```

The UI elements will now appear on the page and should interact properly with your custom listing.

### Field Display Names

You may want to provide a custom display name for your field to provide a better name than the field name. For example, the field name would appear in the sort UI. You can use `field-display-names` to create mapping from a field to a display name. For example:

``` yaml
listing:
  template: custom.ejs
  contents:
    - items.yml
  sort-ui: true
  filter-ui: true
  page-size: 10
  field-display-names:
    name: "Name"
    custom-field: "Custom"
```

### Date Sorting and Formatting

To properly format and sort date values, you can specify type information for fields in your items. If you specify a field is a date, it will automatically be formatted using the specified date formatting (either default or specified using `date-format`) and will support date sorting in ascending or descending order. If you specify a field as a number, it will support ascending and descending numeric sorting.

You can specify field types as follows:

``` yaml
listing:
  template: custom.ejs
  contents:
    - items.yml
  field-types:
    custom-date: date
    custom-number: number
```

### Required Fields

Since listings are generated using fields that are specified in other documents or via metadata, it can be helpful to ensure that required fields are present. You can note required fields as following:

``` yaml
listing:
  template: custom.ejs
  contents:
    - items.yml
  field-required: [name, custom-field]
```

If the listing page is rendered and any of contents is missing a value for either of the required fields, an error will be thrown noting the field that is required and the file or metadata that has omitted it.

## Template Parameters

You may also make your custom template more dynamic by using parameters to control its behavior. You can provide parameters for custom templates using the `template-params` option like:

```yaml
listing:
  template: custom.ejs
  contents:
    - items.yml
  template-params:
    param1: "param-value"
```

Template parameters can then be accessed in your template using `<%= templateParams.param1 %>`. For example, we can modify the above `custom.ejs` template as follows:

``` html
<h3><%= templateParams.param1 %></h3>
<ul class="pub-list list">
  <% for (const item of items) { %>
      <li <%= metadataAttrs(item) %>>
        <span class="listing-title"><%= item.title %>.</span>
      </li>
  <% } %>
</ul>
```

## Overview

Listings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data.

Listings are useful for creating blogs, providing navigation for large numbers of documents, or any other scenario where you'd like the contents of a page to be automatically updated as documents are added, updated, and removed.

You can enable listings on a page using the `listing` option in the document front matter. This will instruct Quarto to generate additional content (the 'listings') when the page is rendered. For example, the following YAML in the front matter of a document:

``` yaml
---
title: "Listing Example"
listing: default
---
```

will result in a listing of all documents in the directory (with the exception of the current document). It might look something like this:

![](images/listing-example.png){.border fig-alt="Screenshot of Listing Example page. There is a navbar at the top with the site name on the left, and a collapsed menu icon on the right. The header (Listing example). Below on the left there is a sortable dropdown for the order in which the items are displayed. On the right, across, is a search input box. The items are listed full-width rows that display the item’s metadata (author and date), title, description, and image."}

## Listing Contents

You can control what documents are included in the listing by using the `contents` option, which allows you to provide a set of input files (or globs of input files) that should be included in the listing. For each of the inputs that matches the `contents` of a listing, an item will be included using the metadata in the front matter of the document. 

::: {.callout-note}
To have an item in the list, it must contain at least the "title" metadata.
:::

For example to include all the Quarto documents in the `posts` directory, you would write:

``` yaml
---
title: "Listing Example"
listing:
  contents: posts
---
```

You can write much more complex rules for including content by using globs and using a list of targets in the contents, such as:

``` yaml
---
title: "Listing Example"
listing:
  contents:
    - "reports/*.qmd"
    - "lab-notes/*reports.qmd"
```

Review the [Quarto Glob Reference](/docs/reference/globs.qmd) for more information about supported glob syntax.

::: callout-note
If you provide a path to a directory, it will be treated as `<directory>/**` - the directory will be searched recursively for project inputs.
:::

It is important to note that when providing a list of targets, these will be identified _relative_ to the location of the listings page, not the root of the project file.  For example, if your listings page is located at `/pages/listings.qmd` specifying `contents: "reports/*.qmd"` will search in `/pages/reports/` not `/reports/` for the targeted files.

In addition to specifying lists of files or globs, contents can contain lists of metadata as well. For more about this, see [Custom Listings](website-listings-custom.qmd).

## Listing Types

There are three built-in types of listings that you can choose from. Use the `type` option to choose the appearance of the listing:

``` yaml
---
listing:
  contents: posts
  type: default
---
```

The type field accepts the following values:

+----------------+----------------------------------+
| Type           | Description                      |
+================+==================================+
| `default`      | A blog style list of items.      |
+----------------+----------------------------------+
| `table`        | A table of listings.             |
+----------------+----------------------------------+
| `grid`         | A grid of listing cards.         |
+----------------+----------------------------------+

::: panel-tabset
#### Default

By default, listings will appear in full width rows that display the item's metadata (author and date), title, description, and image.

![](images/listing-default.png){.border alt="A default style listing." fig-alt="The default layout for listings page. The top is a header (Listing Example). Below on the left there is a sortable dropdown for the order in which the items are displayed. On the right, across, is a search input box. The items are listed full-width rows that display the item’s metadata (author and date), title, description, and image."}

#### Grid

Grid style listings display a card for each item.

![](images/listing-grid.png){.border alt="A grid style listing." fig-alt="Listing Example page with grid-style layout cards for each item."}

#### Table

The table listing style provides a traditional tabular layout.

![](images/listing-table.png){.border alt="A table type listing." fig-alt="Listing Example with a text table displaying (from left to right): Date, Title, and Author."}
:::

## Sorting Items

By default, listings created from documents will be ordered by their title. Use the `sort` option to control the order of the listing. For example:

``` yaml
listing:
  contents: posts
  sort: "date"
```

Each `sort` key can include a field name and optionally either `asc` or `desc` to control whether to sort in ascending or descending order. When only the name is specified, sorting by that field will be in ascending order.

The sort key can also contain one or more fields to sort by. For example:

``` yaml
listing:
  contents: posts
  sort:
    - "date"
    - "title desc"
```

This will sort the documents in the `posts` directory first by their date in ascending order, then by their title in descending order.

If you'd like to disable sorting entirely and display the items in the order in which they are specified, you can pass `sort: false` (which will disable sorting and preserve the item's original order).

## Listing Options

It is possible to customize the appearance of listings using the following options for each type of listing display.

### Default

+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option              | Description                                                                                                                                                  |
+=====================+==============================================================================================================================================================+
| `max-items`         | The maximum number of items to include in this listing.                                                                                                      |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-align`       | Whether to place the image on the right or left side of the post content. Defaults to `right`.                                                               |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-height`      | The height of the image being displayed. The width is automatically determined and the image will fill the rectangle without scaling (i.e. cropped to fill). |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-placeholder` | The default image for items if they have no image.                                                                                                           |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+

### Grids

+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option              | Description                                                                                                                                                  |
+=====================+==============================================================================================================================================================+
| `max-items`         | The maximum number of items to include in this listing.                                                                                                      |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-height`      | The height of the image being displayed. The width is automatically determined and the image will fill the rectangle without scaling (i.e. cropped to fill). |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-placeholder` | The default image for items if they have no image.                                                                                                           |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `grid-columns`      | The number of columns in the grid display. Defaults to 3.                                                                                                    |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `grid-item-border`  | Whether to display a border around the item card. Defaults to `true`.                                                                                        |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `grid-item-align`   | Aligns the content within the card (`left`, `right`, or `center`). Defaults to `left`.                                                                       |
+---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+

### Tables

+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Options             | Description                                                                                                                                              |
+=====================+==========================================================================================================================================================+
| `max-items`         | The maximum number of items to include in this listing.                                                                                                  |
+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-height`      | The height of the image being displayed. The width is automatically select and the image will fill the rectangle without scaling (i.e. cropped to fill). |
+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-placeholder` | The default image for items if they have no image.                                                                                                       |
+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| `table-striped`     | Display the table rows with alternating background colors (`true` or `false`). Defaults to `false`                                                       |     
+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| `table-hover`       | Highlight rows of the table when the user hovers the mouse over them (`true` or `false`). Defaults to `false`.                                           |
+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+
| `field-links`       | A list of fields that should link to the document in the table (defaults to `title`).                                                                    |
+---------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------+

### Advanced Options

+--------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option                   | Description                                                                                                                                                                                                                      |
+==========================+==================================================================================================================================================================================================================================+
| `field-display-names`    | A mapping that provides display name for specific fields. For example, to display the title column as 'Report' in a table listing you would write:                                                                               |
|                          |                                                                                                                                                                                                                                  |
|                          | ``` yaml                                                                                                                                                                                                                         |
|                          | listing:                                                                                                                                                                                                                         |
|                          |   field-display-names:                                                                                                                                                                                                           |
|                          |     title: "Report"                                                                                                                                                                                                              |
|                          | ```                                                                                                                                                                                                                              |
+--------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-lazy-loading`     | When `true`, listing images are loaded only as they come into view. When `false`, images are automatically loaded. Default: `true`                                                                                               |
+--------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `max-description-length` | The maximum length of the description displayed in the listing (in characters). Defaults to 175.                                                                                                                                 |
+--------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `date-format`            | The date format to use when displaying dates (e.g. `d-M-yyyy`).                                                                                                                                                                  |
|                          |                                                                                                                                                                                                                                  |
|                          | You may either provide a date style (`full`, `long`, `medium`, `short` or `iso`) or a format string for formatting the date.                                                                                                     |
|                          | The behavior of date styles varies depending upon locale, but examples in the `en` locale are as follows:                                                                                                                        |
|                          |                                                                                                                                                                                                                                  |
|                          | full                                                                                                                                                                                                                             |
|                          |                                                                                                                                                                                                                                  |
|                          | :   Saturday, February 5, 2022                                                                                                                                                                                                   |
|                          |                                                                                                                                                                                                                                  |
|                          | long                                                                                                                                                                                                                             |
|                          |                                                                                                                                                                                                                                  |
|                          | :   February 5, 2022                                                                                                                                                                                                             |
|                          |                                                                                                                                                                                                                                  |
|                          | medium                                                                                                                                                                                                                           |
|                          |                                                                                                                                                                                                                                  |
|                          | :   Feb 5, 2022                                                                                                                                                                                                                  |
|                          |                                                                                                                                                                                                                                  |
|                          | short                                                                                                                                                                                                                            |
|                          |                                                                                                                                                                                                                                  |
|                          | :   2/5/22                                                                                                                                                                                                                       |
|                          |                                                                                                                                                                                                                                  |
|                          | iso                                                                                                                                                                                                                              |
|                          |                                                                                                                                                                                                                                  |
|                          | :   2022-05-22                                                                                                                                                                                                                   |
|                          |                                                                                                                                                                                                                                  |
|                          | Learn more about supported date formatting values [here](/docs/reference/dates.qmd).                                                                                                                                             |
+--------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

In addition to the above listing-wide options, each listing type has a variety of options to customize its appearance.

## Categories

In addition to displaying the listing contents, listings can also automatically add a list of categories to the page that they appear on. To enable categories you can set the `categories` option like:

``` yaml
listing:
  categories: true
```

which results in categories appearing in the right sidebar:

![](images/listing-categories.png){.border .column-page-right fig-alt="Default layout listings page with a sidebar on the right showing categories and the counts of items for each category."}

When users click a category, the page will be updated to show only the listing items that match the selected category.

#### Category Appearance

You can choose between a few different display styles for categories:

+--------------+------------------------------------------------------------------------------------------------------------------------------------+
| Option       | Description                                                                                                                        |
+==============+====================================================================================================================================+
| `numbered`   | Displays a list of categories in alphabetical order with the number of items in that category displayed next to the category name. |
+--------------+------------------------------------------------------------------------------------------------------------------------------------+
| `unnumbered` | Display a list of categories in alphabetical order.                                                                                |
+--------------+------------------------------------------------------------------------------------------------------------------------------------+
| `cloud`      | Displays a 'word cloud' of categories.                                                                                             |
+--------------+------------------------------------------------------------------------------------------------------------------------------------+

When multiple listings appear on the page, categories will be enabled based upon the option set in the first listing. If categories are enabled for the first listing, all listings on the page will contribute their item categories to the list of categories and all will be filtered when the user clicks a category.

## Feeds

You can also have an RSS feed generated based upon the contents of a listing. This is great to allow your content to be syndicated or to be accessible via RSS Readers. Include a feed for your listing by including the `feed` option:

``` yaml
listing:
  contents: posts
  feed: true
```

When a feed is enabled for a listing on a page, an RSS file will be automatically generated using the name of the file. For example, `index.qmd` will produce a feed at `index.xml`. A link to the feed will be included in the `head` of the page as well.

Generating feeds requires that the `site-url` be set for the site in your `_quarto.yml` file. For example:

```{.yaml filename="_quarto.yml"}
website:
  site-url: "https://www.quarto.org"
```

You can further customize your feed by passing options to the `feed` key:

```yaml
listing:
  contents: posts
  feed: 
    items: 10
```

The following options are available:

+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option        | Description                                                                                                                                                                                                   |
+===============+===============================================================================================================================================================================================================+
| `items`       | The number of items to include in your feed. Defaults to 20.                                                                                                                                                  |
+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `type`        | `full`, `partial` or `metadata`. `full`, the default, includes the full contents of each document in the feed.                                                                                                |
|               | `partial` includes the description, if available, otherwise the first paragraph in the feed.                                                                                                                  |
|               | `metadata` includes only the title, description, and other document metadata in the feed.                                                                                                                     |
+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `title`       | The title for this feed. Defaults to the site title provided in your `_quarto.yml` file.                                                                                                                      |
+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image`       | The image for this feed. If not specified, the image for the page the listing appears on will be used, otherwise an image will be used if specified for the site in your `_quarto.yml` file.                  |
+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `description` | The description of this feed. If not specified, the description for the page the listing appears on will be used, otherwise the description of the site will be used if specified in your `_quarto.yml` file. |
+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `language`    | The language of the feed. Omitted if not specified. See <https://www.rssboard.org/rss-language-codes> for a list of valid language codes.                                                                     |
+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `categories`  | Generates a separate feed for each of the categories included in this list of category names.                                                                                                                 |
+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

## Listing Fields

When reading the contents of a listing, Quarto uses the metadata read from the front matter of the document or the contents of the document itself to populate the following fields for each item:

+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Field Name      | Description                                                                                                                                                                                                                                                                               |
+=================+===========================================================================================================================================================================================================================================================================================+
| `title`         | The title of the item, read from the `title` field of the front matter (or the first H1 of the document).                                                                                                                                                                                 |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `subtitle`      | The subtitle of the item, read from the `subtitle` field of the front matter.                                                                                                                                                                                                             |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `author`        | The author of the item, read from the `author` field of the front matter.                                                                                                                                                                                                                 |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `description`   | The description of the item, read from the `description` or `abstract` field of the front matter or from the first paragraph of the document.                                                                                                                                             |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `date`          | The date of the item, read from the `date` field of the front matter.                                                                                                                                                                                                                     |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image`         | The image for this item, read from the `image` field of the front matter, or automatically discovered by taking the first of an image of class `preview-image`, an image with a file name starting with `feature`, `cover`, or `thumbnail`, or the first image to appear in the document. |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image-alt`     | The alt text for the image for this item.                                                                                                                                                                                                                                                 |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `word-count`    | A word count for this item.                                                                                                                                                                                                                                                               |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `reading-time`  | An estimate of the reading time for this item, computed by counting the words in the item and assuming a reading speed of 200 words per minute.                                                                                                                                           |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `categories`    | Categories for the item, read from the `categories` field of the front matter.                                                                                                                                                                                                            |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `filename`      | The name of the input file.                                                                                                                                                                                                                                                               |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `file-modified` | The last modified date of this input file.                                                                                                                                                                                                                                                |
+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Depending upon the type of listing that you are using, different fields are displayed automatically:

+---------------+---------------+--------------+--------------+
| Field         | Type: Default | Type: Table  | Type: Grid   |
+===============+:=============:+:============:+:============:+
| `title`       | x             | x            | x            |
+---------------+---------------+--------------+--------------+
| `subtitle`    | x             |              |              |
+---------------+---------------+--------------+--------------+
| `author`      | x             | x            | x            |
+---------------+---------------+--------------+--------------+
| `description` | x             |              | x            |
+---------------+---------------+--------------+--------------+
| `date`        | x             | x            | x            |
+---------------+---------------+--------------+--------------+
| `image`       | x             |              | x            |
+---------------+---------------+--------------+--------------+

### Customizing Fields

Though specific columns are displayed by default, each of the types will allow you to display any of the above columns by using the `fields` options. For example, to display more fields in a table (as columns), you write:

``` yaml
listing:
  type: table
  contents: posts
  fields: [image, date, title, author, reading-time]
```

which produces:

![](images/list-fields-list.png){fig-alt="Table with small image thumbnail for each item and custom list of fields: Date, Title, Author, and Reading Time."}

Each type of listing will handle the fields in different ways.

Default

:   For default type listings, the various fields will be placed logically, with the `image` in the right column, the `title`, `subtitle`, and `description` in the center column, and any other fields in the left column.

    ![](images/default-fields.png){.border .column-page-right fig-alt="Default listings layout with the image in the right column, the title, subtitle, and description in the center column, and author, date, reading time, file, and file modified fields in the left column."}

Tables

:   For table type listings, the list of fields will be displayed as columns in the order that the fields appear in the list.

Grid

:   For grid listings, the `image`, `title`, `subtitle`, `reading-time`, `categories`, `description`, `author`, and `date` fields will be arranged on the body of the card. The `filename` and `file-modified` fields will appear in the card footer. Any other fields will appear in a table at the bottom of the card body.

    ![](images/grid-fields.png){.border fig-alt="Grid listing layout item with image thumbnail at the top of the card, followed below by the title, then subtitle, reading time, category tags, and description. Below the description there is a line with author and date, and another line with file and file modified."}

## Including or Excluding Items

You can control what documents are included or excluding based upon the metadata of the items by using the `include` and `exclude` options. These options allow you to specify one or more field names and values that must be present or absent in order for the item to be included or excluded. For example, to include only items authored by `Harlow` or `Tristan`, you write:

``` yaml
listing:
  contents: posts
  type: grid
  include:
    author: "{Harlow,Tristan}*"
```

To exclude any items authored by `Charles`, you write:

``` yaml
listing:
  contents: posts
  type: grid
  exclude:
    author: "Charles*"
```

When including or excluding items based upon a string field value, Quarto will use glob syntax when comparing values. Any other type of comparison will be done by testing for equality.

## User Tools

Listings support interactive tools to allow the viewer of the listing to sort, filter, or page through listings.

### Sorting

Users can use the select box to choose how to sort the items in the listing (or in the case of tables, by clicking on the column headings). By default, the sorting control will allow the user to sort by `title`, `date`, or `author`. You can stop this UI from being displayed to the user with the option:

``` yml
listing:
  sort-ui: false
```

You can control which fields are included in the sort list by providing a list of field names in the `sort-ui` key:

``` yaml
listing:
  sort-ui: [title, date]
```

### Filtering

Listings include a filter box positioned on the top right of the listing content. The filter box allows readers to perform a 'typeahead' search of the listing contents. You can disable the filtering control using the option:

``` yaml
listing:
  filter-ui: false
```

By default, if the filtering control is enabling, all fields that are being displayed in the listing will be searchable. If you'd like to limit searching / filtering to specific fields, you can do so by providing a field list in the `filter-ui` key:

``` yaml
listing:
  filter-ui: [title, date]
```

### Pagination

Listings also natively support pagination of the items. The default number of items displayed on a page depends up the listing type:

| Listing Type | Items Per Page |
|--------------|:--------------:|
| `default`    |       25       |
| `table`      |       30       |
| `grid`       |       18       |

You can control the number of items displayed per page using the option `page-size`:

``` yaml
listing:
  page-size: 36
```

## Listing Location

By default, listings will simply be appended to the main content region of the page. If you'd like to control where a listing appears, set an `id` for that listing and use that `id` on a corresponding div in the page. For example, updating the page used in the previous example to this:

``` yaml
---
title: "Listing Example"
listing:
  id: sample-listings
  contents: posts
  sort: "date desc"
  type: table
---

You can review the following documents for additional information:

::: {#sample-listings}
:::

Learn more about Quarto [here](https://www.quarto.com).
```

Results in a listing page like:

![](images/listing-example-id.png){fig-alt="Default layout listings page with a footer that reads 'Learn more about Quarto here'."}

## Multiple Listings

You can place any number of listings on a single page. The following would populate two listings on a single page:

``` yaml
---
title: Team Documents
listing: 
  - id: lab-reports
    contents: "lab-reports/*.qmd"
    type: table
  - id: meeting-notes
    contents: "meeting-notes/*.qmd"
    type: table
---

## Lab Reports

:::{#lab-reports}
:::

## Meeting Notes

:::{#meeting-notes}
:::
```

## YAML Listing Content

In addition to populating a listing with inputs that match one or more globs, you can also provide items explicitly via a YAML file. For example, the following listing:

``` yaml
---
title: "Listing Example"
listing:
  id: sample-listings
  contents: 
    - posts
    - archived-items.yaml
  sort: "date desc"
  type: table
---
```

will include all the documents in the `posts` directory, but will also merge in the contents of the `archived-items.yaml` file. The contents of the `archived-items.yaml` file should be a list of items, each of which is a map of field names to values. For example:

``` yaml
- title: "Archived Item 1"
  author: Norah Jones
  date: 2020-01-01
  path: "archived/archived-item-.html"
  categories: [archived, technology]
```

This is useful for cases such as migrating existing content to Quarto - you can begin creating new content as Quarto documents, but still include existing content in your listings by providing their metadata via a yaml file.

## Overview

Quarto includes support for full text search of websites and books. By default, Quarto will automatically index the contents of your site and make it searchable using a locally built index. You can also configure Quarto search to use a hosted [Algolia](https://www.algolia.com/products/search-and-discovery/hosted-search-api/) index.

## Search Appearance

Search is enabled by default for websites and books. If the site has a navbar the search UI will appear on the navbar, otherwise it will appear on the sidebar. You can control the location of search with the following options:

| Option     | Description                                                                                                 |
|------------|-------------------------------------------------------------------------------------------------------------|
| `location` | `navbar` or `sidebar` (defaults to `navbar` if one is present on the page).                                 |
| `type`     | `overlay` or `textbox` (`overlay` provides a button that pops up a search UI, `textbox` does search inline).|

For example:

``` yaml
website:
  search: 
    location: navbar
    type: overlay
```

Note that the above example reflects the default behavior so need not be explicitly specified. Note also that search is enabled by default for websites (you can disable it with `search: false`).

The `overlay` option displays the search UI as follows:

![](images/navbar-overlay.png){.border .column-page-outset-right fig-alt="Quarto page with algolia search overlay in 'detached' mode. The webpage behind the search dialog is darkened, and the search dialog itself has a field for entering input tect, and displays a list of matching documents and preview of their tect below."}

The `textbox` option displays search like this:

![](images/navbar-textbox.png){.border .column-page-outset-right fig-alt="Algolia search with textbox in navbar. The search dialog opens as a dropdown in the right-hand side of the screen as an expansion of the textbox."}

When the search is displayed as a textbox, by default, there is no placeholder text. You can specify placeholder text using the `search-text-placeholder` key of the `language` option (note that this is at the top-level, not inside the `website` option):

::: {layout-ncol="2"}
``` yaml
language: 
  search-text-placeholder: Search
```

![](images/search-placeholder-text.png){fig-alt="Search box showing the placeholder text 'Search'."}
:::

## Keyboard Shortcut

In addition to clicking on the search UI, users can activate search using the keyboard shortcuts {{< kbd s >}}, {{< kbd f >}} or {{< kbd / >}}. You can override these shortcuts by specifying the `keyboard-shortcut` option. In this example, search will be activated with {{< kbd ? >}} or {{< kbd H >}}:

``` yaml
website:
  search:
    keyboard-shortcut: ["?", "H"]
```

## Customizing Results

You can use the following `search` options to customize how search results are displayed:

+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option             | Description                                                                                                                                                                                                                       |
+====================+===================================================================================================================================================================================================================================+
| `limit`            | The number of results to display in the search results. Defaults to 20.                                                                                                                                                           |
+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `collapse-after`   | The number of sections matching a document to show before hiding additional sections behind a 'more matches' link. Defaults to 2.                                                                                                 |
|                    |                                                                                                                                                                                                                                   |
|                    | ![](images/collapse-after.png){.border fig-alt="Part of a search result that shows a matching result for the search term, and at the bottom reads '3 more matches in this document'"}                                             |
+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `copy-button`      | If true, the search textbox will include a small icon that when clicked will copy a url to the search results to the clipboard (this is useful if users would like to share a particular search with results). Defaults to false. |
|                    |                                                                                                                                                                                                                                   |
|                    | ![](images/copy-button.png){.border fig-alt="search box with clickable clipboard icon on the right hand side that, if clicked, will copy the resulting url."}                                                                     |
+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `show-item-context`| Control whether page parents are displayed next to items in search results. Use `tree`, `parent`, `root`, or boolean (if true, `tree` is the default). E.g. `tree` results in "Guide \> Authoring \> Figures":                    |
|                    |                                                                                                                                                                                                                                   |
|                    | ![](images/search-item-context.png){.border fig-alt="search box with navigational context shown above the title of the first result." width="260"}                                                                                |
+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

## Using Algolia

In addition to the built-in search capability, Quarto websites can also be configured to use an external Algolia search index. When rendering a website, Quarto will produce a JSON file (`search.json` in the site output directory) which can be used to update an Algolia index. For more on creating indexes with Algolia, see [Send and Update Your Data](https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/) using Algolia.

### Basic Configuration

In order for Quarto to connect to your Algolia index, you need to provide basic connection information in your Quarto project file. You can find this connection information for your Algolia index in the Dashboard in the [API Keys](https://www.algolia.com/doc/guides/security/api-keys/) section. The following basic connection information is required:

+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option                | Description                                                                                                                                                                                      |
+=======================+==================================================================================================================================================================================================+
| `index-name`          | The name of the index to use when performing a search.                                                                                                                                           |
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `application-id`      | The unique ID used by Algolia to identify your application.                                                                                                                                      |
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `search-only-api-key` | The Search-Only API key to use to connect to Algolia.                                                                                                                                            |
|                       |                                                                                                                                                                                                  |
|                       | ::: callout-important                                                                                                                                                                            |
|                       | Be sure to use the **Search Only** API key, which provides read only access to your index and is safe to include in project files. Never use your Admin API key in a Quarto document or project. |
|                       | :::                                                                                                                                                                                              |
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `show-logo`           | Displays a 'search by Algolia' logo in the footer of search results.                                                                                                                             |
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

For example:

``` yaml
website:
  search:
    algolia:
      index-name: <my-index-name>
      application-id: <my-application-id>
      search-only-api-key: <my-search-only-api-key>
```

### Custom Index Schema

If you are simply using the `search.json` file generated by Quarto as your Algolia index, the above configuration information is all that is required to set up search using Algolia.

However, if you are generating an index in some other fashion, you may need to provide additional information to specify which fields Quarto should use when searching. You do this by including an `index-fields` key under `algolia` which specifies the names of specific fields in your index.

+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Option    | Description                                                                                                                                                                                                                |
+===========+============================================================================================================================================================================================================================+
| `href`    | The field to use to read the URL to this index entry. The user will be navigated to this URL when they select the matching search result. Note that Quarto groups results by URL (not including the anchor when grouping). |
|           |                                                                                                                                                                                                                            |
|           | This field is required (either as an existing field in your index or with a mapped field name).                                                                                                                            |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `title`   | The field to use to read the title of the index entry.                                                                                                                                                                     |
|           |                                                                                                                                                                                                                            |
|           | This field is required (either as an existing field in your index or with a mapped field name).                                                                                                                            |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `text`    | The field to use to read the text of the index entry.                                                                                                                                                                      |
|           |                                                                                                                                                                                                                            |
|           | This field is required (either as an existing field in your index or with a mapped field name).                                                                                                                            |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `section` | The field to use to read the section of the index entry. Quarto groups results by URL and uses the section information (if present) to show matching subsections of the same document.                                     |
|           |                                                                                                                                                                                                                            |
|           | This field is optional.                                                                                                                                                                                                    |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Any or all of the above may be specified in your Quarto project file. For example:

``` yaml
website:
  search:
    algolia:
      index-name: <my-index-name>
      application-id: <my-application-id>
      search-only-api-key: <my-search-only-api-key>
      index-fields:
        href: url
        section: sec
        text: body
```

### Algolia Insights

By default, Algolia provides a number of insights based upon the performance of your Algolia search. In addition, it may be helpful to understand more detailed tracking of the results that are viewed and clicked. You can enable click and conversion tracking using Algolia by setting the `analytics-events` to true:

``` yaml
website:
  search:
    algolia:
      index-name: <my-index-name>
      application-id: <my-application-id>
      search-only-api-key: <my-search-only-api-key>
      analytics-events: true
```

You can confirm that events are being properly sent to Algolia using the [Event Debugger](https://www.algolia.com/events/debugger). Note that the click and conversion events use cookies to maintain an anonymous user identifier---if [cookie consent](website-tools.qmd#cookie-consent) is enabled, search events will only be enabled if cookie consent has been granted.

### Advanced Configuration

In addition to the above configuration, you may also pass Algolia specific parameters when executing a search. For example, you may want to limit results to a particular facet or set of tags. To specify parameters, add the `params` key to your `algolia` yaml and provide params. For information about available parameters, see Algolia's [Search API Parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/).

For example:

``` yaml
website:
  search:
    algolia:
      index-name: <my-index-name>
      application-id: <my-application-id>
      search-only-api-key: <my-search-only-api-key>
      index-fields:
        href: url
        section: sec
        text: body
      params:
        tagFilters: ['tag1','tag2']
```

## Disabling/Forcing Search

You can disable search for an individual document by adding `search: false` to the document metadata. For example:

``` yaml
---
title: "My Document"
search: false
---
```

If you'd like to disable search support for an entire website, you can do so by including the following in your `_quarto.yml` file:

``` yaml
website:
  search: false
```

### Forcing the inclusion of individual elements

If you need elements from the document to be included in the search that otherwise wouldn't, add the `quarto-include-in-search-index` class to the element.
To include only a portion of a paragraph, etc, wrap the text in a span or a div and add the class to the element.


## Headers & Footers

You can provide standard headers and footers for pages on your site. These can apply to the main document body or to the sidebar. Available options include:

+-----------------+---------------------------------------------------------------------------------------------+
| Value           | Description                                                                                 |
+=================+=============================================================================================+
| `body-header`   | Markdown to insert at the beginning of each page's body (below the title and author block). |
+-----------------+---------------------------------------------------------------------------------------------+
| `body-footer`   | Markdown to insert below each page's body.                                                  |
+-----------------+---------------------------------------------------------------------------------------------+
| `margin-header` | Markdown to insert above right margin content (i.e. table of contents).                     |
+-----------------+---------------------------------------------------------------------------------------------+
| `margin-footer` | Markdown to insert below right margin content.                                              |
+-----------------+---------------------------------------------------------------------------------------------+

For example (included in \_quarto.yml) :

``` yaml
body-header: | 
  This page brought to you by <https://example.com>
margin-header: |
  ![Logo image](/img/logo.png)
```

Note that links to figures should start with a `/` to work on each level of the website.

## Announcement Bar

![Captured view of the Quarto website, showcasing the dynamic announcement bar feature.](images/website-announcement.png){.border fig-alt="Screenshot showing an announcement bar on Quarto website with an 'info-circle' icon, a dismiss button, and a primary colour type. The content reads 'Alert - this is some information that you should pay attention to'."}

Add an announcement to display a prominent, customizable bar at the top of your website that grabs visitors' attention.
It's perfect for highlighting important information, such as alerts, promotions, or updates.
You can set an icon, make it dismissable, and even include formatted content like bold text.
The announcement bar can be positioned to fit seamlessly within your site's layout (*e.g.*, `below-navbar` or `above-navbar`), ensuring the message is both impactful and integrated.

Here's an example of how you might configure it:

```{.yaml filename="_quarto.yml"}
website:
  announcement: 
    icon: info-circle # <1>
    dismissable: true # <2>
    content: "**Alert** - this is some information that you should pay attention to" # <3>
    type: primary # <4>
    position: below-navbar # <5>
```

1. `icon` - The Bootstrap icon to display in the announcement bar. You can choose from any of the [Bootstrap icons](https://icons.getbootstrap.com/).
2. `dismissable` - Whether the announcement bar can be dismissed by the user. It can be `true` or `false`.
3. `content` - The content of the announcement bar. You can use markdown to format the content.
4. `type` - The type of the announcement bar. It can be one of `primary`, `secondary`, `success`, `danger`, `warning`, `info`, `light`, `dark`.
5. `position` - The position of the announcement bar. It can be one of `below-navbar` or `above-navbar`.

## Social Metadata

You can enhance your website and the content that you publish to it by including additional types of metadata, including:

-   Favicon
-   Twitter Cards
-   Open Graph

{{< include ./_book-vs-website-key.qmd >}}

As you read the documentation below, keep in mind to substitute `book` for `website` if you are authoring a book.

### Favicon

The favicon for your site provides an icon for browser tabs and other sites that link to yours. Use the `favicon` option to provide the path to a favicon image. For example:

``` yaml
website:
  favicon: logo.png
```

### Twitter Cards

[Twitter Cards](https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards) provide an enhanced appearance when someone links to your site on Twitter. When a link to your site is included in a Tweet, Twitter automatically crawls your site and fetches any Twitter Card metadata. To enable the automatic generation of Twitter Card metadata for your site, you can add the following to your `_quarto.yml` configuration file:

``` yaml
website:
  twitter-card: true
```

In this case, Quarto will automatically generate a title, description, and preview image for the content. For more information about how Quarto finds preview images, see [Preview Images].

You may also provide additional metadata to be used when generating the Twitter Card, including:

+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Key           | Description                                                                                                                                                                                                                                                                            |
+===============+========================================================================================================================================================================================================================================================================================+
| `title`       | The title of the page. Quarto will automatically use the `title` metadata from the page metadata. If you'd like you can override this just for the Twitter Card by including a `title` in the `twitter-card` metadata.                                                                 |
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `description` | A short description of the content. Quarto will automatically use the `description` metadata from the page metadata. If you'd like you can override this just for the Twitter Card by including a `description` in the `twitter-card` metadata.                                        |
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image`       | The path to a preview image for this content.  By default, Quarto will use the `image` value from the document metadata, or if that isn't specified, the `image` value from the `website:` metadata.                                                                                   |
|               | If you provide an image, you may also optionally provide an `image-width` and `image-height` to improve the appearance of your Twitter Card.                                                                                                                                           |
|               |                                                                                                                                                                                                                                                                                        |
|               | If `image` is not provided, Quarto will automatically attempt to locate a preview image. For more information, see [Preview Images].                                                                                                                                                   |
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `card-style`  | Either `summary` or `summary_large_image`. If this is not provided, the best style will automatically selected based upon other metadata. You can learn more about Twitter Card styles [here](https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards). |
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `creator`     | `@username` of the content creator. Note that strings with special characters such as `@` must be quoted in yaml.                                                                                                                                                                      |
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `site`        | `@username` of website. Note that strings with special characters such as `@` must be quoted in yaml.                                                                                                                                                                                  |
+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Here is a more comprehensive example of specifying Twitter Card metadata in a `quarto.yml` file:

``` yaml
website:
  twitter-card:
    creator: "@dragonstyle"
    site: "@rstudio"
```

Quarto will automatically merge global metadata found in the `website: twitter-card` key with any metadata provided in the document itself in the `twitter-card` key. This is useful when you need to specify a mix of global options (for example, `site`) with per document options such as `title` or `image`.

### Open Graph

The [Open Graph protocol](http://ogp.me/) is a specification that enables richer sharing of links to articles on the web. It will improve the previews of your content when a link to it is pasted into applications like Slack, Discord, Facebook, Linkedin, and more. To enable the automatic generation of Open Graph metadata for your content, include the following in your `_quarto.yml` configuration file:

``` yaml
website:
  open-graph: true
```

In this case, Quarto will automatically generate a title, description, and preview image for the content. For more information about how Quarto finds preview images, see [Preview Images].

You may also provide additional metadata to be used when generating the Open Graph metadata, including:

+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Key           | Description                                                                                                                                                                                                                                          |
+===============+======================================================================================================================================================================================================================================================+
| `title`       | The title of the page. Quarto will automatically use the `title` metadata from the page metadata. If you'd like you can override this just for the Open Graph metadata by including a `title` in the `open-graph` metadata.                          |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `description` | A short description of the content. Quarto will automatically use the `description` metadata from the page metadata. If you'd like you can override this just for the Open Graph metadata by including a `description` in the `open-graph` metadata. |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `image`       | The path to a preview image for this content.  By default, Quarto will use the `image` value from the document metadata, or if that isn't specified, the `image` value from the `website:` metadata.                                                 |
|               | If you provide an image, you may also optionally provide an `image-width` and `image-height` to improve the appearance of your Twitter Card.                                                                                                         |
|               |                                                                                                                                                                                                                                                      |
|               | If `image` is not provided, Quarto will automatically attempt to locate a preview image. For more information, see [Preview Images].                                                                                                                 |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `locale`      | The locale that the Open Graph metadata is marked up in.                                                                                                                                                                                             |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `site-name`   | The name which should be displayed for the overall site. If not explicitly provided in the `open-graph` metadata, Quarto will use the `website:title` value.                                                                                         |
+---------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Here is a more comprehensive example of specifying Open Graph metadata in a `quarto.yml` file:

``` yaml
website:
  open-graph:
    locale: es_ES
    site-name: Quarto
```

Quarto will automatically merge global metadata found in the `website: open-graph` key with any metadata provided in the document itself in the `open-graph` key. This is useful when you need to specify a mix of global options (for example, `site`) with per document options such as `title` or `image`.

### Preview Images

You can specify a preview image for your article in several different ways:

1.  **Full URL**: You can explicitly provide a full url to the preview image using the `image` field in the appropriate metadata. For example:

    ``` {.yaml filename="page.qmd"}
    title: "My Document"
    image: "https://quarto.org/docs/websites/images/tools.png"
    ```

2.  **Relative Path**: You may provide a document relative path to an image (such as `images/preview-code.png`) or a project relative path to an image (such as `/images/preview-code.png`). If you provide a relative path such as this, you must also provide a `site-url` in your site's metadata. For example in your `_quarto.yml` configuration file:

    ``` {.yaml filename="_quarto.yml"}
    website:
      site-url: "https://www.quarto.org"
    ```

    and in your document front matter:

    ``` {.yaml filename="page.qmd"}
    title: "My Document"
    image: "/docs/websites/images/tools.png"
    ```

3.  **Image Class**: Any image that is being rendered in the page may also be used as a preview image by giving it the class name `preview-image`. Quarto will select the first image it finds with this class. For example, the following image will be used as the preview image when included on a page:

    ``` markdown
    ![](images/tools.png){.preview-image}
    ```

    If you label an image with this class, you must also provide a `site-url` in your site's metadata.

4.  **Image Filename**: If none of the above ways of specifying a preview image have been used, Quarto will attempt to find a preview image by looking for an image included in the rendered document with one of the following names: `preview.png`, `feature.png`, `cover.png`, or `thumbnail.png`.

If you'd like to provide a default that is used when pages specify a preview image in none of the above ways, specify it at the site level:

```{.yaml filename="_quarto.yml"}
website:
  image: "https://quarto.org/quarto-dark-bg.jpeg"
```

If you would like to prevent preview image discovery on a page, set `image` to `false`:

```{.yaml filename="page.qmd"}
---
image: false
---
```

## Google Analytics

You can add [Google Analytics](https://analytics.google.com/) to your website by adding a `google-analytics` key to your `_quarto.yml` file. In its simplest form, you can just pass your Google Analytics tracking Id (e.g. `UA-xxxxxxx`) or Google Tag measurement Id (e.g. `G-xxxxxxx`) like:

``` yaml
website:
  google-analytics: "UA-XXXXXXXX"
```

Quarto will use the key itself to determine whether to embed Google Analytics (analytics.js) or Google Tags (gtag) as appropriate.

In addition to this basic configuration, you can exercise more fine grained control of your site analytics using the following keys.

+----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Key            | Description                                                                                                                                                                                         |
+================+=====================================================================================================================================================================================================+
| `tracking-id`  | The Google tracking Id or measurement Id of this website.                                                                                                                                           |
+----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `storage`      | **cookies -** Use cookies to store unique user and session identification (default).                                                                                                                |
|                |                                                                                                                                                                                                     |
|                | **none -** Do not use cookies to store unique user and session identification.                                                                                                                      |
|                |                                                                                                                                                                                                     |
|                | For more about choosing storage options see [Storage].                                                                                                                                              |
+----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `anonymize-ip` | Anonymize the user ip address. For more about this feature, see [IP Anonymization (or IP masking) in Google Analytics](https://support.google.com/analytics/answer/2763052?hl=en).                  |
+----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `version`      | The version number of Google Analytics to use. Currently supports either 3 (for analytics.js) or 4 (for gtag). This is automatically detected based upon the `tracking-id`, but you may specify it. |
+----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

: {tbl-colwidths="[20,80]"}

### Storage

Google Analytics uses cookies to distinguish unique users and sessions. If you choose to use cookies to store this user data, you should consider whether you need to enable [Cookie Consent] in order to permit the viewer to control any tracking that you enable.

If you choose `none` for storage, this will have the following effects:

-   For Google Analytics v3 (analytics.js)\
    No tracking cookies will be used. Individual page hits will be properly tracked, enabling you to see which pages are viewed and how often they are viewed. Unique user and session tracking will not report data correctly since the tracking cookies they rely upon are not set.

-   For Google Tags (gtag)\
    User consent for ad and analytics tracking cookies will be withheld. In this mode, Google Analytics will still collect user data without the user identification, but that data is currently not displayed in the Google Analytics reports.

## Cookie Consent

Quarto includes the ability to request cookie consent before enabling scripts that set cookies, using [Cookie Consent](https://www.cookieconsent.com).

The user's cookie preferences will automatically control [Google Analytics] (if enabled) and can be used to control custom scripts you add as well (see [Custom Scripts and Cookie Consent]). You can enable the default request for cookie consent using the following:

``` yaml
website:
  cookie-consent: true
```

You can further customize the appearance and behavior of the consent using the following:

+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Key          | Description                                                                                                                                                                          |
+==============+======================================================================================================================================================================================+
| `type`       | The type of consent that should be requested, using one of these two values:                                                                                                         |
|              |                                                                                                                                                                                      |
|              | **implied -** (default) This will notify the user that the site uses cookies and permit them to change preferences, but not block cookies unless the user changes their preferences. |
|              |                                                                                                                                                                                      |
|              | **express -** This will block cookies until the user expressly agrees to allow them (or continue blocking them if the user doesn't agree).                                           |
+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `style`      | The style of the consent banner that is displayed:                                                                                                                                   |
|              |                                                                                                                                                                                      |
|              | **simple -** (default) A simple dialog in the lower right corner of the website.                                                                                                     |
|              |                                                                                                                                                                                      |
|              | **headline -** A full width banner across the top of the website.                                                                                                                    |
|              |                                                                                                                                                                                      |
|              | **interstitial -** A semi-transparent overlay of the entire website.                                                                                                                 |
|              |                                                                                                                                                                                      |
|              | **standalone -** An opaque overlay of the entire website.                                                                                                                            |
+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `palette`    | Whether to use a dark or light appearance for the consent banner:                                                                                                                    |
|              |                                                                                                                                                                                      |
|              | **light -** A light colored banner.                                                                                                                                                  |
|              |                                                                                                                                                                                      |
|              | **dark -** A dark colored banner.                                                                                                                                                    |
+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `language`   | The language to be used when displaying the cookie consent prompt specified using an IETF language tag.                                                                              |
|              | If not specified, the document language will be used.                                                                                                                                |
+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `policy-url` | The url to the website's cookie or privacy policy.                                                                                                                                   |
+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `prefs-text` | The text to display for the cookie preferences link in the website footer.                                                                                                           |
+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

: {tbl-colwidths="[20,80]"}

A custom example might look more like:

``` yaml
website:
  cookie-consent:
    type: express
    style: headline
    palette: dark
  google-analytics:
    tracking-id: "G-XXXXXXX"
    anonymize-ip: true
```

### Cookie Preferences

In addition to requesting consent when a new user visits your website, Cookie Consent will also add a cookie preferences link to the footer of the website. You can control the text of this link using `prefs-text`. If you would rather position this link yourself, just add a link with the id `#open_preferences_center` to the website and Cookie Consent will not add the preferences link to the footer. For example:

``` markdown
Change [cookie preferences]{#open_preferences_center}
```

### Custom Scripts and Cookie Consent

Cookie Consent works by preventing the execution of scripts unless the user has expressed their consent. To control your custom scripts using Cookie Consent:

1.  Insert script tags as `type='text/plain'` (when the user consents, the type will be switched to `text/javascript` and the script will be executed).

<!-- -->

2.  Add a `cookie-consent` attribute to your script tag, setting it one of the following 4 levels:

    +----------------------+------------------------------------------------------------------------------------------------------------------------+
    | Level                | Description                                                                                                            |
    +======================+========================================================================================================================+
    | `strictly-necessary` | Strictly scripts are loaded automatically and cannot be disabled by the user.                                          |
    +----------------------+------------------------------------------------------------------------------------------------------------------------+
    | `functionality`      | Scripts that are required for basic functionality of the website, for example, remembering a user language preference. |
    +----------------------+------------------------------------------------------------------------------------------------------------------------+
    | `tracking`           | Scripts that are used to track users, for example [Google Analytics].                                                  |
    +----------------------+------------------------------------------------------------------------------------------------------------------------+
    | `targeting`          | Scripts that are used for the purpose of advertising to ad targeting, for example Google AdSense remarketing.          |
    +----------------------+------------------------------------------------------------------------------------------------------------------------+

An example script that is used for user tracking would look like:

``` javascript
<script type="text/plain" cookie-consent="tracking">

// My tracking JS code here

</script>
```

## Site Resources

Besides input and configuration files, your site likely also includes a variety of resources (e.g. images) that you will want to publish along with your site. Quarto will automatically detect any files that you reference within your site and copy them to the output directory (e.g. `_site`).

Quarto also recognizes the following files and copies them to your output directory: 

* `404.html`, one option for providing a [404 Page](/docs/websites/website-navigation.qmd#pages-404)
* `robots.txt`, a file specified by the [Robots Exclusion Protocol](https://datatracker.ietf.org/doc/html/rfc9309){.external} that tells search engine crawlers which pages or files on your website they can or cannot access
* `_redirects`, a file used by some publishing providers to provide page redirects, e.g. [Netlify](https://docs.netlify.com/routing/redirects/#syntax-for-the-redirects-file){.external}
* `CNAME`, a file used by some publishing providers to specify a custom domain, e.g. [GitHub Pages](/docs/publishing/github-pages.qmd#custom-domain)
* `.nojekyll`, a file used by GitHub pages to bypass building with Jekyll, e.g. when [publishing from `docs/`](/docs/publishing/github-pages.qmd#render-to-docs)

If this auto-detection fails for any reason, or if you want to publish a file not explicitly linked to from within your site, you can add a `resources` entry to your configuration. For example, here we specify that we want to include all Excel spreadsheets within the project directory as part of the website:

``` {.yaml .yml}
project:
  type: website
  resources: 
    - "*.xlsx"
```

Note that the `*.xlsx` value is quoted: this is because YAML requires that strings that begin with non-alphanumeric characters be quoted.

You can also add a `resources` metadata value to individual files. For example:

``` yaml
title: "My Page"
resources:
  - "sheet.xlsx"
```

Images are the most commonly used type of resource file. If you have global images (e.g. a logo) that you want to reference from various pages within your site, you can use a site-absolute path to refer to the images, and it will be automatically converted to a relative path during publishing. For example:

``` markdown
![](/images/logo.png)
```

## Dark Mode

Quarto websites can support both a light and dark mode. For example, you may use the `flatly` and `darkly` themes (which are designed to be used in tandem as dark and light appearances) as:

``` yaml
theme:
  light: flatly
  dark: darkly
```

For more about selecting the dark and light themes for your website, see [Dark Mode](/docs/output-formats/html-themes.qmd#dark-mode).

::: column-page-outset
+--------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+
| Light                                                                                                        | Dark                                                                                                      |
+==============================================================================================================+===========================================================================================================+
| ![](images/site-light.png){fig-alt="A Quarto sidebar showing a light theme. The 'Dark mode' toggle is off."} | ![](images/site-dark.png){fig-alt="A Quarto sidebar showing a dark theme. The 'Dark mode' toggle is on."} |
+--------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+
:::

When enabled, a toggle that allows your reader to control the appearance of the website will appear. The toggle will automatically be added to the website navigation as follows:

1.  If a navbar has been specified, the toggle will appear in the top right corner of the nav bar.
2.  If there is no navbar present, but a sidebar has been specified, the toggle will appear in the same location that the sidebar tools appears (adjacent to the title or logo in the sidebar).
3.  If there is no navbar or sidebar present, the toggle will appear in the top right corner of the page.
