---
title: "Modul 3 Struktur Data: Operasi *array*, algoritma *searching* dan *sorting*"
---

Kembali ke [Struktur Data](strukdat2023.qmd)

# Outline

* Operasi pada *array*
* Algoritma *searching*
  + *Linear search*
  + *Binary search*
* Mengukur waktu
* Membuat *array* yang *random*
* Algoritma *sorting* secara *ascending*
  + *Bubble sort*
  + *Selection sort*
  + *Insertion sort*
  + *Merge sort*
  + *Quicksort* versi Hoare
  + *Quicksort* versi Lomuto
* Membuat dan menggunakan fungsi *compare*
* *Header file* untuk Modul 3 Praktikum: `prakmodul3.h` dan `prakmodul3.c`

# Operasi pada *array*

blabla insertion deletion?

# Algoritma *searching*

blabla

## *Linear search*

blabla

## *Binary search*

blabla

# Mengukur waktu

Dalam mempelajari dan membandingkan algoritma *searching* maupun *sorting*, tentunya kita ingin mengetahui berapa lama waktu yang diperlukan tiap algoritma. Di bahasa pemrograman C, sudah ada fitur `time()` yang akan mengembalikan banyaknya detik yang telah berlalu sejak tanggal 1 Januari 1970 pukul 00.00.00, zona waktu UTC. Dengan demikian, kita bisa menggunakan selisih untuk mengukur waktu yang telah berlalu.

Fungsi `time()` tersebut ada di *system header file* `time.h`, sehingga perlu di-*include* terlebih dahulu. Pada contoh berikut, kita akan mengukur waktu yang dibutuhkan untuk melakukan *linear search* pada *array* dan nilai yang kita berikan.

```{.c filename=timetest1.c code-line-numbers="true"}
#include <stdio.h>
#include <time.h>

int main () {
    int waktu_awal = time(NULL);
    
    // linearsearch

    int waktu_akhir = time(NULL);

    int durasi = waktu_akhir - waktu_awal;

    printf("Waktu awal: %d\n", waktu_awal);
    printf("Waktu akhir: %d\n", waktu_akhir);
    printf("Durasi: %d", durasi);
    return 0;
}
```

Mengapa harus NULL? Sebenarnya, kita bisa saja menuliskan kodenya seperti berikut ini.

```{.c filename=timetest2.c code-line-numbers="true"}
#include <stdio.h>
#include <time.h>

int main () {
    int waktu_awal;
    time(&waktu_awal);
    
    // linearsearch

    int waktu_akhir;
    time(&waktu_akhir);

    int durasi = waktu_akhir - waktu_awal;

    printf("Waktu awal: %d\n", waktu_awal);
    printf("Waktu akhir: %d\n", waktu_akhir);
    printf("Durasi: %d", durasi);
    return 0;
}
```

Pada kode di atas, kita hanya mendeklarasi variabel `waktu_awal` dan `waktu_akhir`, kemudian fungsi `time()` akan langsung memasukkan nilainya ke dalam `waktu_awal` dan `waktu_akhir`. Namun, ada tanda & ("dan", juga disebut *ampersand*). Singkat cerita, tanda & ini melambangkan ***alamat*** (lokasi memori) dari suatu variabel. Fungsi `time()` akan langsung menyimpan nilai waktunya ke alamat tersebut, sehingga otomatis mengisi nilai untuk variabel tersebut.

`NULL` adalah konstanta yang artinya adalah ketiadaan. Pada kode yang sebelumnya, ketika kita menggunakan `NULL`, kita memberitahu fungsi `time()` agar tidak perlu menyimpan nilainya di alamat manapun; cukup kembalikan saja.

Urusan memori ini akan dibahas lebih lanjut bersama *pointer* di pertemuan selanjutnya.

# Membuat *array* yang *random*

Sebelum melanjutkan pembahasan ke algoritma *sorting*, kita akan membahas cara membuat *array* yang *random*, yang nantinya bisa kita gunakan untuk menguji algoritma *sorting*.

Di bahasa pemrograman C, ada fungsi bernama `rand()`, yang menghasilkan suatu bilangan bulat secara *random* di antara 0 dan suatu konstanta `RAND_MAX`. Baik fungsi maupun konstanta tersebut ada di *system header file* bernama `stdlib.h`, sehingga perlu di-*include* terlebih dahulu.

```{.c filename=randtest1.c code-line-numbers="true"}
#include <stdio.h>
#include <stdlib.h>

int main() {
    int sembarang = rand();
    printf("%d", sembarang);
    return 0;
}
```

Namun, kalau dicoba di-*run* berulang kali, hasilnya akan sama persis. Mengapa seakan-akan tidak random?

Sebenarnya, fungsi `rand()` di bahasa C bergantung pada suatu *seed* atau semacam "nilai awal" yang perlu kita tentukan. Apabila tidak kita tentukan di awal, dari sananya sudah ditentukan *seed* nya, yaitu angka 1; sehingga, dari tadi, *seed* nya selalu sama, maka angka "*random*" yang dihasilkan selalu sama.

Kita bisa menentukan *seed* nya menggunakan fungsi `srand()`.

```{.c filename=randtest2.c code-line-numbers="true"}
#include <stdio.h>
#include <stdlib.h>

int main() {
    int coba_seed = 100;
    srand(coba_seed);
    int sembarang = rand();
    printf("%d", sembarang);
    return 0;
}
```

Kali ini, kita mendapatkan angka yang berbeda daripada yang sebelumnya. Namun, lagi-lagi, kalau kita *run* berulang kali, *output* tidak berubah. Penyebabnya? *Seed* yang kita pasang selalu sama.

Artinya, agar angka yang kita peroleh benar-benar *random*, maka kita memerlukan *seed* yang berbeda tiap kali program dijalankan. Bagaimana caranya?

Cara yang paling sederhana adalah dengan menggunakan `time(NULL)` sebagai *seed*, yaitu waktu ketika program dijalankan. Waktu selalu berjalan, sehingga dengan demikian, dijamin *seed* akan selalu berbeda tiap kali program dijalankan.

```{.c filename=randtest3.c code-line-numbers="true"}
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int main() {
    int coba_seed = time(NULL);
    srand(coba_seed);
    int sembarang = rand();
    printf("%d", sembarang);
    return 0;
}
```

Bagaimana kalau kita menginginkan bilangan *random* di antara suatu rentang saja, misalnya di antara 1 dan 10? Kita bisa membuat fungsi seperti berikut:

```{.c code-line-numbers="true"}
int randrange(int min, int max) {
    int hasil = ( rand() / ( ((double)RAND_MAX) + 1.0 ) ) * (max-min+1) + min;
    return hasil;
}
```

Fungsi di atas akan...

1. memperoleh suatu bilangan *random* di antara 0 dan `RAND_MAX`;
2. membagi bilangan *random* tersebut dengan `RAND_MAX + 1.0`, agar diperkecil menjadi bilangan pada interval `[0, 1)` (pembagi sengaja ditambah 1 agar hasilnya tidak mungkin sama dengan satu);
2. menghitung panjang interval `[min,max]` yaitu `max-min+1`, kemudian mengkalikan hasil yang tadi dengan panjang interval, agar diperbesar menjadi bilangan di interval `[0, max-min+1)` atau sama saja `[0, max-min]`; dan
3. menggeser hasil tersebut dengan `min`, agar menjadi bilangan pada interval `[min, max]`, sesuai yang diminta.

Jangan lupa, `srand()` tetap perlu digunakan di fungsi `main()`, dan **cukup sekali saja**. Apabila *seed* dipasang ulang berkali-kali, maka proses penghasilan bilangan *random* juga akan terus diulang dari awal, sehingga lagi-lagi bilangan yang dihasilkan oleh `rand()` akan selalu kembali ke bilangan pertama yang dihasilkan; tidak berubah.

Mari kita coba:

```{.c filename=randtest4.c code-line-numbers="true"}
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int randrange(int min, int max) {
    int hasil = ( rand() / ( ((double)RAND_MAX) + 1.0 ) ) * (max-min+1) + min;
    return hasil;
}

int main() {
    int coba_seed = time(NULL);
    srand(coba_seed);

    printf("Dihasilkan: %d\n", randrange(1, 10));
    printf("Dihasilkan: %d\n", randrange(1, 10));
    printf("Dihasilkan: %d\n", randrange(1, 10));

    return 0;
}
```

Terlihat bahwa dihasilkan tiga angka yang *random*, yang juga terus berubah tiap kali di-*run* ulang.

Dengan demikian, kita bisa membuat fungsi yang menerima *array* yang baru saja dideklarasi, kemudian mengisi nilainya secara *random* dengan banyaknya elemen yang kita tentukan:

```{.c code-line-numbers="true"}
void randfill(int min, int max, int arr[], int arr_length) {
    for (int i = 0; i < arr_length; i++) {
        arr[i] = randrange(min, max);
    }
}
```

Kita bisa menggunakan fungsi tersebut seperti pada contoh kode berikut.

```{.c filename=randarray.c code-line-numbers="true"}
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include "prakmodul2.h"

int randrange(int min, int max) {
    int hasil = ( rand() / ( ((double)RAND_MAX) + 1.0 ) ) * (max-min+1) + min;
    return hasil;
}

void randfill(int min, int max, int arr[], int arr_length) {
    for (int i = 0; i < arr_length; i++) {
        arr[i] = randrange(min, max);
    }
}

int main() {
    int coba_seed = time(NULL);
    srand(coba_seed);

    int min = 1;
    int max = 20;
    int arr_length = 10;

    // deklarasi array, tanpa menentukan apa isinya
    int my_array[arr_length];

    // array diisi melalui fungsi randfill
    randfill(min, max, my_array, arr_length);

    // menggunakan fungsi array_int_print dari Modul 2
    array_int_print(my_array, arr_length);

    return 0;
}
```

# Algoritma *sorting* secara *ascending*

Untuk mempersingkat waktu, kita hanya akan membahas kode untuk algoritma *sorting* secara *ascending*.

## *Bubble sort*

*Bubble sort* adalah suatu algoritma *sorting* yang dilakukan berkali-kali sampai *array* sudah terurut dengan benar, di mana tiap elemen diperiksa dengan sebelahnya, kemudian ditukar apabila urutan di antara keduanya belum benar. Ketika melakukan *bubble sort*, kita bisa yakin bahwa *array* sudah terurut apabila sudah tidak terjadi pertukaran sama sekali ketika memeriksa kembali semua elemen *array* dari awal sampai akhir.

Dengan konsep di atas, kita bisa membuat fungsi *bubble sort* seperti berikut.

```{.c code-line-numbers="true"}
void array_int_bubblesort1_asc(int arr[], size_t arr_length) {
    bool terjadi_pertukaran = true; // asumsi array belum terurut

    // ulangi selama masih terjadi pertukaran
    while (terjadi_pertukaran) {
        terjadi_pertukaran = false;
        // asumsi tidak akan terjadi pertukaran,
        // akan diubah menjadi true ketika terjadi pertukaran

        // for loop untuk melihat tiap elemen dari awal sampai akhir
        for (int i = 0; i < (int)arr_length-1; i++) {
            if (arr[i] > arr[i+1]) { // apabila ada yang harus ditukar
                // maka tukarlah
                int temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;

                // terjadi pertukaran
                terjadi_pertukaran = true;
            }
        }
    }
}
```

Perhatikan bahwa fungsi di atas memiliki *return type* berupa `void`, yang artinya tidak ada yang di-*return*. Bahkan, elemen *array* langsung ditukar menggunakan *array* yang dimasukkan ke dalam fungsi. Di bahasa pemrograman C, ada sesuatu yang spesial tentang *array* sehingga *array* bisa langsung dimanipulasi dari dalam fungsi. Hal ini akan dibahas di pertemuan selanjutnya bersama *pointer*.

Intinya, terima saja dulu, bahwa ketika *array* masuk sebagai input fungsi, maka apapun yang dilakukan pada *array* tersebut di dalam fungsinya akan benar-benar mengubah *array* yang sesungguhnya.

Dengan demikian, penggunaan fungsi di atas bisa seperti berikut:

```{.c filename="bubblesort1.c" code-line-numbers="true"}
#include <stdio.h>
#include "prakmodul2.h"

// deklarasi fungsi
void array_int_bubblesort1_asc(int arr[], size_t arr_length);
// fungsi ini akan didefinisikan setelah definisi fungsi main

int main () {
    int array1[] = {10, 3, 8, 4, 5, 7, 9, 6};
    size_t panjang1 = sizeof(array1)/sizeof(array1[0]);

    printf("Sebelum bubble sort: ");
    array_int_print(array1, panjang1);
    printf("\n");

    printf("Setelah bubble sort: ");
    array_int_bubblesort1_asc(array1, panjang1);
    array_int_print(array1, panjang1);

    return 0;
}

// definisi fungsi
void array_int_bubblesort1_asc(int arr[], size_t arr_length) {
    bool terjadi_pertukaran = true; // asumsi array belum terurut

    // ulangi selama masih terjadi pertukaran
    while (terjadi_pertukaran) {
        terjadi_pertukaran = false;
        // asumsi tidak akan terjadi pertukaran,
        // akan diubah menjadi true ketika terjadi pertukaran

        // for loop untuk melihat tiap elemen dari awal sampai akhir
        for (int i = 0; i < (int)arr_length-1; i++) {
            if (arr[i] > arr[i+1]) { // apabila ada yang harus ditukar
                // maka tukarlah
                int temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;

                // terjadi pertukaran
                terjadi_pertukaran = true;
            }
        }
    }
}
```

Perhatikan bahwa... (basically lead to optimizing bubble sort, provide two other variations as per the wikipedia page)

## *Selection sort*

blabla

## *Insertion sort*

blabla

## *Merge sort*

blabla

## *Quicksort* versi Hoare

Tony Hoare menerbitkan *paper* tentang ***quicksort***, yaitu algoritma *sorting* yang ia buat, pada tahun 1961, yang bisa dilihat di tautan (*link*) berikut.

* <https://www.cs.ox.ac.uk/files/6226/H2006%20-%20Historic%20Quicksort.pdf>
* (*link* alternatif) <http://rabbit.eng.miami.edu/class/een511/quicksort.pdf>

Sejak itu, sudah ada beberapa variasi *quicksort*, seperti versi Lomuto. Namun, inti sari dari algoritma *quicksort* secara umum adalah sebagai berikut:

1. Apabila *array* ternyata kosong atau hanya terdiri dari satu elemen, diamkan saja, tidak ada yang perlu disortir. Apabila terdiri dari 2+ elemen, lanjut ke langkah selanjutnya.
2. Pilih salah satu elemen pada *array* (boleh yang mana saja) sebagai elemen "pivot". Jangan sampai lupa, baik nilainya maupun indeksnya/letaknya.
3. Lakukan "partisi", yaitu pertukaran elemen seperlunya (bahkan elemen pivot boleh ikut ditukar dan dipindahkan) sedemikian sehingga, pada akhirnya,
    i) semua elemen di sebelah kiri pivot pasti lebih kecil (atau sama dengan) pivot; dan
    ii) semua elemen di sebelah kanan pivot pasti lebih besar (atau sama dengan) pivot.

    "Partisi" yang dimaksud adalah bahwa, setelah proses partisi selesai, *array* seakan-akan telah terbagi (terpartisi) menjadi tiga bagian, yaitu (dari kiri ke kanan):
    i) "partisi kiri/bawah", yaitu bagian di sebelah kiri pivot, terdiri dari semua elemen yang lebih kecil (atau sama dengan) pivot;
    ii) pivot itu sendiri; dan
    iii) "partisi kanan/atas", yaitu bagian di sebelah kanan pivot, terdiri dari semua elemen yang lebih besar (atau sama dengan) pivot.
4. Kemudian, memperhatikan letak pivot, lakukan *quicksort* pada semua elemen di sebelah kiri pivot (yaitu pada partisi kiri), dan lakukan *quicksort* pada semua elemen di sebelah kanan pivot (yaitu pada partisi kanan).

(Menariknya, Tony Hoare tidak menggunakan istilah "pivot". Beliau menggunakan istilah "*bound*" untuk "nilai pivot", dan menuliskan "*the element from which the bound was chosen*" ketika bermaksud mengatakan "elemen pivot".)

Terlihat dari langkah terakhir, algoritma *quicksort* bersifat rekursif. Bagian tersulit dari *quicksort* adalah pada tahapan partisi. Tahapan inilah yang cara melakukannya bisa bervariasi (tidak seperti algoritma *sorting* lainnya yang cenderung begitu-begitu saja). Tidak hanya itu, bahkan cara memilih pivot bisa saja dengan memilih elemen pertama, elemen tengah, elemen terakhir, atau median dari ketiganya ("*median-of-three*"), ataupun variasi lainnya.

Dari *paper* aslinya, penjelasan Tony Hoare tentang cara melakukan partisi (menurut beliau) bisa dirangkum sebagai berikut:

1. Buat dua "panah", yaitu "panah bawah" (i) dan "panah atas" (j), di mana panah bawah menunjuk pada elemen pertama dan panah atas menunjuk pada elemen terakhir. (Secara pemrograman, simpan indeksnya saja.) Bisa dibayangkan, ada asumsi *array* sudah dipartisi, di mana panah bawah akan memastikan partisi kiri sudah benar, dan panah atas akan memastikan partisi kanan sudah benar.
2. *while loop*: selama elemen yang ditunjuk oleh panah bawah itu masih lebih kecil atau sama dengan nilai pivot, (dan selama panah bawah belum melewati panah atas,) geser panah bawah satu langkah ke kanan. (Artinya, selama partisi kiri sudah benar, lanjut memeriksa elemen berikutnya yaitu ke kanan. Berhenti ketika ada yang lebih besar dari pivot, sehingga harusnya ada di partisi kanan; menunggu ditukar.)
3. *while loop*: selama elemen yang ditunjuk oleh panah atas itu masih lebih besar atau sama dengan nilai pivot, (dan selama panah bawah belum melewati panah atas,) geser panah atas satu langkah ke kiri. (Artinya, selama partisi kanan sudah benar, lanjut memeriksa elemen berikutnya yaitu ke kiri. Berhenti ketika ada yang lebih kecil dari pivot, sehingga harusnya ada di partisi kiri; menunggu ditukar.)
4. Sampai sini, apabila panah bawah masih belum melewati panah atas, maka ada dua elemen yang menunggu ditukar, yaitu yang ditunjuk oleh panah bawah dan yang ditunjuk oleh panah atas. Maka tukarlah, lalu kembali ke langkah kedua.
5. Sampai sini, sudah tidak lagi kembali ke langkah kedua, sehingga panah bawah sudah melewati panah atas; sekarang panah atas ada di sebelah *kiri* dari panah bawah. Bayangkan, di antara dua panah tersebut, ada semacam garis pembagi: dari elemen pertama sampai panah atas adalah "partisi kiri", sedangkan dari panah bawah sampai elemen terakhir adalah "partisi kanan".
    i) Apabila pivot jatuh pada partisi kiri (indeks pivot <= panah atas), tukarkan elemen pada panah atas dengan elemen pivot. (Lalu, bayangkan bahwa partisi kiri sedikit diperkecil karena elemen pivot tidak boleh masuk ke kedua partisi.)
    ii) Sedangkan, apabila pivot berada pada partisi kanan (indeks pivot >= panah bawah), tukarkan elemen pada panah bawah dengan elemen pivot. (Lalu, bayangkan bahwa partisi kanan sedikit diperkecil karena elemen pivot tidak boleh masuk ke kedua partisi.)

    (Dengan demikian, letak pivot sekarang berada di perbatasan antara partisi kiri dan partisi kanan.)
6. Kembalikan indeks letak pivot.

Catatan: apabila, pada langkah keempat, ternyata antara panah bawah maupun panah atas sedang menunjuk ke elemen pivot, maka elemen pivot terlibat dalam pertukaran; jangan lupa mengubah indeks pivot menjadi posisi barunya setelah ditukar.

(Sebenarnya, Tony Hoare menggunakan istilah *lower pointer* dan *upper pointer* untuk kedua panah. Namun, konsep *pointer* sebenarnya tidak diperlukan sama sekali, dan konsep yang beliau maksud juga bisa digambarkan dengan panah, yang letaknya berupa indeks *array*.)

Sebelum membuat kode untuk algoritma *quicksort* versi Tony Hoare, kita perlu membuat fungsi yang akan menentukan elemen pivot berdasarkan *array*, misalnya memanfaatkan indeks pertama dan/atau indeks terakhir. (Fungsi ini akan bisa diubah-ubah apabila ingin bereksperimen dengan metode pemilihan pivot.)

```{.c code-line-numbers="true"}
int ChoosePivot_idx(int arr[], int low, int high) {
    int choice_idx = low; // pilih elemen pertama saja lah~
    return choice_idx;
}
```

Berikut ini, kita akan mencoba menerapkan *quicksort* versi Tony Hoare, sebelum nantinya mencoba dengan algoritma partisi menurut Lomuto.

```{.c code-line-numbers="true"}
void HoarePartition(int arr[], int low, int high) {
    return;
}
```

## *Quicksort* versi Lomuto

blabla

# Membuat dan menggunakan fungsi *compare*

blabla

# *Header file* untuk Modul 3 Praktikum: `prakmodul3.h` dan `prakmodul3.c`

::: {.panel-tabset}

## `prakmodul3.h`

```{.c code-line-numbers="true"}
// empty
```

## `prakmodul3.c`

```{.c code-line-numbers="true"}
// empty
```

:::