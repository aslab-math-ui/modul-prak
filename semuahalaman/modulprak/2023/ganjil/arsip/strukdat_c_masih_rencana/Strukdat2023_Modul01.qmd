---
title: "Modul 1 Struktur Data: Pengenalan bahasa C: data, ekspresi, pernyataan, dan alur logika"
---

Kembali ke [Struktur Data](strukdat2023.qmd)

Selamat datang di praktikum Struktur Data!

# Outline

* Mengapa bahasa pemrograman C untuk Struktur Data?
* Program pertama
    + Hello world! - komponen dasar program C
    + Kompilasi (*compilation*) dan eksekusi (*execution* atau *running*)
* Variasi *string* dan *comment*
    + *Output* selain *string*: *format specifier*
    + *Escape sequence* untuk *string*
    + *Comment*
* Perhitungan, variabel, dan tipe data bilangan
    + Variabel dan tipe data bilangan
    + Operasi dasar
    + Konstanta
    + Ukuran data dengan `sizeof` dan `size_t`
    + *Format specifier* lainnya
* Pernyataan kondisional (bersyarat)
    + `if`, `else`
    + Tipe data *boolean*
    + `switch case` dan `enum`
* *Looping* (pernyataan berulang)
    + `while` loop
    + `for` loop
    + `do while` loop

# Mengapa bahasa pemrograman C untuk Struktur Data?

Sejauh ini, bahasa pemrograman utama yang digunakan selama berbagai praktikum komputasi adalah Python. Khusus Struktur Data, praktikum akan dilaksanakan menggunakan bahasa pemrograman C, karena **ada fitur pemrograman yang dipelajari di Struktur Data tetapi tidak ada di Python.** Fitur tersebut sangat krusial dalam pembelajaran Struktur Data, yaitu ***pointer***. Hampir semua struktur data yang akan kita pelajari di mata kuliah Struktur Data membutuhkan *pointer*.

::: {.callout-note}

## *Advanced note*

Memang betul, kita bisa memanfaatkan fitur `class` di Python daripada menggunakan `struct` dan *pointer* di bahasa pemrograman C.

Sebenarnya, fitur *pointer* tersirat di dalam beberapa keanehan Python, seperti ketika membuat `list` baru dari `list` lain menggunakan *assignment* (padahal harusnya `.copy()`), dan perubahan pada salah satu `list` juga mengubah `list` yang satunya lagi. Hal tersebut bisa terjadi karena sebenarnya Python menggunakan *pointer* untuk `list`. Lagipula, bahasa pemrograman Python dibuat menggunakan C.^[[1]](https://en.wikipedia.org/wiki/CPython)^ ^[[2]](https://www.scaler.com/topics/in-which-language-python-is-written/)^

Sayangnya, kita tidak bisa secara eksplisit menggunakan *pointer* di Python. Sehingga, apabila kita mempelajari Struktur Data menggunakan Python, kita harus bergantung pada keanehan Python, terutama sifat `class` yang memiliki keanehan yang sama dengan `list`. Dengan langsung menggunakan bahasa C, lebih jelas bagian mana pada kode yang menggunakan *pointer* dan bagian mana yang tidak.

:::

Tentu saja, karena kita pindah ke bahasa pemrograman C, kita harus mempelajari terlebih dahulu dasar-dasar pemrograman C dari awal, sekaligus *review* materi pemrograman dasar.

# Program pertama

## Hello world! - komponen dasar program C

```{.c filename="helloworld.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("Hello, world!");
    return 0;
}
```

Program di atas melakukan... terdiri dari...

Coba save di folder... kemudian pencet run (code runner)...

Beberapa variasi...

## Kompilasi (*compilation*) dan eksekusi (*execution* atau *running*)

Perhatikan folder di mana kode Anda tersimpan. Apakah ada *file* baru dengan nama yang sama seperti nama program, tetapi dengan *file extension* (akhiran) yang berbeda? Sebenarnya, *file* itulah yang dibuka oleh komputer Anda.

Tidak seperti Python yang bersifat *interpreted*, bahasa pemrograman C adalah bahasa pemrograman yang bersifat *compiled*. Artinya, ketika ingin menguji coba program C yang telah kita buat, ada dua tahapan:

* Kompilasi (*compilation*), yaitu mengkonversi program C menjadi bahasa mesin (*machine language*, bahasa yang langsung bisa dipahami oleh **prosesor** di komputer Anda, yaitu komponen yang gunanya adalah menjalankan program). Proses kompilasi ini menghasilkan *file* baru.
* Eksekusi (*execution* atau *running*), yaitu komputer (lebih tepatnya prosesor) langsung menjalankan program yang telah dikompilasi ke dalam bahasa mesin (yaitu *file* baru tersebut).

Sedangkan, pada bahasa pemrograman yang *interpreted*, ketika komputer menjalankan program, komputer melakukannya per baris; artinya, untuk tiap baris, komputer perlu memahaminya terlebih dahulu, kemudian melakukan perintah pada baris tersebut. Bolak-balik antara memahami dan melakukan perintah itu dilakukan per baris, dan selalu dilakukan tiap kali program dijalankan. Oleh karena itu, program yang dibuat dengan bahasa pemrograman *interpreted* seperti Python cenderung lebih pelan daripada yang dibuat dengan bahasa pemrograman *compiled* seperti C.

Proses kompilasi dilakukan oleh *compiler*. *Compiler* untuk bahasa pemrograman C yang paling terkenal adalah **gcc** (GNU Compiler Collection), yang bisa tersambung langsung dengan Visual Studio Code melalui *extension* seperti "C/C++" dan "Code Runner". Dengan *extension* Code Runner, Anda tinggal menekan tombol *run* (â–¶) di sekitar ujung kanan atas aplikasi, lalu gcc akan langsung mengkompilasi program Anda.

Proses kompilasi menghasilkan suatu *file* yang bisa langsung dijalankan oleh komputer Anda. Untuk model dan merek proseor yang berbeda, bisa jadi ada variasi dalam *file* hasil *compile* tersebut, tergantung bahasa mesin yang dipahami oleh prosesor. Untungnya, gcc juga bisa mengkompilasi program ke dalam *file format* seperti .exe (aplikasi Windows), sehingga hanya bergantung sistem operasi (*operating system*).

**Tiap kali Anda ingin menjalankan suatu program C, proses kompilasi selalu harus dilakukan terlebih dahulu** sebelum eksekusi, tidak seperti bahasa pemrograman yang *interpreted*.

*Fun fact:* biasanya *compiler* tidak sekedar mengkompilasi, tetapi juga mencoba melakukan optimisasi (*optimization*), yaitu mempersingkat dan menyederhanakan program, menghemat semua penggunaan memori dan sebagainya agar program menjadi lebih kecil dan lebih cepat dijalankan tetapi tetap melakukan hal yang sama persis.

# Variasi *string* dan *comment*

## *Output* selain *string*: *format specifier*

Tentu saja, kemampuan C bukan sekedar mengeluarkan *output* berupa *string*. Program C juga bisa mengeluarkan *output* berupa *integer* (bilangan bulat), dengan *syntax* (sintaks; cara penulisan) seperti berikut:

```{.c filename="helloint.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("%d", 98);
    return 0;
}
```

Pada contoh program `helloint.c` di atas, *output* yang dikeluarkan adalah suatu bilangan bulat yaitu 98. Adanya tulisan `"%d"` adalah bentuk ***string formatting***, di mana huruf "d" melambangkan tipe data bilangan bulat dalam bentuk desimal (base 10). Artinya, bilangan bulat di sampingnya itu disisipkan ke dalam *string*, sehingga kita bisa melihat *output* berupa bilangan bulat tersebut.

Lambang seperti `%d` disebut ***format specifier***.

*Fun fact:* huruf "f" dalam istilah `printf` artinya *"formatted"*.

Tentu saja, kita dapat menuliskan apapun sebelum dan sesudah *format specifier* `%d` tersebut:

```{.c filename="helloint2.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("Anda memasukkan %d yaitu bilangan bulat", 98);
    return 0;
}
```

Bilangan bulat tersebut akan disisipkan di dalam *string*, sesuai dengan posisi `%d`.

Bilangan bulat juga bisa negatif:

```{.c filename="helloint3.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("Anda memasukkan %d yaitu bilangan bulat", -5);
    return 0;
}
```

Selain "d" yang berarti bilangan bulat, huruf "f" artinya *float*, atau *floating-point number*. Singkat cerita, tipe data *float* adalah bilangan yang bisa berupa desimal, sehingga tidak terbatas bilangan bulat saja. (Kalau penasaran detilnya dan mengapa namanya demikian, kalian bisa *review* kembali materi pertemuan pertama kuliah Metode Numerik, tentang *floating-point arithmetic*.) Kita dapat membuat program seperti berikut:

```{.c filename="hellofloat.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("%f", 3.14);
    return 0;
}
```

dan kita akan menerima *output* berupa *float* yang kita tuliskan, yaitu 3.14. Tentu saja, tipe data *float* juga bisa negatif:

```{.c filename="hellofloat2.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("%f", -0.618);
    return 0;
}
```

Kita bisa menyisipkan lebih dari satu bilangan:

```{.c filename="hellonum.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("%d %f %f", 98, -0.618, 3.14);
    return 0;
}
```

Perhatikan bahwa tiap bilangan di dalam *string* di atas dipisah dengan spasi. Sehingga, pada *output*, tiap bilangan akan dipisah dengan spasi.

Perhatikan apa yang terjadi kalau kita memisahkan proses print menjadi satu bilangan saja per `printf`:

```{.c filename="hellonum2.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("%d", 98);
    printf("%f", -0.618);
    printf("%f", 3.14);

    return 0;
}
```

(Catatan: `return 0;` tidak harus selalu menempel dengan baris-baris sebelumnya. Bahkan, tidak ada baris yang harus saling menempel.)

Ternyata, semua *output* tetap di baris yang sama. Bahkan, tidak ada spasi yang memisahkan (karena tidak kita tulis). Ada kode khusus untuk membuat baris baru (*new line*), yaitu `\n`. Perhatikan:

```{.c filename="hellonum3.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("%d\n", 98);
    printf("%f\n", -0.618);
    printf("%f", 3.14);

    return 0;
}
```

Tiap kali ada `\n`, dikeluarkan "*output*" berupa baris baru. Sehingga, *output* selanjutnya akan mulai dari baris baru tersebut. Kalau mau, kita bisa memisahkan pembuatan baris baru, seperti berikut:

```{.c filename="hellonum4.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
  printf("%d", 98);
  printf("\n");
  printf("%f", -0.618);
  printf("\n");
  printf("%f", 3.14);

  return 0;
}
```

## *Escape sequence* untuk *string*

`\n` adalah contoh *escape sequence*, yaitu kode khusus untuk mem-*print* hal-hal yang tidak bisa kita ketik begitu saja. Contoh lain, bagaimana caranya kita mem-*print* *output* `"Hello world"` **dengan tanda kutip**? Masalahnya, tanda kutip sudah digunakan untuk menandakan awal dan akhir *string*, sehingga tidak bisa kita ketik begitu saja. Solusinya, kita gunakan *escape sequence* lain yaitu `\"` seperti berikut.

```{.c filename="escapequote.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("Kita coba print \"Hello world!\" apakah berhasil?");
    return 0;
}
```

Perhatikan kalimat berikut.

> Sejauh ini, kita sudah mempelajari \\n dan \\" yaitu dua contoh escape sequence.

Bagaimana caranya kita mem-*print* keseluruhan kalimat tersebut di C, misalnya tanpa membuat baris baru? Masalanhya ada pada tanda *backslash* `\` yang memang sudah menjadi ciri khas untuk *escape sequence*. Kita ingin menampilkan *escape sequence* tersebut tanpa mengaktifkannya. Solusinya, bahkan tanda *backslash* itu sendiri bisa "dinonaktifkan" dengan menuliskan `\\` seperti berikut:

```{.c filename="escapebackslash.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    printf("Sejauh ini, kita sudah mempelajari \\n dan \\\" yaitu dua contoh escape sequence.");
    return 0;
}
```

Perhatikan bahwa, untuk `\n`, hanya diperlukan satu *backslash* agar bisa ditampilkan. Sedangkan, diperlukan dua *backslash* untuk menampilkan `\"`. Seandainya hanya digunakan satu *backslash*, yaitu mengetik `\\"`, maka *output* nya akan menjadi seperti berikut,

> Sejauh ini, kita sudah mempelajari \\n dan \\

karena, melihat `\\"`, tanda kutip tersebut **dianggap sebagai penutup *string***. Anggapan tersebut bisa kita nonaktifkan menggunakan *backslash* juga (yang ditambahkan tepat sebelum tanda kutip tersebut), sehingga kita ketik `\\\"`.

Ada banyak *escape sequence* lainnya yang tidak dibahas di sini (bisa dicari di Google).

## *Comment*

Dalam pemrograman, *comment* adalah semacam catatan yang tidak diperhatikan oleh komputer sama sekali; gunanya hanya untuk memudahkan manusia memahami kode. Pada bahasa pemrograman C, ada dua jenis *comment*, yaitu:

* *single-line* (satu baris), yang diawali dengan `//` dan bisa dituliskan di mana saja. Penggunaan `//` pada C sama persis dengan penggunaan `#` pada Python.
* *multi-line* (banyak baris), yang diawali dengan `/*` dan diakhiri dengan `*/`, dan juga bisa ditempatkan di mana saja. Penggunaan ini bahkan lebih fleksibel daripada `"""` di Python.

Perhatikan program berikut.

```{.c filename="hellocomment.c" code-line-numbers="true"}
#include <stdio.h>

// comment tidak harus di dalam main()

int main() {
    // ini comment
    printf("Hello world!\n");
    /* ini
    juga
    comment */

    /*
    bisa
    seperti
    ini
    */

    printf("%d adalah bilangan bulat.\n", 22);
    printf(/* penyusup */ "%f\n", /* tes */ -273.15);
}
```

Sesuai kegunaannya, semua *comment* diabaikan oleh C; kode tetap diijalankan seolah-olah tidak ada *comment* sama sekali.

# Perhitungan, variabel, dan tipe data bilangan

## Variabel dan tipe data bilangan

blabla

## Operasi dasar

blabla

## Konstanta

blabla

## Ukuran data dengan `sizeof` dan `size_t`

nitip
https://stackoverflow.com/questions/19732319/difference-between-size-t-and-unsigned-int

blabla

## *Format specifier* lainnya

Sebelumnya, kita sudah menggunakan beberapa ***format specifier*** seperti `%d`, `%f`, dan `%lf`. *Format specifier* lainnya bisa dilihat di link berikut:

https://www.tutorialspoint.com/format-specifiers-in-c

# Pernyataan kondisional (bersyarat)

blabla

## `if`, `else`

blabla

## Tipe data *boolean*

|Data                       |Diartikan sebagai|
|:--------------------------|----------------:|
|0 (nol), NULL, `\0`        |False (salah)    |
|apapun data lainnya        |True (benar)     |

: Pengartian data sebagai nilai kebenaran di bahasa pemrograman C

Ada juga istilah ***falsy value*** dan ***truthy value*** untuk mengkategorikan jenis data yang diartikan sebagai False dan yang diartikan sebagai True. Dalam hal ini, nol, NULL, dan `\0` adalah *falsy values*, dan semua data lainnya adalah *truthy values*.

(Kita akan berjumpa dengan NULL dan `\0` di sesi praktikum yang akan datang.)

Perlu diingat, klasifikasi antara data yang termasuk *falsy values* dan yang termasuk *truthy values* bisa berbeda-beda antara beberapa bahasa pemrograman. Oleh karena itu, ada semacam "standar" untuk data `boolean` di bahasa pemrgoraman C, di mana didefinisikan variabel `false=0` dan `true=1`. Untuk menggunakan kedua variabel ini, kita perlu `#include <stdbool.h>`, yang juga akan memperkenalkan tipe data baru, yaitu `bool`, sebagai tipe data *boolean*. (Sudah menjadi standar untuk melakukan `include` tersebut daripada mendefinisikan kedua variabel secara manual.)

(kode include stdbool)

## `switch case` dan `enum`

blabla

(contoh switch case)

Sayangnya, bagian `case` hanya bisa menggunakan bilangan bulat dan huruf. Untungnya, bahasa pemrograman C memiliki fitur `enum` (dibaca "inam") atau *enumeration* yang bisa digunakan untuk membuat tipe data baru yang sebenarnya merupakan bilangan bulat tetapi bisa dituliskan sebagai semacam variabel. Dengan demikian, kita seolah-olah bisa menggunakan `switch case` dengan variabel yang tidak terlihat seperti bilangan bulat, atau setidaknya kita bisa mendefinisikan beberapa bilangan bulat sekaligus yang merupakan bilangan bulat untuk digunakan dengan `switch case`.

Contohnya, kita bisa membuat `enum` untuk tipe data baru bernama "Hari" seperti berikut.

```{.c}
enum Hari = {
    Senin, Selasa, Rabu, Kamis, Jumat, Sabtu, Minggu
}
```

Kemudian, `enum` bisa digunakan dengan `switch case`, karena `Senin`, `Selasa`, `Rabu`, `Kamis`, `Jumat`, `Sabtu`, dan `Minggu` sudah menjadi semacam variabel konstanta yang mengandung bilangan bulat yang berbeda-beda (dan berurut).

```{.c filename="enumhari.c" code-line-numbers="true"}
#include <stdio.h>

enum Hari = {
    Senin, Selasa, Rabu, Kamis, Jumat, Sabtu, Minggu
}

int main() {
    enum Hari sekarang = Rabu;

    switch (sekarang) {
        case Senin:
        case Rabu:
        case Kamis:
            puts("Toko buka");
            printf("Urutan: %d\n", sekarang);
            break;
        case Selasa:
        case Jumat:
        case Sabtu:
        case Minggu:
            puts("Toko tutup");
            printf("Urutan: %d\n", sekarang);
            break;
        default:
            puts("Hari tidak jelas");
            printf("Urutan: %d\n", sekarang);
    }

    return 0;
}
```

Tentu saja, kegunaan `enum` tidak sebatas `switch case`. Meskipun cukup jarang dijumpai, `enum` bisa digunakan dalam kondisi apapun yang mengharuskan penggunaan bilangan bulat. Selain itu, dengan sifat `enum` yang selalu memasang nilai bilangan bulat secara terurut, `enum` bisa digunakan ketika ada variabel (atau ingin membuat tipe data baru) yang diharapkan hanya memiliki beberapa kemungkinan nilai (misalnya `enum Hari` di atas hanya memiliki 7 kemungkinan nilai), apalagi ketika urutan itu penting (walaupun tidak masalah juga menggunakan `enum` ketika urutan tidak penting).

Bahkan, kalau mau, kita bisa memasang nilai bilangan bulat tertentu untuk beberapa "konstanta" di dalam suatu `enum`, dan "konstanta" berikutnya akan selalu lebih besar daripada yang sebelumnya.

```{.c}
enum KategoriUsia {
    batita, balita=4, anak, remaja=13, dewasa=19, quarterlifecrisis, lansia=60
};
```

Kita bisa melihat semua nilai yang dipasang:

```{.c filename="enumusia.c" code-line-numbers="true"}
#include <stdio.h>

enum KategoriUsia {
    batita, balita=4, anak, remaja=13, dewasa=19, quarterlifecrisis, lansia=60
};

int main() {
    printf(
        "%d %d %d %d %d %d %d",
        batita, balita, anak, remaja, dewasa, quarterlifecrisis, lansia
    );
    // output: 0 4 5 13 19 20 60

    return 0;
}
```

Kita juga bisa memaksakan agar beberapa "konstanta" memiliki nilai yang sama atau bahkan lebih rendah:

```{.c}
enum Warna {
    merah=100, putih=100, ungu=0, hijau, kuning, kelabu=1, biru
};
```

Karena `enum` merupakan bilangan bulat, kita bahkan bisa membandingkan apakah suatu bilangan bulat (ataupun suatu `enum`) itu sama dengan, lebih besar dari, atau lebih kecil dari suatu "konstanta" dalam `enum`.

```{.c filename="enumwarna.c" code-line-numbers="true"}
#include <stdio.h>

enum Warna {
    merah=100, putih=100, ungu=0, hijau, kuning, kelabu=1, biru
};

int main() {
    printf(
        "%d %d %d %d %d %d %d",
        merah, putih, ungu, hijau, kuning, kelabu, biru
    );
    // output: 100 100 0 1 2 1 
    
    if (merah==putih) {
        puts("Merah dan putih setara");
    } else {
        puts("Merah dan putih tidak setara");
    }

    enum Warna warna_saya = biru;
    if (warna_saya < hijau) {
        puts("warna_saya < hijau");
    } else {
        puts("warna_saya >= hijau");
    }

    return 0;
}
```

# *Looping* (pernyataan berulang)

blabla

## `while` loop

blabla

## `for` loop

blabla

## `do while` loop

blabla