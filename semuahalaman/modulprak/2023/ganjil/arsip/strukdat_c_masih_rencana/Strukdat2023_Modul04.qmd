---
title: "Modul 4: *Pointer*, memori, CodeChef, input dan manipulasi *string*"
---

Kembali ke [Struktur Data](strukdat2023.qmd)

# Outline

* Pengenalan pointer dan alamat
    + *Pass by value* vs. *pass by reference*
    + Fungsi `swap_int` untuk menukar dua integer
* *Array* dan *pointer arithmetic*
    + *Array* adalah pointer ke elemen pertama
    + *Pointer arithmetic*: penjumlahan/pengurangan pointer
    + *Typecasting* untuk pointer: mengubah tipe data yang ditunjuk
    + `char` pointer sebagai "pointer satuan" (satu *byte*)
* Memori dan alokasi memori dinamis dengan `<stdlib.h>` dan `<string.h>`
    + Penggunaan memori sementara: `malloc` dan `free`
    + Variasi `malloc`: `calloc`, `realloc`
    + Pengenalan *segmentation fault*
    + `memset` untuk "menyeragamkan" sejumlah *byte* (misalnya huruf)
    + `memcpy` untuk menduplikasi
* Fungsi `swap` untuk menukar sembarang tipe data, dengan `void` pointer
* `struct` dan pointer
    + Pointer ke `struct`
    + Notasi `->`
    + Pointer di dalam `struct`
* *Function* dan pointer
    + *Automatic memory allocation* vs. *dynamic memory allocation*
    + *Function* yang mengembalikan pointer
    + *Function pointer*: pointer ke fungsi
* Input dan manipulasi *string*
    + Menerima input: *buffer*, `fgets`, dan `sscanf`
    + Menyimpan *formatted string*: `snprintf`
    + `snprintf` untuk *copy* dan penggabungan *string*
* Latihan input/output dengan CodeChef
    + Pengenalan CodeChef
    + Problem 1: "Number Mirror" (START01)
    + Problem 2: "Add Two Numbers" (FLOW001)
* *Header file* untuk Modul 4 Praktikum: `prakmodul4.h` dan `prakmodul4.c`

# Pengenalan pointer dan alamat

`%p`, `%x`, `%d`

## *Pass by value* vs. *pass by reference*

Dengan adanya pointer, bahkan kita bisa memasukkan alamat ke dalam fungsi, sehingga fungsi tersebut akan memanipulasi data yang ada pada alamat tersebut. Contohnya, perhatikan kedua fungsi "addfive" berikut yang menambahkan lima ke sembarangan bilangan bulat.

```{.c code-line-numbers="true"}
int addfive_notinplace(int number) {
    int result = number + 5;
    return result;
}

void addfive_inplace(int * numberptr) {
    int result = *numberptr + 5;
    *numberptr = result;
}
```

Perhatikan bahwa ada dua variasi, yaitu "in-place" dan "not-in-place" (juga disebut out-of-place). Berikut beberapa perbedaannya:

* Input yang diterima oleh versi "not-in-place" akan berupa nilai bilangan bulat seperti biasanya, tetapi input yang diterima oleh versi "in-place" akan berupa alamat (jangan lupa, pointer menyimpan alamat).
* Versi "in-place" memanfaatkan pointer sehingga bisa langsung mengakses data yang sesungguhnya, sedangkan versi "not-in-place" tidak memanfaatkan pointer sama sekali.
* Versi "in-place" langsung memanipulasi (mengubah) data yang ada pada alamat di pointer yang diberikan. Sedangkan, versi "not-in-place" mengembalikan hasil perhitungan, tanpa memodifikasi data aslinya.
* Versi "not-in-place" mengembalikan hasil berupa `int`. Sedangkan, versi "in-place" tidak mengembalikan apa-apa, sehingga ditulis *return type* berupa `void` (ketiadaan, tidak ada tipe datanya, karena memang tidak ada data yang dikembalikan).

Kedua fungsi tersebut bisa digunakan seperti pada kode berikut.

```{.c filename="addfive.c" code-line-numbers="true"}
#include <stdio.h>

int addfive_notinplace(int number) {
    int result = number + 5;
    return result;
}

void addfive_inplace(int * numberptr) {
    int result = *numberptr + 5;
    *numberptr = result;
}

int main () {
    int a = 27;
    int b = 27;

    // Perhatikan perbedaan penggunaannya:

    a = addfive_notinplace(a);
    // - nilainya langsung dimasukkan ke dalam fungsi
    // - fungsinya mengembalikan hasil untuk memperbarui nilai a

    addfive_inplace(&b);
    // - yang diberikan adalah alamatnya, sehingga digunakan tanda &
    // - nilai b akan langsung diubah di tempat, tanpa mengembalikan nilai

    // Hasil berikut ini pasti akan sama
    printf("Hasil a adalah: %d\n", a);
    printf("Hasil b adalah: %d\n", b);

    return 0;
}
```

Ketika kita memberikan alamat ke dalam fungsi, istilahnya adalah ***pass by reference***, yaitu memasukkan variabel melalui *reference* atau alamatnya. Sedangkan, ketika kita langsung memasukkan nilai ke dalam fungsi (seperti yang sudah kita kenal sebelumnya), istilahnya adalah ***pass by value***.

Seandainya kita mencoba membuat versi "in-place" tanpa memanfaatkan pointer (sehingga tidak menggunakan alamat), pasti akan gagal. Perhatikan kode berikut.

```{.c filename="addfivefail.c" code-line-numbers="true"}
#include <stdio.h>

void addfive_fail(int number) {
    int result = number + 5;
    number = result;
}

int main() {
    int c = 27;

    // Coba aja...
    addfive_fail(c);

    printf("Hasil c adalah: %d\n", c);
    // Ternyata tidak berubah

    return 0;
}
```

## Fungsi `swap_int` untuk menukar dua integer

Seperti pada contoh di atas, salah satu keunggulan pointer adalah bisa memberi akses langsung ke data aslinya dari dalam fungsi. Tentu saja, suatu fungsi bisa menerima input berupa lebih dari satu pointer (lebih tepatnya, lebih dari satu alamat). Bahkan, kita bisa membuat fungsi `swap_int` yang menerima dua alamat dari dua variabel yang sama-sama berupa `int`, lalu menukar nilai aslinya dari dalam fungsi. Dengan demikian, daripada harus seringkali manual membuat variabel temp untuk menukar dua nilai, kita bisa membuat kodenya sekali saja di dalam fungsi `swap_int`, sehingga untuk ke depannya tinggal menggunakan fungsi `swap_int`.

```{.c code-line-numbers="true"}
void swap_int(int * ptr1, int * ptr2) {
    int temp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;
}
```

Fungsi `swap_int` demikian menjadi suatu fungsi *in-place.* Berikut contoh penggunaannya:

```{.c filename="swapint.c" code-line-numbers="true"}
#include <stdio.h>

void swap_int(int * ptr1, int * ptr2) {
    int temp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;
}

int main() {
    int x = 15;
    int y = 9;

    swap_int(&x, &y);
    // Fungsi yang bersifat in-place memang umumnya digunakan seperti itu

    printf("Nilai x baru: %d\n", x);
    printf("Nilai y baru: %d\n", y);

    return 0;
}
```

# *Array* dan *pointer aithmetic*

## *Array* adalah pointer ke elemen pertama

(write some code to assign an array to another array apparently, even though then you are actually assigning a pointer to another pointer. For example assign a string to another string, or to a char pointer. Then try to access from the second pointer, and even modify from the second pointer, then check the new value from the first pointer)

## *Pointer arithmetic*: penjumlahan/pengurangan pointer

blabla

## *Typecasting* untuk pointer: mengubah tipe data yang ditunjuk

blabla

## `char` pointer sebagai "pointer satuan" (satu *byte*)

blabla

# Memori dan alokasi memori dinamis

## Penggunaan memori sementara: `malloc` dan `free`

blabla

## Variasi `malloc`: `calloc`, `realloc`

blabla

## Pengenalan *segmentation fault*

*Segmentation fault* (sering juga disebut *segfault* atau SIGSEGV) adalah *error* yang menandakan adanya masalah pada alokasi memori dinamis, seperti:

* malloc?
* freeing the nonexistent or the already freed

blabla

## `memset` untuk "menyeragamkan" sejumlah *byte*

blabla

## `memcpy` untuk menduplikasi

(termasuk duplikasi struct! :D)

# Fungsi `swap` untuk menukar sembarang tipe data, dengan `void` pointer

(fungsi generik? mungkin sekilas aja nyebut kata "generik" nya sih)

blablabla :D

# `struct` dan pointer

## Pointer ke `struct`

blabla

## Notasi `->`

blabla

## Pointer di dalam `struct`

blabla

# *Function* dan pointer

## *Automatic memory allocation* vs. *dynamic memory allocation*

blabla

## *Function* yang mengembalikan pointer

blabla

## *Function pointer*: pointer ke fungsi

blabla

# Input dan manipulasi *string*

## Menerima input: *buffer*, `fgets`, dan `sscanf`

blabla

## Menyimpan *formatted string*: `snprintf`

blabla (the main use of snprintf is indeed to store a formatted string instead of printing it with printf, so it's like printf but to a string instead of to the console/stdin)

## `snprintf` untuk *copy* dan penggabungan *string*

Selain untuk menyimpan *formatted string*, `snprintf` ternyata juga bisa digunakan untuk meng-*copy* sebuah *string* maupun menggabungkan dua *string*.

(blablabla, sebenarnya juga bisa dilakukan dengan memcpy? iya kah? blablabla)

# Latihan input/output dengan CodeChef

blabla (satu paragraf?)

## Pengenalan CodeChef

CodeChef adalah blablabla

Nanti kalian akan menggunakan CodeChef untuk proyek, mencari soal, blablabla

## Problem 1: "Number Mirror" (START01)

link soal:
https://www.codechef.com/problems/START01

Contoh penyelesaian:

```{.c filename="start01.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    const size_t BUFFER_SIZE = 1000;
    char buffer[BUFFER_SIZE];
    
    int number;
    
    fgets(buffer, BUFFER_SIZE, stdin);
    sscanf(buffer, "%d", &number);
    
    printf("%d", number);
    
    return 0;
}
```

## Problem 2: "Add Two Numbers" (FLOW001)

link:
https://www.codechef.com/problems/FLOW001

Contoh penyelesaian:

```{.c filename="flow001.c" code-line-numbers="true"}
#include <stdio.h>

int main() {
    const size_t BUFFER_SIZE = 1000;
    char buffer[BUFFER_SIZE];
    
    int T;
    fgets(buffer, BUFFER_SIZE, stdin);
    sscanf(buffer, "%d", &T);
    
    int a, b, result;
    for (int i = 0; i < T; i++) {
        fgets(buffer, BUFFER_SIZE, stdin);
        sscanf(buffer, "%d %d", &a, &b);
        result = a + b;
        printf("%d\n", result);
    }
    
    return 0;
}
```

# *Header file* untuk Modul 4 Praktikum: `prakmodul4.h` dan `prakmodul4.c`

::: {.panel-tabset}

## `prakmodul4.h`

```{.c code-line-numbers="true"}
// empty
```

## `prakmodul4.c`

```{.c code-line-numbers="true"}
// empty
```

:::