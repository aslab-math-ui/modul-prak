---
title: "Pertemuan 3 : Simple Data Visualization (matplotlib)"
image: static\images\eda_py_img0.png
description: "Data visualization in python using matplotlib (pyplot)"
date: 04/23/2024
page-navigation: true
jupyter: python3
format: html
---

Kembali ke [EDA](./eda2024genap.qmd)

# Matplotlib (Pyplot)

<div style='text-align: justify;'>
Matplotlib adalah library yang digunakan untuk visualisasi data. Hasil visualisasi data matplotllib menyerupai hasil visualisasi pada bahasa pemrograman matlab. Library ini bukanlah cara yang paling mudah untuk menghasilkan visualisasi data, tetapi visualisasi yang dihasilkan fleksibel dan dapat digunakan untuk banyak sekali kasus.
</div>

___

<div style='text-align: justify;'>
[Download dataset](https://drive.google.com/drive/folders/1Rz53jj0SLIB0lF6MEwY34lx8oBkEyy8-?usp=sharing)
</div>

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Import Dataset
df = pd.read_csv('https://raw.githubusercontent.com/farhanage/dataset-for-study/main/insurance.csv')

# Cek 5 observasi pertama
df.head()
```

```{python}
# melihat informasi mengenai tiap variabel
df.info()
```

```{python}
# statistik deskritif semua variabel numerik
df.describe()
```

## Box Plot

```{python}
# Box Plot variabel `age`
plt.boxplot(x='age', data=df)

# Menambahkan Judul Plot
plt.title("Box Plot")
 
# Menambahkan label sumbu X dan Y
plt.xlabel('Age')
plt.ylabel('Value')

# Menunjukkan plot
plt.show()
```

```{python}
# Box Plot variabel `bmi`
plt.boxplot(x='bmi', data=df)

# Menambahkan Judul Plot
plt.title("Box Plot")
 
# Menambahkan label sumbu X dan Y
plt.xlabel('bmi')
plt.ylabel('Value')

# Menunjukkan plot
plt.show()
```

:::{.callout-note}

<div style='text-align: justify;'>
Seperti halnya penggunaan syntax `?` pada bahasa pemrograman R, kita dapat mengakses dokumentasi suatu fungsi dalam suatu modul pada python dengan menggunakan function `help()`
</div>

```{python}
# Melihat dokumentasi mengenai function plt.boxplot()
help(plt.boxplot)
```

:::

## Histogram

```{python}
# Histogram variabel `bmi`
plt.hist(x='bmi', data=df)

# Menambahkan Judul Plot
plt.title("Histogram")
 
# Menambahkan label sumbu X dan Y
plt.xlabel('bmi')
plt.ylabel('Count')

# Menunjukkan plot
plt.show()
```

## Bar Chart

```{python}
# Hitung banyaknya responden dari masing-masing gender
df['sex'].value_counts()
```

```{python}
# Bar chart jumlah tiap jenis kelamin
df['sex'].value_counts().plot(kind='bar')

# Menambahkan Judul Plot
plt.title("Bar Chart")
 
# Menambahkan label sumbu X dan Y
plt.xlabel('sex')
plt.ylabel('count')

# Menunjukkan plot
plt.show()
```

## Horizontal Bar Chart

```{python}
# Horizontal Bar chart jumlah tiap jenis kelamin
df['sex'].value_counts().plot(kind='barh')

# Menambahkan Judul Plot
plt.title("Bar Chart")
 
# Menambahkan label sumbu X dan Y
plt.xlabel('count')
plt.ylabel('sex')

# Menunjukkan plot
plt.show()
```

## Pie Chart

```{python}
# Pie chart persentase sebaran region seluruh responden
df['region'].value_counts().plot(kind='pie', autopct='%1.1f%%')

# Menambahkan Judul Plot
plt.title("Pie Chart")

# Menunjukkan plot
plt.show()
```

## Scatter Plot

```{python}
# Scatter plot variabel `age` dan `charges`
df.plot(kind='scatter', x='age', y='charges')

# Menambahkan Judul Plot
plt.title("Scatter Plot `Age` vs `Charges`")
 
# Menambahkan label sumbu X dan Y
plt.xlabel('Age')
plt.ylabel('Charges')

# Menunjukkan plot
plt.show()
```
___

<div style='text-align: justify;'>
Untuk plot lainnya, silakan telusuri dokumentasi dari library matplotlib yang dapat diakses pada link berikut : [Dokumentasi matplotlib.pyplot](https://matplotlib.org/stable/api/pyplot_summary.html)
</div>

# Subplots

## Figure and Axes
<div style='text-align: justify;'>

Pembuatan suatu plot menggunakan library matplotlib akan menghasilkan suatu ***figure*** yang memiliki beberapa komponen di dalamnya.

![](static\images\anatomy of figures.png)

Berikut cara membuat suatu figure menggunakan matplotlib
</div>

```{python}
fig = plt.figure()  # an empty figure with no Axes

plt.show()
```

<div style='text-align: justify;'>
Figure kosong tidak dapat divisualisasikan. Untuk membuat suatu figure yang memiliki axes, gunakan function `plt.subplots()`
</div>

```{python}
fig, ax = plt.subplots()  # a figure with a single Axes

plt.show()
```

<div style='text-align: justify;'>
Bagaimana jika kita ingin membuat gabungan dari beberapa Axes dalam 1 figure?

function subplots menerima parameter jumlah baris dan jumlah kolom untuk membentuk suatu *grid* yang terdiri atas 1 atau lebih axes
</div>

```{python}
fig, axs = plt.subplots(2, 2)  # a figure with a 2x2 grid of Axes

plt.show()
```

```{python}
#| echo: false
fig, axs = plt.subplots(ncols=2, nrows=2)
# for each Axes, add an artist, in this case a nice label in the middle...
for row in range(2):
    for col in range(2):
        axs[row, col].annotate(f'axs[{row}, {col}]', (0.5, 0.5),
                            transform=axs[row, col].transAxes,
                            ha='center', va='center', fontsize=18,
                            color='darkgrey')
fig.suptitle('plt.subplots()')

plt.show()
```

<div style='text-align: justify;'>
Selain dengan function subplots, ada juga function `subplot_mosaic` yang akan menghasilkan axes dengan ukuran yang lebih bervariasi.
</div>

```{python}
# a figure with one axes on the left, and two on the right:
fig, axs = plt.subplot_mosaic([['left', 'right_top'],
                               ['left', 'right_bottom']])

plt.show()
```

```{python}
#| echo: false
fig, axs = plt.subplot_mosaic([['left', 'right_top'],
                               ['left', 'right_bottom']])

# for each Axes, add an artist, in this case a nice label in the middle...
axs['left'].annotate(f"axs['left']", (0.5, 0.5),
                    transform=axs['left'].transAxes,
                    ha='center', va='center', fontsize=12,
                    color='darkgrey')

axs['right_top'].annotate(f"axs['right_top']", (0.5, 0.5),
                    transform=axs['right_top'].transAxes,
                    ha='center', va='center', fontsize=12,
                    color='darkgrey')

axs['right_bottom'].annotate(f"axs['right_bottom']", (0.5, 0.5),
                    transform=axs['right_bottom'].transAxes,
                    ha='center', va='center', fontsize=12,
                    color='darkgrey')

fig.suptitle('plt.subplots()')

plt.show()
```

## Plots

<div style='text-align: justify;'>
Untuk menambahkan plot pada tiap axis, gunakan function-function plot pada axis dengan index yang bersesuaian.
</div>

```{python}
fig, axs = plt.subplots(2, 2, layout="constrained")

axs[0,0].hist(df['age'])

axs[0,0].set_title('Variabel `Age`')

axs[0,1].hist(df['bmi'])

axs[0,1].set_title('Variabel `bmi`')

axs[1,0].hist(df['children'])

axs[1,0].set_title('Variabel `children`')

axs[1,1].hist(df['charges'])

axs[1,1].set_title('Variabel `charges`')

fig.suptitle('Histogram Variabel Numerik')

plt.show()
```

<div style='text-align: justify;'>
Lebih lanjut, silakan baca dokumentasi dari plt.subplot pada link berikut : [Dokumentasi plt.subplots](https://matplotlib.org/stable/users/explain/axes/axes_intro.html#creating-axes)
</div>