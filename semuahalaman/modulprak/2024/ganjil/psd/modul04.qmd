---
title: "(Pertemuan 04) R: Visualisasi Dua Variabel, Time Series, dan ggplot2"
subtitle: "R: Two-Variable Visualization, Time Series, and ggplot2"
description: "Offline di Departemen Matematika"
date: 10/07/2024
page-navigation: true
format: html
---

Kembali ke [Pengantar Sains Data](./psd2024.qmd)

Melanjutkan pertemuan sebelumnya, kali ini kita akan mempelajari lebih lanjut tentang visualisasi menggunakan R, yaitu visualisasi dua variabel (termasuk *line chart* untuk data *time series*), serta tentang *package* bernama `ggplot2` yang bisa mempermudah urusan visualisasi.

Kita coba gunakan *dataset* `iris` terlebih dahulu, ya. Aktifkan terlebih dahulu:

```{r}
data("iris")
```

Agar konsisten (bahwa kita sedang berurusan dengan *data frame*), mari kita beri nama `df1` saja:

```{r}
df1 <- iris
```

Kita bisa lihat-lihat:

```{r}
View(df1)
df1
```

Kolom-kolomnya adalah:

```{r}
ls(df1)
```

# Visualisasi Dua Variabel (dengan fungsi *built-in*)

Di pertemuan sebelumnya, kita sudah membuat visualisasi frekuensi dengan fungsi seperti `barplot`, `pie`, dan `hist`, yang "sudah ada dari sananya" atau disebut *built-in*. Untuk keperluan visualisasi dua variabel, juga tersedia beberapa fungsi *built-in*.

## Boxplot

```{r}
boxplot(df1$Sepal.Length) #1 variabel
```

```{r}
boxplot(df1$Sepal.Length, df1$Sepal.Width) #2 variabel atau lebih
```

```{r}
boxplot(df1$Sepal.Length, df1$Sepal.Width,
        main = "Boxplot Perbandingan Sepal Length dan Sepal Width",
        names = c("Sepal Length", "Sepal Width")) #tambahkan judul dan xlabel
```

```{r}
boxplot(df1$Sepal.Length, df1$Sepal.Width,
        main = "Boxplot Perbandingan Sepal Length dan Sepal Width",
        names = c("Sepal Length", "Sepal Width"),
        col = c("red", "blue")) #ganti warna
```

```{r}
boxplot(df1$Sepal.Length, df1$Sepal.Width,
        main = "Boxplot Perbandingan Sepal Length dan Sepal Width",
        names = c("Sepal Length", "Sepal Width"),
        col = c("red", "blue"),
        horizontal = TRUE) #rotate jadi horizontal
```

```{r}
boxplot(df1$Sepal.Length, df1$Sepal.Width,
        main = "Boxplot Perbandingan Sepal Length dan Sepal Width",
        names = c("Sepal Length", "Sepal Width"),
        col = c("red", "blue"),
        notch = TRUE) # jadi "mengerucut" di sekitar median
```

```{r}
boxplot(df1$Sepal.Length ~ df1$Species)
```

```{r}
boxplot(Sepal.Length ~ Species, data = df1)
```

```{r}
boxplot(df1$Sepal.Length ~ df1$Species, 
        main = "Perbandingan Sepal Length berdasarkan Species",
        xlab = "Species",
        ylab = "Sepal Length",
        col = c("blue","yellow","red"))
```

## Scatter

Untuk menggambar *scatter plot*, gunakan fungsi `plot`

Plot paling dasar: semua variabel numerik menjadi scatter

```{r}
plot(df1)
```

*Scatter plot* antar dua variabel pilihan:

```{r}
plot(df1$Sepal.Length, df1$Sepal.Width)
```

Tambahkan judul pakai `main`

```{r}
plot(df1$Sepal.Length, df1$Sepal.Width, 
     main = "Ini Judul grafiknya")
```

Tambahkan label sumbu

```{r}
plot(df1$Sepal.Length, df1$Sepal.Width, 
     main = "Ini Judul grafiknya",
     xlab = "Sumbu X",
     ylab = "Sumbu Y")
```

Beri warna

```{r}
plot(df1$Sepal.Length, df1$Sepal.Width,
     main = "Scatter Plot Sepal Length dengan Sepal Width",
     xlab = "Sepal Length",
     ylab = "Sepal Width",
     col = "blue")
```

# (Pengayaan) Visualisasi Tambahan (dengan fungsi *built-in*)

## *Stem and Leaf Plot*

Untuk melihat persebaran data (min, max, distribusi), mirip histogram

```{r}
?stem
View(ChickWeight) #data dari r
stem(ChickWeight$weight)
hist(ChickWeight$weight) #buat perbandingan
```

```{r}
min(ChickWeight$weight) #cek nilai minimumnya
max(ChickWeight$weight) #cek maxnya
```

Kalau ternyata min sama maxnya kurang tepat, ganti scalenya

```{r}
stem(ChickWeight$weight, scale = 5) 
stem(ChickWeight$weight, width = 100) 
```

## *Dot Diagram*

```{r}
?dotchart
View(mtcars)
```

Paling Sederhana

```{r}
dotchart(mtcars$mpg)
```

Tambah Judul dan Label

```{r}
dotchart(mtcars$mpg, labels = row.names(mtcars),
         cex = 0.9, xlab = "mpg",
         main = "Persebaran Jarak Yang Dapat Ditempuh Per Galon")
```

Berdasarkan Grup

```{r}
grps <- as.factor(mtcars$cyl)
my_cols <- c("blue", "darkgreen", "orange")
dotchart(mtcars$mpg, labels = row.names(mtcars),
         groups = grps, gcolor = my_cols,
         color = my_cols[grps],
         cex = 0.9,  pch = 22, xlab = "mpg",
         main = "Persebaran Jarak Yang Dapat Ditempuh Per Galon Berdasarkan Jumlah Silinder")
legend("bottomright", legend = c("4","6", "6"),
       fill = my_cols, cex = 0.8)
```

# *Time Series* dan *Line Chart*

Data periodik terhadap waktu (misalnya data tahunan atau data bulanan) disebut *time series data* (data runtun waktu), biasa disebut *time series* saja atau disingkat "TS". Visualisasi *line chart* biasa digunakan untuk data *time series*, dan begitu juga sebaliknya, data *time series* biasa divisualisasikan dengan *line chart*.

## Mencari data *time series*

Sayangnya, *dataset* `iris` tidak memiliki data *time series*. Bahkan, dari semua *dataset* yang *built-in*, data *time series* cenderung berupa *dataset* tersendiri, yang memang khusus menyimpan data variabel tertentu saja terhadap waktu.

Oleh karena itu, mari kita coba *dataset* lain. Kalian bisa melihat-lihat *dataset* yang sudah tersedia di R dengan perintah `data()`

```{r}
data()
```

Sebenarnya, tiap *dataset* berasal dari sebuah *package*. Perhatikan bahwa *dataset* `iris` berasal dari *package* bernama `datasets` (yang memang sudah *built-in*)

```{r}
?iris
```

Kita bisa spesifik melihat daftar *dataset* yang berasal dari *package* tertentu dengan tambahan opsi `package`

```{r}
data(package = "datasets")
```

Untuk data *time series*, kita bisa mencoba misalnya `nhtemp`, rata-rata tahunan untuk suhu di kota New Haven di Amerika Serikat

```{r}
data("nhtemp")
```

Mari kita lihat:

```{r}
View(nhtemp)
nhtemp
```

Terlihat bahwa data ini berupa *time series* yang tidak langsung berbentuk tabel. Di R, data berjenis *time series* memang diberi perhatian khusus, sehingga menjadi yang namanya *"time series object"*. Data runtun waktu dipelajari lebih lanjut di mata kuliah Metode Peramalan *(Forecasting Methods / Time Series Analysis)*.

## *Line chart* instan dari objek *time series*

Di pertemuan kali ini, kita hanya akan membuat visualisasinya dengan *line chart*.

Perhatian khusus tersebut ternyata sangat mempermudah cara memvisualisasikannya:

```{r}
plot(nhtemp)
```

Langsung jadi!

Namun, apabila sewaktu-waktu kalian berurusan dengan tabel data yang sebenarnya berupa *time series*, mungkin R tidak akan langsung mengakuinya sebagai *time series*. Tidak masalah, karena kita masih bisa membuat *line chart* dari *data frame*.

## Mengubah *time series object* menjadi *data frame*

Sebelum bisa membuat *line chart* dari *data frame*, datanya harus ada. Kalian bisa sewaktu-waktu *import* data kalian sendiri, kalau ada. Di sini, kita hanya akan mengubah *time series object* `nhtemp` menjadi *data frame*.

```{r}
df_nhtemp <- data.frame(Time=time(nhtemp),
                        Temp=as.matrix(nhtemp))
```

Mari kita lihat:

```{r}
View(df_nhtemp)
df_nhtemp
```

## *Line chart* dari *data frame*

Sekarang tinggal kita gambar, dengan cara menggambar *scatter plot* yang kemudian diberi opsi `type = "l"` agar menjadi *line chart*:

```{r}
plot(df_nhtemp$Time, df_nhtemp$Temp, type="l")
```

```{r}
plot(df_nhtemp$Time, df_nhtemp$Temp, type="l",
     xlab="Time", ylab="Temp",
     main="Average Yearly Temperature in New Haven")
```

Hmm, kurang bagus ya. Untuk *line chart* yang lebih bagus (dan juga berbagai *plot* lainnya) serta lebih fleksibel, selanjutnya kita akan mencoba `ggplot2`, sebuah *package* untuk *plotting* di R yang sangat terkenal dan sering digunakan di kalangan pengguna R.

# ggplot2

Fungsi-fungsi *plot* yang tersedia di R secara *built-in* (terkadang disebut "base R"), yang sudah kita eksplorasi sejauh ini, cenderung terbatas dan tidak begitu fleksibel. Kalangan pengguna R cenderung menggunakan sebuah *package* terkenal di R untuk keperluan *plotting*, yaitu `ggplot2`.

Instal terlebih dahulu, kalau belum:

```
install.packages("ggplot2")
```

Lalu aktifkan:

```{r}
library(ggplot2)
```

## *Dataset* yang tersedia di `ggplot2`

Kebetulan, `ggplot2` menyediakan beberapa *dataset* (yang tidak tersedia di *base R*) yang bisa kita gunakan untuk mempelajari dan mengeksplorasi `ggplot2`.

```{r}
data(package = "ggplot2")
```

Kita lihat, data *time series* tersedia di `ggplot2`, bernama `economics`. Mari kita lihat-lihat:

```{r}
data("economics", package = "ggplot2")
```

```{r}
df2 <- economics
```

```{r}
View(df2)
df2
```

```{r}
ls(df2)
```

Data *time series* ini terdiri dari sejumlah kolom terhadap waktu.

## Dasar-dasar `ggplot2` dengan *line chart*

Menggunakan *line chart*, kita bisa memvisualisasikan bagaimana perubahan suatu variabel terhadap variabel waktu (`date`). Misalnya, kita bisa melihat bagaimana perubahan banyaknya pengangguran (`unemploy`) dari tahun ke tahun.

Apabila kita gunakan fungsi *built-in* untuk *line chart*, jadinya seperti berikut:

```{r}
plot(df2$date, df2$unemploy,
     type = "l",
     col = "red")
```

Mari kita coba buat dengan `ggplot2`.

Langkah pertama adalah menentukan *data frame* yang ingin kita gunakan, serta variabel yang akan di sumbu x dan variabel yang akan di sumbu y. *Syntax*-nya seperti berikut.

```{r}
ggplot(df2, aes(x = date, y = unemploy))
```

`aes` artinya *aesthetic* (estetika), sebenarnya dalam artian "sesuatu yang bisa dilihat". Kita memang ingin melihat data `date` untuk sumbu x dan `unemploy` untuk sumbu y, sehingga kita tuliskan seperti itu.

Namun, sejauh ini, isi *plot* masih kosong. Kita baru membuat *canvas* nya saja, belum garis-garisnya.

Agar ada garis, kita "tambahkan" dengan fungsi `geom_line()` seperti berikut.

```{r}
ggplot(df2, aes(x = date, y = unemploy)) + 
  geom_line()
```

Mungkin tampak aneh, seolah-olah fungsi dijumlahkan dengan fungsi. Cara kerjanya kurang lebih seperti berikut.

* Sebenarnya, fungsi `ggplot` menghasilkan "objek" atau "benda" yang berupa *plot* kosong.

* Serupa, fungsi `geom_line` menghasilkan "objek" berupa perintah untuk menggambarkan garis-garis.

* Begitu kita jumlahkan, objek hasil `geom_line` diterapkan ke objek hasil `ggplot`.

* Hasil jumlahnya berupa objek *plot* baru, yaitu *line chart* yang kita inginkan.

* Objek baru itulah yang kemudian ditampilkan.

Cara ini sangat berbeda dengan cara kerja fungsi-fungsi *plotting* di *base R* yang memang berupa perintah. 

Penjumlahan seperti itu di `ggplot2` bisa kita bayangkan sebagai "komposisi", yang pada akhirnya menghasilkan suatu objek *plot* akhir. Ibaratnya seperti penulisan penjumlahan bilangan di R,

```{r}
2 + 3
```

yang memang menggabungkan 2 dengan 3 untuk menghasilkan hasil akhir yaitu 5, yang kemudian ditampilkan.

Tentu, kita bisa menyimpan atau meng-*assign* hasil jumlah tersebut ke dalam variabel, yang kemudian bisa kita tampilkan, sebagai berikut:

```{r}
hasil_jumlah <- 2 + 3
```

```{r}
hasil_jumlah
```

Sebagaimana hasil penjumlahan bilangan itu bisa kita simpan ke dalam variabel, "hasil jumlahan *plot*" dalam penggunaan `ggplot2` sebenarnya juga bisa kita simpan ke dalam variabel.

```{r}
tren_pengangguran <- ggplot(df2, aes(x = date, y = unemploy)) + 
  geom_line()
```

Karena sudah tersimpan ke dalam variabel, kita bisa menampilkan *plot* akhir tersebut kapan saja, cukup dengan memanggil variabelnya:

```{r}
tren_pengangguran
```

Fleksibilitas seperti ini tidak ada ketika kita menggunakan fungsi-fungsi *plotting* dari *base R*.

Tentunya, kita juga bisa menambahkan label, dengan menambahkan `labs` seperti berikut

```{r}
ggplot(df2, aes(x = date, y = unemploy)) + 
  geom_line() + 
  labs(
    title = "Line Chart Tahun dengan Jumlah Pengangguran",
    x = "Tahun",
    y = "Jumlah Pengangguran"
  )
```

## *Scatter*

Penulisannya mirip, tetapi menggunakan `geom_point` daripada `geom_line`

Secara tampilan pun, bedanya *line chart* dan *scatter plot* hanyalah pilihan antara menggambar garis atau menggambar titik-titik.

```{r}
ggplot(df1, aes(x = Sepal.Length, y = Sepal.Width)) + 
  geom_point()
```

Kita juga bisa menambahkan warna-warna sesuai kolom lain, misal berdasarkan spesies.

```{r}
ggplot(df1, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + 
  geom_point()
```

Betapa fleksibelnya, ya! Fitur *scatter plot* `plot` di *base R* tidak se-fleksibel ini. Lebih nyaman juga, karena keterangan warna-warnanya juga langsung ada.

Jangan lupa tambahkan label dengan `labs` seperti berikut:

```{r}
ggplot(df1, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + 
  geom_point() + 
  labs(
    title = "Scatter Plot Sepal Length vs Sepal Width",
    x = "Sepal Length",
    y = "Sepal Width",
    color = "Species Names"
  )
```

Contoh lain: `Petal.Length` vs. `Petal.Width`

```{r}
ggplot(df1, aes(x = Petal.Length, y = Petal.Width, color = Species)) + 
  geom_point() + 
  labs(
    title = "Scatter Plot Petal Length vs Petal Width",
    x = "Petal Length",
    y = "Petal Width",
    color = "Species Names"
  )
```

## *Bar Chart*

Di pertemuan sebelumnya, kita sudah menggunakan *bar chart* untuk memvisualisasi frekuensi nilai-nilai di satu variabel, menggunakan *dataset* `iris`. Persebaran `Species` ternyata kurang menarik, kecuali apabila dilakukan *filter* data terlebih dahulu.

Agar lebih mudah, mari kita coba *dataset* lain yang sudah memiliki persebaran lebih menarik. Tidak harus dari `ggplot2`, bisa juga dari package* `datasets` yang *built-in*. Kita bisa cari-cari dulu:

```{r}
data()
```

```{r}
data(package = "datasets")
```

Misalnya kita pilih `mtcars` dari `datasets` (daripada dari `ggplot2`), yang berisi data mobil-mobil dari majalah *Motor Trend* tahun 1974.

```{r}
data("mtcars", package = "datasets")
```

```{r}
df3 <- mtcars
```

Kita bisa lihat isinya:

```{r}
View(df3)
df3
```

```{r}
ls(df3)
```

Perhatikan bahwa tiap baris adalah mobil tersendiri, dan datanya memang tidak terlalu banyak. Salah satu kolomnya adalah `cyl`, banyaknya "silinder" untuk tiap mobil, yaitu mesin di dalam mobil yang biasa memompa bensin.

```{r}
df3$cyl
```

Sepertinya persebarannya menarik. Tidak seperti fungsi `barplot` dari *base R*, di `ggplot2` kita tidak perlu membuat tabel frekuensi untuk membuat *bar chart*. Langsung saja tambahkan `geom_bar` seperti berikut. Karena hanya ada satu variabel, kita cukup pasang variabel sumbu x saja.

```{r}
ggplot(df3, aes(x = cyl)) + 
  geom_bar()
```

Untuk memberi warna, gunakan opsi `fill` di `aes`

```{r}
ggplot(df3, aes(x = cyl, fill = "red")) + 
  geom_bar()
```

Kita juga bisa menentukan ketebalan dengan opsi `width` di `geom_bar`

```{r}
ggplot(df3, aes(x = cyl, fill = "red")) + 
  geom_bar(width = 1)
```

Seandainya kalian justru memiliki data yang berupa semacam tabel frekuensi saja, misalnya data *voting* anonim, *bar chart* masih bisa dibuat dengan fungsi terpisah yaitu `geom_col` daripada `geom_bar`

Sebagai contoh, misalkan kita punya tabel frekuensi untuk variabel `cyl`, yang bisa kita peroleh sebagai berikut (seperti di pertemuan sebelumnya):

```{r}
cyl_freq <- data.frame(table(df3$cyl, dnn="cyl"))
```

```{r}
View(cyl_freq)
cyl_freq
```

Kita bisa menggambar *bar chart* untuk tabel frekuensi tersebut dengan tambahan fungsi `geom_col` seperti berikut.

```{r}
ggplot(cyl_freq, aes(x = cyl, y = Freq)) + 
  geom_col()
```

Kita juga bisa memberi warna (dengan `fill` di `aes` di `ggplot`) dan menentukan lebar batang (dengan `width` di `geom_col`), sebagaimana ketika menggunakan `geom_bar`

```{r}
ggplot(cyl_freq, aes(x = cyl, y = Freq, fill = "red")) + 
  geom_col(width = 0.5)
```

## *Pie Chart*

Selain *bar chart*, ada *pie chart* sebagai visualisasi yang berbeda untuk kegunaan yang sama. Sayangnya, di `ggplot2` tidak ada fungsi khusus untuk *pie chart*. Namun, kita bisa akali dengan membuat *bar chart* dengan `geom_bar` seperti berikut, yang kemudian diterapkan koordinat polar.

```{r}
ggplot(df3, aes(x = factor(1), fill = factor(cyl))) + 
  geom_bar(width = 1) + 
  coord_polar(theta = "y")
```

Di sini, fungsi `factor` diperlukan untuk memberitahu R bahwa data `cyl` berupa data kategorik. Kita juga pasang `x = factor(1)` karena di sini seolah-olah hanya ada satu batang di *bar chart* (yang kemudian diterapkan koordinat polar), dan kita biasa hanya memasang sumbu x ketika membuat *bar chart*.

Seperti biasa, kita bisa tambahkan `labs` untuk menentukan label, seperti menentukan judul, mengosongkan label sumbu x maupun sumbu y, dan menentukan label untuk opsi `fill` (yang saat ini terpasang menjadi `factor(cyl)`)

```{r}
ggplot(df3, aes(x = factor(1), fill = factor(cyl))) + 
  geom_bar(width = 1) + 
  coord_polar(theta = "y") +
  labs(
    title = "Banyaknya Silinder di Mobil (dari Motor Trend, 1974)",
    x = "",
    y = "",
    fill = "cyl (banyaknya silinder)"
  )
```

Apabila data kita berupa semacam tabel frekuensi saja, kita juga bisa melakukan hal serupa dengan `geom_col` agar tetap bisa membuat *pie chart*. Caranya seperti berikut, juga menggantikan `x = cyl` dengan `x = factor(1)`, sedangkan opsi `fill` tetap diberi `factor(cyl)`

```{r}
ggplot(cyl_freq, aes(x = factor(1), y = Freq, fill = factor(cyl))) + 
  geom_col() +
  coord_polar(theta = "y")
```

Label bisa kita tentukan dengan menambahkan `labs` seperti biasa

```{r}
ggplot(cyl_freq, aes(x = factor(1), y = Freq, fill = factor(cyl))) + 
  geom_col() +
  coord_polar(theta = "y") +
  labs(
    title = "Pie Chart Banyaknya Silinder dari Tabel Frekuensi",
    x = "",
    y = "",
    fill = "cyl (banyaknya silinder)"
  )
```

## *Histogram*

Di `ggplot2`, *histogram* juga seolah-olah seperti sejenis *bar chart*. Mari kita coba gambar *histogram* untuk `Sepal.Length` seperti di pertemuan sebelumnya. Kali ini, tambahkan `geom_histogram`

```{r}
ggplot(df1, aes(x = Sepal.Length)) + 
  geom_histogram()
```

Kita bisa menentukan lebar batang di *histogram* dengan opsi `binwidth`

```{r}
ggplot(df1, aes(x = Sepal.Length)) + 
  geom_histogram(binwidth = 0.5)
```

Kita juga bisa memberi opsi warna, yaitu `fill` untuk warna isi batangnya dan `color` untuk warna pinggiran batangnya.

```{r}
ggplot(df1, aes(x = Sepal.Length)) + 
  geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black")
```

## *Boxplot*

Untuk *boxplot*, tambahkan `geom_boxplot`

```{r}
ggplot(df1, aes(x = Species, y = Sepal.Length)) + 
  geom_boxplot()
```

Kita juga bisa menenukan warna isi yaitu `fill` dan warna pinggiran yaitu `color`

```{r}
ggplot(df1, aes(x = Species, y = Sepal.Length)) + 
  geom_boxplot(fill = "skyblue", color = "black")
```

# Lampiran untuk belajar lebih lanjut

ggplot2:

<https://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html>
