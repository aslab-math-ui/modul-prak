---
title: "(Pertemuan 03) R: Operasi Dasar, Statistik Deskriptif, Visualisasi Frekuensi"
subtitle: "R: Basic Operations, Descriptive Statistics, Frequency Visualizations"
description: "Offline di Departemen Matematika"
date: 09/30/2024
page-navigation: true
format: html
---

Kembali ke [Pengantar Sains Data](./psd2024.qmd)

Untuk pertemuan kali ini, kita akan mulai membahas lebih lanjut tentang penggunaan bahasa R, melalui RStudio.

*Dataset* "Iris" yang digunakan di modul ini bisa langsung diakses melalui R, atau bisa juga diunduh:

* [Iris.csv](./Iris.csv)

* [Iris.xlsx](./Iris.xlsx)

Kebetulan, materi modul kali ini adalah revisi dari [modul PSD tahun lalu](../../../2023/ganjil/psd/Pekan%201/modul1.qmd). Silakan intip kalau mau :)

# Operasi Dasar

Silakan buka RStudio dulu, ya! Gunakan perangkat (*laptop* atau komputer) yang sudah terinstal R dan RStudio. Kalau perlu, petunjuk instalasi ada di [modul pertemuan pertama](./modul01.qmd).

Sebelum mulai menggunakan R dengan RStudio, jangan lupa untuk membuat *file* baru `.R` dan disimpan. Pencet `File > New File > R Script` untuk membuat, lalu tekan `Ctrl + S` (Windows) atau `Cmd + S` (macOS) untuk menyimpan. Silakan pilih dan/atau buat *folder* untuk menyimpan *file* tersebut.

Jangan lupa menyimpan *file* secara berkala (juga dengan `Ctrl + S` atau `Cmd + S`) agar tidak hilang.

Suatu *file* `.R` bisa terdiri dari sejumlah baris kode berbahasa R.

* Tiap baris bisa dijalankan masing-masing, dengan cara menekan baris tersebut, kemudian memencet tombol `Ctrl` dan `Enter` sekaligus di *keyboard* (atau biasa ditulis `Ctrl + Enter`) untuk Windows, atau `Cmd + Enter` untuk macOS.

* Apabila ingin menjalankan beberapa baris sekaligus, *select* dulu (dengan *mouse*) baris-baris yang ingin dijalankan, baru tekan `Ctrl + Enter` (Windows) atau `Cmd + Enter` (macOS).

* Kalau mau (jarang digunakan), keseluruhan *file* `.R` bisa dijalankan dengan `Ctrl + Shift + Enter` (Windows) atau `Cmd + Shift + Enter` (macOS).

## *Review* aritmatika

Kita *review* pengenalan R dari [pertemuan pertama](./modul01.qmd) dulu, ya!

Kalian bisa mengetik kemudian mencoba menjalankan masing-masing baris kode berikut, untuk perhitungan dasar di R. Apabila menggunakan RStudio, hasilnya akan muncul di bagian bawah, yang disebut "Console". (Sebenarnya, daripada mengetik di *file*, kalian bisa saja langsung mengetik kode di Console, tetapi tidak bisa disimpan.)

```{r}
2+3
7-5
3*5
3/4
2:4
2**3 # pangkat
```

Pendefinisian variabel di R bisa menggunakan `<-` (lebih umum digunakan) atau menggunakan `=` seperti berikut:

```{r}
apel <- 4
jeruk = 7
```

Ruas kiri merupakan nama variabel dan ruas kanan merupakan nilai variabel.

Untuk memanggil (memeriksa isi) suatu variabel, cukup ketik namanya, lalu jalankan:

```{r}
apel
```

Lebih jelasnya, bisa menggunakan fungsi `print` seperti berikut:

```{r}
print(apel)
```

Variabel juga bisa diterapkan operasi dasar, misalnya seperti berikut:

```{r}
apel-jeruk
apel*jeruk
```

Kita juga bisa mendefinisikan variabel baru menggunakan nilai dari variabel yang sudah ada:

```{r}
banyakbuah <- jeruk+apel
banyakbuah
```

Untuk melihat semua variabel yang sudah ada,

- di tampilan RStudio, cukup lihat bagian "Environment" yang harusnya ada di sebelah kanan layar. Terlihat nama tiap variabel yang sudah terdefinisi, beserta nilai masing-masing.

- secara pemrograman R, bisa dengan fungsi atau perintah `ls()`

```{r}
ls()
```

Di R, kita juga bisa menghapus variabel, menggunakan fungsi atau perintah `rm()`

```{r}
rm(banyakbuah)
```

Kalau kita coba panggil `banyakbuah` lagi, akan *error*.

Apabila ingin menghapus semua variabel, kita bisa memberikan daftar semua variabel yang ada (yaitu hasil `ls()`) ke `rm()` seperti berikut:

```{r}
rm(list=ls())
```

## *Vector*, *sampling*

Sebelumnya, kita sudah mengenal variabel yang bisa menyimpan data, seperti data numerik, juga data teks atau *string*.

Apabila kita ingin menuliskan sekumpulan data, di R ada konsep *vector*, yang seperti *array* di pemrograman pada umumnya. Kita bisa menggabungkan sejumlah data agar menjadi satu kesatuan dengan fungsi `c()` atau *combine*, misalnya sebagai berikut:

```{r}
angka <- c(1, 2, 3)
print(angka)
```

```{r}
nama_buah <- c("apel", "jeruk", "pisang")
print(nama_buah)
```

Kita juga bisa melakukan *sampling*, yaitu mengambil sekian buah data secara sembarang, seperti berikut. Coba jalankan beberapa kali, hasilnya kemungkinan akan berbeda-beda, tetapi tidak mungkin hal yang sama dipilih lebih dari sekali.

```{r}
sample(nama_buah, 2)
sample(nama_buah, 2)
sample(nama_buah, 2)
```

*Sampling* seperti itu disebut **tanpa pengembalian *(without replacement)***. Apabila angka 2 diganti jadi angka 4, kita memerintah R untuk mengambil 4 buah data yang tidak boleh sama dari suatu *vector* yang hanya memiliki 3 buah data, sehingga akan *error*.

Sebenarnya, di R, kita juga bisa melakukan *sampling* **dengan pengembalian *(with replacement)***, dengan tambahan opsi `replace = TRUE` sebagai berikut. Apabila dijalankan berkali-kali, hasilnya juga kemungkinan akan berbeda-beda, tetapi buah yang sama bisa dipilih lebih dari sekali.

```{r}
sample(nama_buah, 4, replace = TRUE)
sample(nama_buah, 4, replace = TRUE)
sample(nama_buah, 4, replace = TRUE)
```

Apabila kalian coba `replace = FALSE`, hasilnya akan seolah-olah kalian tidak menentukan opsi `replace` sama sekali.

## *Import* data, instalasi *package*/*library*

Sekumpulan data biasa disebut *dataset*. Di R, ada sejumlah *dataset* yang *built-in*, yaitu "sudah ada dari sananya". Di antara itu, *dataset* paling terkenal adalah `iris`, yaitu data tiga spesies [bunga *Iris*](https://en.wikipedia.org/wiki/Iris_(plant)), yang sering digunakan dalam pengantar statistika (seperti mata kuliah PSD ini) ataupun pengantar *machine learning*.

Kita bisa mengaktifkan *dataset* `iris` tersebut dengan perinah berikut, menggunakan *string*:

```{r}
data("iris")
```

Sebagaimana di Python, penulisan *string* di R juga bebas antara menggunakan tanda petik `'seperti ini'` ataupun tanda kutip `"seperti ini"`, yang penting konsisten.

Setelah menjalankan kode di atas, *dataset* `iris` sudah diaktifkan. Untuk melihatnya,

* di RStudio, lihat ke bagian Environment. Kalian bisa *double click* atau klik dua kali tulisan `iris` agar muncul *tab* baru berisi tabelnya.

* secara pemrograman, kalian bisa mengetik `iris` begitu saja sebagaimana ketika ingin menampilkan variabel, seperti berikut. Kemudian, tampilan tabel untuk *dataset* `iris` akan muncul di Console (bisa di-*scroll*).

```{r}
iris
```

* cara lain adalah dengan mengetik `View(iris)`, agar tampilan *dataset* `iris` muncul di *tab* baru, seolah-olah telah melakukan *double click* di Environment. Perhatikan bahwa huruf "V" di perintah `View` harus huruf kapital.

```{r}
View(iris)
```

Tentunya, data yang dihadapi oleh pengguna R pada umumnya tidak akan *built-in*, tetapi misalnya akan berupa *file* Excel (`.xlsx`) ataupun *format* `.csv`, sehingga harus di-*import* terlebih dahulu.

Untuk belajar cara *import* data, kebetulan *dataset* `iris` juga tersedia dalam *format* `.csv` dan juga `.xlsx` yang bisa kalian unduh:

* [Iris.csv](./Iris.csv)

* [Iris.xlsx](./Iris.xlsx)

::: {.callout-note}
## Tentang *format* CSV
Baik *format* `.csv` maupun *format* `.xlsx` menyimpan data yang bersifat "tabular", atau berbentuk tabel. Bedanya, *format* `.xlsx` atau Excel bisa menyimpan hal lainnya seperti gambar grafik/visualisasi, juga tiap sel/data bisa diberi warna, dijadikan *bold*, dan sebagainya. Sedangkan, *format* CSV benar-benar hanya menyimpan data tabel saja.

"CSV" itu sendiri adalah singkatan dari *comma-separated values*. Kalau ada waktu, kalian bisa iseng mencoba membuka *file* `.csv` menggunakan aplikasi teks seperti Notepad (di Windows) atau TextEdit (di macOS). Kalian bisa melihat tiap nilai dipisahkan dengan koma, semikolon, atau tanda serupa, yang disebut *delimeter*.
:::

Kebetulan, fitur *import* di R tidak langsung aktif, sehingga perlu diaktifkan terlebih dahulu, dan bahkan perlu diinstal sebelum diaktifkan.

Fitur *import* `.csv`, yang bernama `read.csv`, tersedia dari *package* atau *library* (yaitu sekumpulan fitur) yang bernama "readr". Kode berikut menginstal *package* `readr` terlebih dahulu, kemudian mengaktifkannya:

```
install.packages("readr")
```

```{r}
library(readr)
```

Sedangkan, fitur *import* `.xlsx` bernama `read_excel` dan berasal dari *package* `readxl`, yang juga perlu diinstal dan diaktifkan sebagai berikut:

```
install.packages("readxl")
```

```{r}
library(readxl)
```

Ada baiknya, *file* `.csv` dan/atau *file* `.xlsx` yang ingin di-*import* diletakkan di *folder* yang sama dengan *file* `.R` yang sedang kalian gunakan. Kemudian, di tampilan RStudio bagian pojok kanan bawah, tepatnya di *tab* "Files", kalian bisa mencari letak *file-file* tersebut. Setelah menemukannya, kalian tinggal memberi tahu RStudio bahwa *file-file* yang ingin kalian gunakan ada di situ, yaitu dengan menekan `More > Set As Working Directory` (masih di *tab* Files).

Dengan demikian, untuk meng-*import* `Iris.csv`, kalian tinggal mengetik

```{r}
df1 <- read.csv("Iris.csv")
```

dan untuk meng-*import* `Iris.xlsx`, kalian tinggal mengetik

```{r}
df2 <- read_excel("Iris.xlsx")
```

Beberapa catatan tentang kode di atas:

* Isi dari fungsi `read.csv` ataupun `read_excel`, yang saat ini diisi *string* `"Iris.csv"` dan `"Iris.xlsx"`, sebenarnya meminta ***path***, yaitu semacam "alamat" yang dikenal oleh komputer untuk mencari letak dari *file* yang diinginkan. Apabila *file* berada di *folder* yang sama, cukup namanya saja yang diketik.

* Alternatif dari `More > Set As Working Directory` adalah dengan malah menekan `More > Copy Folder Path to Clipboard`, untuk memperoleh *string* yang kemudian bisa kalian *paste* ke dalam perinah `read.csv` ataupun `read_excel`.

* Ketika berurusan dengan *path*, jangan lupa ubah tiap *backslash* atau `\` menjadi salah satu di antara dua pilihan berikut (sama saja):

    + garis miring biasa: `/`

    + ditulis dua kali: `\\`

* Nama `df1` dan `df2` itu sebenarnya nama variabel, sehingga terserah kalian, tidak harus `df1` ataupun `df2`.

* "df" adalah singkatan dari *data frame*. Singkat cerita, *data frame* adalah tabel, yang bisa memiliki sejumlah kolom (terkadang disebut "fitur") dan sejumlah baris.

# Eksplorasi Data dan Statistik Deskriptif

## Melihat-lihat data

Sampai sini, kita sudah memiliki tiga *data frame*, yaitu `iris` (*built-in*), `df1` (dari `.csv`), dan `df2` (dari `.xlsx`). Semuanya sama saja. Untuk eksplorasi lebih lanjut, mungkin kita gunakan nama `df1` saja ya. Nanti kalau kalian ada data lain yang ingin dieksplorasi, kalian bisa mengganti *path* di kode *import* di atas.

Mari kita lihat lagi datanya:

```{r}
View(df1)
```

Kita bisa gunakan fungsi `ls` untuk melihat nama-nama kolom, dan fungsi `dim` untuk melihat ukuran/dimensi tabel (sekian baris dikali sekian kolom):

```{r}
ls(df1)
dim(df1)
```

Kita bisa sekilas melihat *data frame* tersebut dengan

```{r}
str(df1)
```

Untuk memilih kolom tertentu, gunakan simbol dolar atau `$` seperti berikut:

```
nama_data_frame$nama_kolom
```

Misalnya, untuk memanggil kolom `Sepal.Length` saja,

```{r}
df1$Sepal.Length
```

## Statistik deskriptif

Ringkasan data, meliputi statistik deskriptif seperti minimum, maksimum, dan rata-rata, bisa diperoleh dengan

```{r}
summary(df1)
```

Apabila kalian spesifik memerlukan nilai tertentu, tiap statistik deskriptif ada perintahnya sendiri, yang bisa diterapkan untuk tiap kolom.

Sebagai contoh, untuk kolom `Sepal.Length`, berikut **ukuran pemusatan data**, misalnya *median* (nilai tengah) dan *mean* (rata-rata):

```{r}
median(df1$Sepal.Length) # median (nilai tengah)
mean(df1$Sepal.Length) # rata-rata
```

Untuk nilai modus (yang juga bisa dianggap ukuran pemusatan data), gunakan fungsi `Mode` dari *package* `DescTools`, yang tentunya perlu diinstal terlebih dahulu kalau belum, lalu diaktifkan (perhatikan huruf kapital):

```
install.packages("DescTools") # instal kalau belum
```

```{r}
library(DescTools) # aktifkan
```

```{r}
Mode(df1$Sepal.Length)
```

Artinya, nilai yang paling sering muncul adalah 5, dengan frekuensi sebanyak 10 kali.

Kemudian, berikut **ukuran keragaman data** (juga disebut **persebaran data**):

```{r}
var(df1$Sepal.Length) # variansi
sd(df1$Sepal.Length) # standard deviation
```

Berikut ukuran rentang data:

```{r}
min(df1$Sepal.Length) # minimum
max(df1$Sepal.Length) # maksimum
range(df1$Sepal.Length) # rentang: batas bawah, batas atas
```

Beberapa ukuran lainnya:

```{r}
length(df1$Sepal.Length) # banyaknya baris/data
sum(df1$Sepal.Length) # sumasi/jumlah seluruh data
```

Tentu, ukuran-ukuran tersebut berupa nilai yang nantinya bisa disimpan ataupun digunakan untuk perhitungan lain. Misalnya, ada yang namanya *standard error*:

```{r}
std_err <- sd(df1$Sepal.Length) / sqrt(length(df1$Sepal.Length))
```

Selain itu, ada juga fungsi untuk memperoleh data secara terurut, yaitu `sort`

```{r}
sort(df1$Sepal.Length)
```

## Mem-*filter* data

Selain statistik deskriptif, kita juga bisa menerapkan manipulasi sederhana pada data. Sebelumnya, kita telah menggunakan simbol dolar `$` untuk melakukan ***subsetting***, lebih tepatnya memilih kolom tertentu.

Fitur *subsetting* ini sebenarnya ada fungsinya sendiri, yang tidak hanya bisa memilih kolom tertentu, tetapi juga bisa memilih semua baris yang memenuhi kriteria tertentu pada kolom. 

Contohnya, untuk memilih semua baris dengan spesies tertentu:

```{r}
subset(df1, Species == "versicolor")
```

Terlihat bahwa spesies "versicolor" terdata di baris ke-51 hingga baris ke-100.

Bisa juga, memilih semua baris dengan `Sepal.Length` yang cukup besar:

```{r}
subset(df1, Sepal.Length >= 6)
```

Selain *subsetting*, ada juga *indexing*. Kita bisa mengakses baris dan kolom tertentu pada tabel menggunakan kurung siku.

Misalnya, perhatikan data `Sepal.Width`:

```{r}
df1$Sepal.Width
```

Kebetulan, `Sepal.Width` adalah kolom kedua pada tabel. Dari tabel `df1`, kita bisa memilih lima baris pertama dari kolom kedua, yaitu lima baris pertama dari `Sepal.Width`, seperti berikut:

```{r}
df1[1:5, 2]
```

Perhatikan bahwa bentuk data di atas sudah tidak seperti *data frame* yang berbentuk tabel rapi. Kita bisa tambahkan opsi `drop = FALSE` agar tetap seperti tabel:

```{r}
df1[1:5, 2, drop = FALSE]
```

Ada juga fungsi `which` yang agak terbalik dari *subsetting*: mencari baris mana saja yang memenuhi kriteria tertentu. Misalnya, kita bisa memperoleh baris mana saja yang memiliki data spesies tertentu.

```{r}
which(df1$Species == "versicolor")
```

Gunanya? Kita bisa gabungkan ini dengan *indexing*:

```{r}
index_versicolor <- which(df1$Species == "versicolor")
df1[index_versicolor,] # entah kenapa, harus ada koma
```

Sebenarnya, ada alternatif dari fungsi `subset`, yaitu fungsi `filter` dari *package* `dplyr`. Mari instal kalau belum, lalu aktifkan:

```
install.packages("dplyr")
```

```{r}
library(dplyr)
```

Kita bisa gunakan sebagaimana menggunakan fungsi `subset` tadi:

```{r}
filter(df1, Species == "versicolor")
```

```{r}
filter(df1, Sepal.Length >= 6)
```

Bedanya dengan fungsi `subset`? Selain namanya lebih jelas, fungsi `filter` ini cenderung lebih cepat untuk data yang besar, misalnya puluhan ribu baris.

# Visualisasi Frekuensi

Terkadang, data lebih enak dilihat ketika divisualisasikan. Sebagaimana yang kalian pelajari di kelas kuliah, ada berbagai macam visualisasi untuk berbagai macam data.

Kita akan membahas lebih lanjut tentang visualisasi di pertemuan selanjutnya. Kali ini, kita akan mencoba beberapa visualisasi sederhana, yaitu visualisasi frekuensi, yang masing-masing melibatkan satu variabel saja. Tujuannya adalah agar bisa menggambarkan (sehingga lebih memahami) bagaimana persebaran nilai-nilai untuk suatu variabel, yaitu persebaran frekuensinya.

## Tabel frekuensi

Sebelum bisa membuat visualisasi, kita perlu mempersiapkan datanya. Misalnya, kita ingin mengetahui persebaran spesies di data `df1`. Data yang perlu kita persiapkan adalah **tabel frekuensi** *(frequency table)*, yang mendata banyaknya kemunculan tiap nilai. Dalam hal ini, tabel frekuensi untuk spesies akan mendata banyaknya baris pada data yang ada untuk tiap spesies.

Cara membuatnya adalah sebagai berikut. Kita terapkan fungsi `table` pada `df1$Species` untuk menghasilkan data tabel frekuensi, kemudian menerapkan fungsi `data.frame` untuk memperoleh hasil tabel yang rapi (berbentuk *data frame*). Hasil dari semua itu kita simpan ke dalam suatu variabel, misal `freq_species`, yang akan menyimpan *data frame* tabel frekuensi tersebut.

```{r}
freq_species <- data.frame(table(df1$Species, dnn="Species"))
freq_species
View(freq_species)
```

Catatan: `dnn` adalah opsi nama kolom untuk variabel yang ingin dihitung frekuensinya. Apabila tidak diberikan, namanya akan "Var1".

Ternyata hasilnya tidak begitu menarik, ketiga spesies tersebar rata. Tidak masalah, kita bisa mencoba mem-*filter* data dengan kriteria tertentu, barulah membuat tabel frekuensinya.

Sebagai contoh, kita penasaran bagaimana persebaran spesies ketika panjang sepal atau `Sepal.Length` cukup besar, minimal `5.5`. Kita bisa *filter* terlebih dahulu dengan fungsi `subset`, dan menyimpan hasil saringannya (yang berupa *data frame*) ke dalam suatu variabel baru, misalnya `df1_longsepal`

```{r}
df1_longsepal <- subset(df1, Sepal.Length >= 5.5)
```

Barulah kita buat tabel frekuensinya:

```{r}
freq_species_longsepal <- data.frame(table(df1_longsepal$Species,
                                           dnn="Species"))
freq_species_longsepal
```

Menarik! Panjang sepal untuk spesies tertentu cenderung lebih kecil daripada spesies lainnya.

Perhatikan bahwa `Species` di sini tergolong **data kategorik**, sehingga kita bisa mencoba membuat *bar chart* dan *pie chart* untuk menggambarkan kedua tabel frekuensi di atas.

## *Bar Chart*

Gunakan fungsi `barplot`

```{r}
barplot(height = freq_species$Freq,
        names.arg = freq_species$Species,
        col = "violet",
        main = "Persebaran Spesies (seluruh data)",
        xlab = "Spesies", ylab = "Frekuensi",
        width = 1, space = 2, density = 10,
        font.axis = 2,
        col.axis = "red",
        cex.axis = 1)
```

```{r}
barplot(height = freq_species_longsepal$Freq,
        names.arg = freq_species_longsepal$Species,
        main = "Persebaran Spesies (untuk Sepal.Length >= 5.5)",
        xlab = "Spesies",
        ylab = "Frekuensi")
```

## *Pie Chart*

Gunakan fungsi `pie`

```{r}
pie(freq_species$Freq,
    labels = freq_species$Species,
    main = "Persebaran Spesies (seluruh data)",
    col = c("red", "green", "blue"))
```

```{r}
pie(freq_species_longsepal$Freq,
    labels = freq_species_longsepal$Species,
    main = "Persebaran Spesies (untuk Sepal.Length >= 5.5)")
```

## *Histogram*

Sayangnya, variabel kategorik di *dataset* `iris` hanyalah `Species`, sedangkan variabel lainnya berupa **data numerik**.

Untuk data numerik, *histogram* cukup umum digunakan untuk menggambarkan persebaran datanya, yang terlebih dahulu dibagi-bagi menjadi sejumlah "kelas" atau "kelompok".

*Histogram* seolah-olah seperti *bar chart* untuk data numerik yang harus dikelompokkan terlebih dahulu. Untungnya, R bisa otomatis melakukan pengelompokkan tersebut, sehingga kita tinggal pakai; tidak perlu membuat tabel frekuensi secara manual seperti untuk data kategorik.

Fungsi yang digunakan adalah `hist`. Sebagai contoh, berikut gambaran persebaran `Sepal.Length`

```{r}
hist(df1$Sepal.Length,
     main = "Persebaran Sepal.Length (seluruh data)",
     xlab = "Panjang sepal",
     ylab = "Frekuensi",
     col = "yellow")
```

Kita bisa menentukan banyaknya kelompok yang kita inginkan, dengan opsi `breaks`

```{r}
hist(df1$Sepal.Length,
     main = "Persebaran Sepal.Length (seluruh data)",
     xlab = "Panjang sepal",
     ylab = "Frekuensi",
     col = "yellow",
     breaks = 20)
```
