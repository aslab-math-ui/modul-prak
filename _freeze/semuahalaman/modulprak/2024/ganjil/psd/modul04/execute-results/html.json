{
  "hash": "b41805994ea2a8242493a00cfe7a5bfe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"(Pertemuan 04) R: Visualisasi Dua Variabel, Time Series, dan ggplot2\"\nsubtitle: \"R: Two-Variable Visualization, Time Series, and ggplot2\"\ndescription: \"Offline di Departemen Matematika\"\ndate: 10/07/2024\npage-navigation: true\nformat: html\n---\n\n\n\nKembali ke [Pengantar Sains Data](./psd2024.qmd)\n\nMelanjutkan pertemuan sebelumnya, kali ini kita akan mempelajari lebih lanjut tentang visualisasi menggunakan R, yaitu visualisasi dua variabel (termasuk *line chart* untuk data *time series*), serta tentang *package* bernama `ggplot2` yang bisa mempermudah urusan visualisasi.\n\nKita coba gunakan *dataset* `iris` terlebih dahulu, ya. Aktifkan terlebih dahulu:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"iris\")\n```\n:::\n\n\n\nAgar konsisten (bahwa kita sedang berurusan dengan *data frame*), mari kita beri nama `df1` saja:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- iris\n```\n:::\n\n\n\nKita bisa lihat-lihat:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df1)\ndf1\n```\n:::\n\n\n\nKolom-kolomnya adalah:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(df1)\n```\n:::\n\n\n\n# Visualisasi Dua Variabel (dengan fungsi *built-in*)\n\nDi pertemuan sebelumnya, kita sudah membuat visualisasi frekuensi dengan fungsi seperti `barplot`, `pie`, dan `hist`, yang \"sudah ada dari sananya\" atau disebut *built-in*. Untuk keperluan visualisasi dua variabel, juga tersedia beberapa fungsi *built-in*.\n\n## Boxplot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length) #1 variabel\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width) #2 variabel atau lebih\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width,\n        main = \"Boxplot Perbandingan Sepal Length dan Sepal Width\",\n        names = c(\"Sepal Length\", \"Sepal Width\")) #tambahkan judul dan xlabel\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width,\n        main = \"Boxplot Perbandingan Sepal Length dan Sepal Width\",\n        names = c(\"Sepal Length\", \"Sepal Width\"),\n        col = c(\"red\", \"blue\")) #ganti warna\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width,\n        main = \"Boxplot Perbandingan Sepal Length dan Sepal Width\",\n        names = c(\"Sepal Length\", \"Sepal Width\"),\n        col = c(\"red\", \"blue\"),\n        horizontal = TRUE) #rotate jadi horizontal\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length, df1$Sepal.Width,\n        main = \"Boxplot Perbandingan Sepal Length dan Sepal Width\",\n        names = c(\"Sepal Length\", \"Sepal Width\"),\n        col = c(\"red\", \"blue\"),\n        notch = TRUE) # jadi \"mengerucut\" di sekitar median\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length ~ df1$Species)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(Sepal.Length ~ Species, data = df1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df1$Sepal.Length ~ df1$Species, \n        main = \"Perbandingan Sepal Length berdasarkan Species\",\n        xlab = \"Species\",\n        ylab = \"Sepal Length\",\n        col = c(\"blue\",\"yellow\",\"red\"))\n```\n:::\n\n\n\n## Scatter\n\nUntuk menggambar *scatter plot*, gunakan fungsi `plot`\n\nPlot paling dasar: semua variabel numerik menjadi scatter\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1)\n```\n:::\n\n\n\n*Scatter plot* antar dua variabel pilihan:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1$Sepal.Length, df1$Sepal.Width)\n```\n:::\n\n\n\nTambahkan judul pakai `main`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1$Sepal.Length, df1$Sepal.Width, \n     main = \"Ini Judul grafiknya\")\n```\n:::\n\n\n\nTambahkan label sumbu\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1$Sepal.Length, df1$Sepal.Width, \n     main = \"Ini Judul grafiknya\",\n     xlab = \"Sumbu X\",\n     ylab = \"Sumbu Y\")\n```\n:::\n\n\n\nBeri warna\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df1$Sepal.Length, df1$Sepal.Width,\n     main = \"Scatter Plot Sepal Length dengan Sepal Width\",\n     xlab = \"Sepal Length\",\n     ylab = \"Sepal Width\",\n     col = \"blue\")\n```\n:::\n\n\n\n# (Pengayaan) Visualisasi Tambahan (dengan fungsi *built-in*)\n\n## *Stem and Leaf Plot*\n\nUntuk melihat persebaran data (min, max, distribusi), mirip histogram\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?stem\nView(ChickWeight) #data dari r\nstem(ChickWeight$weight)\nhist(ChickWeight$weight) #buat perbandingan\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(ChickWeight$weight) #cek nilai minimumnya\nmax(ChickWeight$weight) #cek maxnya\n```\n:::\n\n\n\nKalau ternyata min sama maxnya kurang tepat, ganti scalenya\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstem(ChickWeight$weight, scale = 5) \nstem(ChickWeight$weight, width = 100) \n```\n:::\n\n\n\n## *Dot Diagram*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?dotchart\nView(mtcars)\n```\n:::\n\n\n\nPaling Sederhana\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndotchart(mtcars$mpg)\n```\n:::\n\n\n\nTambah Judul dan Label\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndotchart(mtcars$mpg, labels = row.names(mtcars),\n         cex = 0.9, xlab = \"mpg\",\n         main = \"Persebaran Jarak Yang Dapat Ditempuh Per Galon\")\n```\n:::\n\n\n\nBerdasarkan Grup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrps <- as.factor(mtcars$cyl)\nmy_cols <- c(\"blue\", \"darkgreen\", \"orange\")\ndotchart(mtcars$mpg, labels = row.names(mtcars),\n         groups = grps, gcolor = my_cols,\n         color = my_cols[grps],\n         cex = 0.9,  pch = 22, xlab = \"mpg\",\n         main = \"Persebaran Jarak Yang Dapat Ditempuh Per Galon Berdasarkan Jumlah Silinder\")\nlegend(\"bottomright\", legend = c(\"4\",\"6\", \"6\"),\n       fill = my_cols, cex = 0.8)\n```\n:::\n\n\n\n# *Time Series* dan *Line Chart*\n\nData periodik terhadap waktu (misalnya data tahunan atau data bulanan) disebut *time series data* (data runtun waktu), biasa disebut *time series* saja atau disingkat \"TS\". Visualisasi *line chart* biasa digunakan untuk data *time series*, dan begitu juga sebaliknya, data *time series* biasa divisualisasikan dengan *line chart*.\n\n## Mencari data *time series*\n\nSayangnya, *dataset* `iris` tidak memiliki data *time series*. Bahkan, dari semua *dataset* yang *built-in*, data *time series* cenderung berupa *dataset* tersendiri, yang memang khusus menyimpan data variabel tertentu saja terhadap waktu.\n\nOleh karena itu, mari kita coba *dataset* lain. Kalian bisa melihat-lihat *dataset* yang sudah tersedia di R dengan perintah `data()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata()\n```\n:::\n\n\n\nSebenarnya, tiap *dataset* berasal dari sebuah *package*. Perhatikan bahwa *dataset* `iris` berasal dari *package* bernama `datasets` (yang memang sudah *built-in*)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?iris\n```\n:::\n\n\n\nKita bisa spesifik melihat daftar *dataset* yang berasal dari *package* tertentu dengan tambahan opsi `package`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"datasets\")\n```\n:::\n\n\n\nUntuk data *time series*, kita bisa mencoba misalnya `nhtemp`, rata-rata tahunan untuk suhu di kota New Haven di Amerika Serikat\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"nhtemp\")\n```\n:::\n\n\n\nMari kita lihat:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(nhtemp)\nnhtemp\n```\n:::\n\n\n\nTerlihat bahwa data ini berupa *time series* yang tidak langsung berbentuk tabel. Di R, data berjenis *time series* memang diberi perhatian khusus, sehingga menjadi yang namanya *\"time series object\"*. Data runtun waktu dipelajari lebih lanjut di mata kuliah Metode Peramalan *(Forecasting Methods / Time Series Analysis)*.\n\n## *Line chart* instan dari objek *time series*\n\nDi pertemuan kali ini, kita hanya akan membuat visualisasinya dengan *line chart*.\n\nPerhatian khusus tersebut ternyata sangat mempermudah cara memvisualisasikannya:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(nhtemp)\n```\n:::\n\n\n\nLangsung jadi!\n\nNamun, apabila sewaktu-waktu kalian berurusan dengan tabel data yang sebenarnya berupa *time series*, mungkin R tidak akan langsung mengakuinya sebagai *time series*. Tidak masalah, karena kita masih bisa membuat *line chart* dari *data frame*.\n\n## Mengubah *time series object* menjadi *data frame*\n\nSebelum bisa membuat *line chart* dari *data frame*, datanya harus ada. Kalian bisa sewaktu-waktu *import* data kalian sendiri, kalau ada. Di sini, kita hanya akan mengubah *time series object* `nhtemp` menjadi *data frame*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_nhtemp <- data.frame(Time=time(nhtemp),\n                        Temp=as.matrix(nhtemp))\n```\n:::\n\n\n\nMari kita lihat:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df_nhtemp)\ndf_nhtemp\n```\n:::\n\n\n\n## *Line chart* dari *data frame*\n\nSekarang tinggal kita gambar, dengan cara menggambar *scatter plot* yang kemudian diberi opsi `type = \"l\"` agar menjadi *line chart*:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df_nhtemp$Time, df_nhtemp$Temp, type=\"l\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df_nhtemp$Time, df_nhtemp$Temp, type=\"l\",\n     xlab=\"Time\", ylab=\"Temp\",\n     main=\"Average Yearly Temperature in New Haven\")\n```\n:::\n\n\n\nHmm, kurang bagus ya. Untuk *line chart* yang lebih bagus (dan juga berbagai *plot* lainnya) serta lebih fleksibel, selanjutnya kita akan mencoba `ggplot2`, sebuah *package* untuk *plotting* di R yang sangat terkenal dan sering digunakan di kalangan pengguna R.\n\n# ggplot2\n\nFungsi-fungsi *plot* yang tersedia di R secara *built-in* (terkadang disebut \"base R\"), yang sudah kita eksplorasi sejauh ini, cenderung terbatas dan tidak begitu fleksibel. Kalangan pengguna R cenderung menggunakan sebuah *package* terkenal di R untuk keperluan *plotting*, yaitu `ggplot2`.\n\nInstal terlebih dahulu, kalau belum:\n\n```\ninstall.packages(\"ggplot2\")\n```\n\nLalu aktifkan:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\n## *Dataset* yang tersedia di `ggplot2`\n\nKebetulan, `ggplot2` menyediakan beberapa *dataset* (yang tidak tersedia di *base R*) yang bisa kita gunakan untuk mempelajari dan mengeksplorasi `ggplot2`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"ggplot2\")\n```\n:::\n\n\n\nKita lihat, data *time series* tersedia di `ggplot2`, bernama `economics`. Mari kita lihat-lihat:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"economics\", package = \"ggplot2\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- economics\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df2)\ndf2\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nls(df2)\n```\n:::\n\n\n\nData *time series* ini terdiri dari sejumlah kolom terhadap waktu.\n\n## Dasar-dasar `ggplot2` dengan *line chart*\n\nMenggunakan *line chart*, kita bisa memvisualisasikan bagaimana perubahan suatu variabel terhadap variabel waktu (`date`). Misalnya, kita bisa melihat bagaimana perubahan banyaknya pengangguran (`unemploy`) dari tahun ke tahun.\n\nApabila kita gunakan fungsi *built-in* untuk *line chart*, jadinya seperti berikut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df2$date, df2$unemploy,\n     type = \"l\",\n     col = \"red\")\n```\n:::\n\n\n\nMari kita coba buat dengan `ggplot2`.\n\nLangkah pertama adalah menentukan *data frame* yang ingin kita gunakan, serta variabel yang akan di sumbu x dan variabel yang akan di sumbu y. *Syntax*-nya seperti berikut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df2, aes(x = date, y = unemploy))\n```\n:::\n\n\n\n`aes` artinya *aesthetic* (estetika), sebenarnya dalam artian \"sesuatu yang bisa dilihat\". Kita memang ingin melihat data `date` untuk sumbu x dan `unemploy` untuk sumbu y, sehingga kita tuliskan seperti itu.\n\nNamun, sejauh ini, isi *plot* masih kosong. Kita baru membuat *canvas* nya saja, belum garis-garisnya.\n\nAgar ada garis, kita \"tambahkan\" dengan fungsi `geom_line()` seperti berikut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df2, aes(x = date, y = unemploy)) + \n  geom_line()\n```\n:::\n\n\n\nMungkin tampak aneh, seolah-olah fungsi dijumlahkan dengan fungsi. Cara kerjanya kurang lebih seperti berikut.\n\n* Sebenarnya, fungsi `ggplot` menghasilkan \"objek\" atau \"benda\" yang berupa *plot* kosong.\n\n* Serupa, fungsi `geom_line` menghasilkan \"objek\" berupa perintah untuk menggambarkan garis-garis.\n\n* Begitu kita jumlahkan, objek hasil `geom_line` diterapkan ke objek hasil `ggplot`.\n\n* Hasil jumlahnya berupa objek *plot* baru, yaitu *line chart* yang kita inginkan.\n\n* Objek baru itulah yang kemudian ditampilkan.\n\nCara ini sangat berbeda dengan cara kerja fungsi-fungsi *plotting* di *base R* yang memang berupa perintah. \n\nPenjumlahan seperti itu di `ggplot2` bisa kita bayangkan sebagai \"komposisi\", yang pada akhirnya menghasilkan suatu objek *plot* akhir. Ibaratnya seperti penulisan penjumlahan bilangan di R,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 3\n```\n:::\n\n\n\nyang memang menggabungkan 2 dengan 3 untuk menghasilkan hasil akhir yaitu 5, yang kemudian ditampilkan.\n\nTentu, kita bisa menyimpan atau meng-*assign* hasil jumlah tersebut ke dalam variabel, yang kemudian bisa kita tampilkan, sebagai berikut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhasil_jumlah <- 2 + 3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhasil_jumlah\n```\n:::\n\n\n\nSebagaimana hasil penjumlahan bilangan itu bisa kita simpan ke dalam variabel, \"hasil jumlahan *plot*\" dalam penggunaan `ggplot2` sebenarnya juga bisa kita simpan ke dalam variabel.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntren_pengangguran <- ggplot(df2, aes(x = date, y = unemploy)) + \n  geom_line()\n```\n:::\n\n\n\nKarena sudah tersimpan ke dalam variabel, kita bisa menampilkan *plot* akhir tersebut kapan saja, cukup dengan memanggil variabelnya:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntren_pengangguran\n```\n:::\n\n\n\nFleksibilitas seperti ini tidak ada ketika kita menggunakan fungsi-fungsi *plotting* dari *base R*.\n\nTentunya, kita juga bisa menambahkan label, dengan menambahkan `labs` seperti berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df2, aes(x = date, y = unemploy)) + \n  geom_line() + \n  labs(\n    title = \"Line Chart Tahun dengan Jumlah Pengangguran\",\n    x = \"Tahun\",\n    y = \"Jumlah Pengangguran\"\n  )\n```\n:::\n\n\n\n## *Scatter*\n\nPenulisannya mirip, tetapi menggunakan `geom_point` daripada `geom_line`\n\nSecara tampilan pun, bedanya *line chart* dan *scatter plot* hanyalah pilihan antara menggambar garis atau menggambar titik-titik.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length, y = Sepal.Width)) + \n  geom_point()\n```\n:::\n\n\n\nKita juga bisa menambahkan warna-warna sesuai kolom lain, misal berdasarkan spesies.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + \n  geom_point()\n```\n:::\n\n\n\nBetapa fleksibelnya, ya! Fitur *scatter plot* `plot` di *base R* tidak se-fleksibel ini. Lebih nyaman juga, karena keterangan warna-warnanya juga langsung ada.\n\nJangan lupa tambahkan label dengan `labs` seperti berikut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + \n  geom_point() + \n  labs(\n    title = \"Scatter Plot Sepal Length vs Sepal Width\",\n    x = \"Sepal Length\",\n    y = \"Sepal Width\",\n    color = \"Species Names\"\n  )\n```\n:::\n\n\n\nContoh lain: `Petal.Length` vs. `Petal.Width`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Petal.Length, y = Petal.Width, color = Species)) + \n  geom_point() + \n  labs(\n    title = \"Scatter Plot Petal Length vs Petal Width\",\n    x = \"Petal Length\",\n    y = \"Petal Width\",\n    color = \"Species Names\"\n  )\n```\n:::\n\n\n\n## *Bar Chart*\n\nDi pertemuan sebelumnya, kita sudah menggunakan *bar chart* untuk memvisualisasi frekuensi nilai-nilai di satu variabel, menggunakan *dataset* `iris`. Persebaran `Species` ternyata kurang menarik, kecuali apabila dilakukan *filter* data terlebih dahulu.\n\nAgar lebih mudah, mari kita coba *dataset* lain yang sudah memiliki persebaran lebih menarik. Tidak harus dari `ggplot2`, bisa juga dari package* `datasets` yang *built-in*. Kita bisa cari-cari dulu:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"datasets\")\n```\n:::\n\n\n\nMisalnya kita pilih `mtcars` dari `datasets` (daripada dari `ggplot2`), yang berisi data mobil-mobil dari majalah *Motor Trend* tahun 1974.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"mtcars\", package = \"datasets\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- mtcars\n```\n:::\n\n\n\nKita bisa lihat isinya:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df3)\ndf3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nls(df3)\n```\n:::\n\n\n\nPerhatikan bahwa tiap baris adalah mobil tersendiri, dan datanya memang tidak terlalu banyak. Salah satu kolomnya adalah `cyl`, banyaknya \"silinder\" untuk tiap mobil, yaitu mesin di dalam mobil yang biasa memompa bensin.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3$cyl\n```\n:::\n\n\n\nSepertinya persebarannya menarik. Tidak seperti fungsi `barplot` dari *base R*, di `ggplot2` kita tidak perlu membuat tabel frekuensi untuk membuat *bar chart*. Langsung saja tambahkan `geom_bar` seperti berikut. Karena hanya ada satu variabel, kita cukup pasang variabel sumbu x saja.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = cyl)) + \n  geom_bar()\n```\n:::\n\n\n\nUntuk memberi warna, gunakan opsi `fill` di `aes`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = cyl, fill = \"red\")) + \n  geom_bar()\n```\n:::\n\n\n\nKita juga bisa menentukan ketebalan dengan opsi `width` di `geom_bar`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = cyl, fill = \"red\")) + \n  geom_bar(width = 1)\n```\n:::\n\n\n\nSeandainya kalian justru memiliki data yang berupa semacam tabel frekuensi saja, misalnya data *voting* anonim, *bar chart* masih bisa dibuat dengan fungsi terpisah yaitu `geom_col` daripada `geom_bar`\n\nSebagai contoh, misalkan kita punya tabel frekuensi untuk variabel `cyl`, yang bisa kita peroleh sebagai berikut (seperti di pertemuan sebelumnya):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyl_freq <- data.frame(table(df3$cyl, dnn=\"cyl\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(cyl_freq)\ncyl_freq\n```\n:::\n\n\n\nKita bisa menggambar *bar chart* untuk tabel frekuensi tersebut dengan tambahan fungsi `geom_col` seperti berikut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cyl_freq, aes(x = cyl, y = Freq)) + \n  geom_col()\n```\n:::\n\n\n\nKita juga bisa memberi warna (dengan `fill` di `aes` di `ggplot`) dan menentukan lebar batang (dengan `width` di `geom_col`), sebagaimana ketika menggunakan `geom_bar`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cyl_freq, aes(x = cyl, y = Freq, fill = \"red\")) + \n  geom_col(width = 0.5)\n```\n:::\n\n\n\n## *Pie Chart*\n\nSelain *bar chart*, ada *pie chart* sebagai visualisasi yang berbeda untuk kegunaan yang sama. Sayangnya, di `ggplot2` tidak ada fungsi khusus untuk *pie chart*. Namun, kita bisa akali dengan membuat *bar chart* dengan `geom_bar` seperti berikut, yang kemudian diterapkan koordinat polar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = factor(1), fill = factor(cyl))) + \n  geom_bar(width = 1) + \n  coord_polar(theta = \"y\")\n```\n:::\n\n\n\nDi sini, fungsi `factor` diperlukan untuk memberitahu R bahwa data `cyl` berupa data kategorik. Kita juga pasang `x = factor(1)` karena di sini seolah-olah hanya ada satu batang di *bar chart* (yang kemudian diterapkan koordinat polar), dan kita biasa hanya memasang sumbu x ketika membuat *bar chart*.\n\nSeperti biasa, kita bisa tambahkan `labs` untuk menentukan label, seperti menentukan judul, mengosongkan label sumbu x maupun sumbu y, dan menentukan label untuk opsi `fill` (yang saat ini terpasang menjadi `factor(cyl)`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df3, aes(x = factor(1), fill = factor(cyl))) + \n  geom_bar(width = 1) + \n  coord_polar(theta = \"y\") +\n  labs(\n    title = \"Banyaknya Silinder di Mobil (dari Motor Trend, 1974)\",\n    x = \"\",\n    y = \"\",\n    fill = \"cyl (banyaknya silinder)\"\n  )\n```\n:::\n\n\n\nApabila data kita berupa semacam tabel frekuensi saja, kita juga bisa melakukan hal serupa dengan `geom_col` agar tetap bisa membuat *pie chart*. Caranya seperti berikut, juga menggantikan `x = cyl` dengan `x = factor(1)`, sedangkan opsi `fill` tetap diberi `factor(cyl)`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cyl_freq, aes(x = factor(1), y = Freq, fill = factor(cyl))) + \n  geom_col() +\n  coord_polar(theta = \"y\")\n```\n:::\n\n\n\nLabel bisa kita tentukan dengan menambahkan `labs` seperti biasa\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cyl_freq, aes(x = factor(1), y = Freq, fill = factor(cyl))) + \n  geom_col() +\n  coord_polar(theta = \"y\") +\n  labs(\n    title = \"Pie Chart Banyaknya Silinder dari Tabel Frekuensi\",\n    x = \"\",\n    y = \"\",\n    fill = \"cyl (banyaknya silinder)\"\n  )\n```\n:::\n\n\n\n## *Histogram*\n\nDi `ggplot2`, *histogram* juga seolah-olah seperti sejenis *bar chart*. Mari kita coba gambar *histogram* untuk `Sepal.Length` seperti di pertemuan sebelumnya. Kali ini, tambahkan `geom_histogram`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length)) + \n  geom_histogram()\n```\n:::\n\n\n\nKita bisa menentukan lebar batang di *histogram* dengan opsi `binwidth`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length)) + \n  geom_histogram(binwidth = 0.5)\n```\n:::\n\n\n\nKita juga bisa memberi opsi warna, yaitu `fill` untuk warna isi batangnya dan `color` untuk warna pinggiran batangnya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Sepal.Length)) + \n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\")\n```\n:::\n\n\n\n## *Boxplot*\n\nUntuk *boxplot*, tambahkan `geom_boxplot`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Species, y = Sepal.Length)) + \n  geom_boxplot()\n```\n:::\n\n\n\nKita juga bisa menenukan warna isi yaitu `fill` dan warna pinggiran yaitu `color`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df1, aes(x = Species, y = Sepal.Length)) + \n  geom_boxplot(fill = \"skyblue\", color = \"black\")\n```\n:::\n\n\n\n# Lampiran untuk belajar lebih lanjut\n\nggplot2:\n\n<https://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}