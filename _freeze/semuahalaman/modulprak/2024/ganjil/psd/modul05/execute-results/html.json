{
  "hash": "87649cf2c2d7ad9dee5ff9ca08156ce3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"(Pertemuan 05) R: Distribusi Probabilitas Diskrit\"\nsubtitle: \"R: Discrete Probability Distributions\"\ndescription: \"Offline di Departemen Matematika\"\ndate: 10/21/2024\npage-navigation: true\nformat: html\n---\n\n\n\nKembali ke [Pengantar Sains Data](./psd2024.qmd)\n\nSelamat datang kembali di praktikum Pengantar Sains Data. Setelah sebelumnya membahas tentang serba-serbi visualisasi data, sekarang kita akan mulai membahas sejumlah bentuk distribusi probabilitas yang umum dikenal dan digunakan di dunia statistika, dimulai dari sejumlah distribusi diskrit.\n\nDalam suatu percobaan acak, tentu ada sejumlah hasil yang mungkin. Kita bisa memandang hasil-hasil yang mungkin tersebut sebagai nilai-nilai yang bisa dimiliki oleh suatu **variabel acek *(random variable)***, biasanya dilambangkan $X$. Himpunan semua nilai yang mungkin disebut **ruang sampel *(sample space)*** untuk variabel acak tersebut.\n\n**Distribusi probabilitas *(probability distribution)*** untuk suatu variabel acak mendata probabilitas atau peluang untuk tiap nilai di ruang sampel. Dari ruang sampel, kumpulan semua nilai yang memiliki probabilitas taknol disebut ***support*** dari distribusi tersebut.\n\nSuatu ruang sampel disebut **diskrit** apabila banyaknya elemen bersifat **terhitung *(countable)***. Suatu distribusi disebut **diskrit** apabila variabel acak yang bersangkutan memiliki ruang sampel yang diskrit.\n\nSerupa: suatu ruang sampel disebut **kontinu** apabila banyaknya elemen bersifat **tak terhitung *(uncountable)***, dan suatu distribusi disebut **kontinu** apabila variabel acak yang bersangkutan memiliki ruang sampel yang kontinu.\n\nBanyak distribusi data cenderung mengikuti \"jenis\" atau \"bentuk\" yang sama, hanya berbeda dari segi beberapa \"sifat\" saja. Dari situlah muncul berbagai nama distribusi seperti binomial, *uniform*, Poisson, normal, dan seterusnya; itulah sejumlah \"bentuk\" distribusi yang umum dikenal, dan ada konsep \"parameter\" sebagai \"sifat-sifat\" yang bisa membedakan antar dua distribusi yang berbentuk mirip.\n\nBeberapa distribusi diskrit adalah\n\n- distribusi Bernoulli\n\n- distribusi binomial\n\n- distribusi Poisson\n\n- distribusi *uniform* diskrit\n\ndan tentunya, kita juga bisa membuat distribusi diskrit sendiri; tidak harus selalu beracuan pada bentuk-bentuk tersebut.\n\n# Distribusi Diskrit dengan *base R*\n\n## Fungsi `d`..., `p`..., `q`..., dan `r`...\n\nDi kalangan R, sudah ada semacam standardisasi agar tiap distribusi (baik diskrit maupun kontinu) diwakili oleh empat fungsi, yang namanya berawalan `d`, berawalan `p`, berawalan `q`, dan berawalan `r`.\n\n- Fungsi berawalan `d` melambangkan ***density function***, juga disebut PMF *(probability mass function)* untuk distribusi diskrit, atau PDF *(probability density function)* untuk distribusi kontinu\n\n    Fungsi ini menghitung probabilitas suatu variabel acak $X$ memperoleh nilai **sama dengan** $x$, yang bisa dirumuskan:\n\n    $$\\text{Pr}\\left\\{ X=x \\right\\}$$\n\n    Note: terkadang, untuk distribusi diskrit pun, PMF juga disebut PDF\n\n- Fungsi berawalan `p` melambangkan ***(cumulative) probability function*** atau lebih umum disebut **CDF *(cumulative distribution function)***\n\n    Fungsi ini menghitung probabilitas suatu variabel acak $X$ memperoleh nilai **kurang dari atau sama dengan** $x$, yang bisa dirumuskan:\n\n    $$\\text{Pr}\\left\\{ X \\leq x \\right\\}$$\n\n    Untuk distribusi diskrit, CDF bisa dihitung sebagai sumasi atau penjumlahan dari tiap nilai PMF hingga nilai $x$ yang diminta. \n    \n    Sedangkan, untuk distribusi kontinu, perhitungan CDF sebenarnya melibatkan integral hingga nilai $x$ yang diminta. Itu akan kalian pelajari lebih lanjut di mata kuliah Statistika Matematika 1.\n    \n    Sementara ini, ketika tidak bisa menghitung CDF dari sekadar sumasi nilai-nilai PMF, kalian bisa memperoleh nilai CDF dengan menggunakan fungsi `p` yang sesuai di R, yaitu menjadi topik pembahasan di praktikum kita, atau dengan memanfaatkan tabel CDF yang biasa tersedia di lampiran buku pengantar statistik seperti karangan Walpole.\n\n- Fungsi berawalan `q` melambangkan ***quantile function*** atau lebih umum disebut ***inverse CDF***\n\n    Diketahui suatu probabilitas $y$, fungsi ini menentukan nilai $x$ yang membuat nilai CDF dari $x$ sama dengan $y$.\n\n    Lebih tepatnya, fungsi kuantil ini menentukan nilai $x$ terkecil sedemikian sehingga nilai CDF paling tidak $y$.\n\n- Fungsi berawalan `r` melambangkan **RNG *(random number generator)***, yang bisa menghasilkan sampel sejumlah data secara acak *(random)* dari distribusinya.\n\nUntuk sejumlah distribusi yang umum dikenal, *base R* sudah menyediakan keempat fungsi tersebut. Kita akan lebih mengenal arti, maksud, dan cara menggunakan fungsi-fungsi tersebut seiring mengenal berbagai distribusi.\n\n## Distribusi Bernoulli\n\nKhusus untuk distribusi Bernoulli, diperlukan *package* `Rlab` yang perlu di-instal terlebih dahulu kalau belum,\n\n```\ninstall.packages(\"Rlab\")\n```\n\ndan perlu diaktifkan:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"Rlab\")\n```\n:::\n\n\n\nSalah satu fenomena yang sangat umum terjadi di sekitar kita adalah ketika ada dua kemungkinan: gagal atau sukses. Mungkin saja, ada probabilitas yang tetap, misalnya probabilitas sukses. Fenomena seperti itulah yang digambarkan oleh **distribusi Bernoulli**. Apabila kita lambangkan gagal dengan angka 0 (nol) dan sukses dengan angka 1 (satu), jelas bahwa *support* untuk distribusi Bernoulli adalah $\\{0,1\\}$.\n\nApabila kita amati fenomena tersebut terjadi **berkali-kali,** misal $n$ kali, istilahnya adalah **proses Bernoulli *(Bernoulli process)***, dan tiap kali terjadi disebut ***Bernoulli trial***. Hasil proses Bernoulli digambarkan oleh **distribusi binomial**. Dalam hal ini, kita biasa memperhatikan **banyaknya kesuksesan** dari $n$ buah *trial* tersebut, sehingga *support* untuk distribusi binomial adalah $\\{0,1,2,\\dots,n\\}$.\n\nKetika kita ingin mengenali bahwa suatu fenomena tergolong proses Bernoulli, kita perlu terlebih dahulu menentukan: apa yang menjadi ukuran \"sukses\", sedemikian sehingga selain itu dianggap \"gagal\". Kemudian, kita perlu memperhatikan **asumsi proses Bernoulli** sebagai berikut:\n\n1. Fenomena atau eksperimen tersebut terdiri dari beberapa kali *trial*, maksudnya terjadi beberapa kali.\n\n2. Tiap hasil *trial* bisa tergolong \"sukses\" atau \"gagal\".\n\n3. Probabilitas sukses, biasa dilambangkan $p$, nilainya tetap sama untuk tiap *trial*.\n\n4. Semua *trial* saling bebas.\n\nProbabilitas gagal biasa dilambangkan $q$. Suatu kejadian bisa tergolong gagal ataupun sukses tetapi tidak keduanya, sehingga berlaku $p+q=1$. Maka, $q=1-p$.\n\nMari kita bahas kedua distribusi dengan satu contoh fenomena:\n\nSuatu pabrik menjalani proses inspeksi hasil produknya. Diketahui bahwa 30% dari produk yang dihasilkan ternyata cacat.\n\nDua kalimat saja, kita sudah bisa mengenali fenomena tersebut sebagai proses Bernoulli.\n\n- Kita bisa anggap \"produk cacat\" sebagai kegagalan, sehingga \"produk bagus / tidak cacat\" dianggap kesuksesan.\n\n- Perhatikan bahwa 30% produk tergolong cacat, dan itu telah kita artikan sebagai kegagalan, sehingga bisa kita artikan bahwa 30% produk \"gagal\". Sisanya adalah 70%, dan itu bisa kita artikan sebagai persentase produk \"sukses\".\n\n- Kita bisa asumsikan bahwa pabrik tersebut memang biasanya begitu, bahwa memang 30% gagal, 70% sukses. Dengan demikian, persentase tersebut bisa kita artikan sebagai probabilitas. Sehingga, probabilitas produk sukses adalah 70% yaitu 0.7 dan probabilitas produk gagal adalah 30% yaitu 0.3\n\nOleh karena itu, fenomena tersebut bisa dimodelkan oleh distribusi Bernoulli dengan $p = 0.7$. Jelas juga bahwa $q = 0.3$\n\nSekarang, kita bisa mencoba mempelajari lebih lanjut tentang fenomena tersebut melalui distribusi Bernoulli yang mewakilinya.\n\nApabila variabel acak untuk gagal atau sukses dilambangkan $X$, kita bisa tulis bahwa $X$ berdistribusi Bernoulli dengan probabilitas sukses $p$, sebagai berikut:\n\n$$X \\sim \\text{Bernoulli}(p)$$\n\nPerhatikan bahwa distribusi Bernoulli hanya ditentukan oleh nilai $p$. Nilai yang menentukan suatu bentuk distribusi, seperti $p$ di sini, disebut **parameter** untuk bentuk distribusi tersebut. Jadi, distribusi Bernoulli hanya memiliki satu parameter, yaitu probabilitas sukses.\n\nUntuk persoalan yang sedang kita pelajari, $X \\sim \\text{Bernoulli}(0.7)$\n\n### PMF\n\nIngat kembali bahwa PMF dari suatu distribusi diskrit adalah fungsi yang menunjukkan probabilitas suatu kejadian. Misalnya, untuk kejadian $x$, nilai PMF di $x$ adalah probabilitas bahwa $x$ terjadi, atau bisa ditulis\n\n$$\\text{Pr}(X = x)$$\n\nUntuk distribusi Bernoulli, hanya ada dua kemungkinan kejadian, yaitu nol (gagal) atau satu (sukses), bisa dilihat dari himpunan *support* $\\{0,1\\}$. Artinya, nilai yang mungkin untuk variabel acak $X$ hanyalah $X=0$ dan $X=1$.\n\nLagipula, kita sudah tahu bahwa probabilitas sukses adalah $p$, sehingga nilai PMF di satu (yang diartikan sebagai kesuksesan) adalah probabilitas sukses,\n\n$$\\text{Pr}(X = 1) = p$$\n\ndan nilai PMF di nol (yang diartikan sebagai kegagalan) adalah probabilias gagal, yaitu tidak sukses:\n\n$$\\begin{align*}\n\\text{Pr}(X = 0) &= q \\\\\n&= 1-p\n\\end{align*}$$\n\nKebetulan, R (melalui *package* `Rlab`) memfasilitasi fungsi PMF untuk distribusi Bernoulli, dinamakan `dbern`. Fungsi tersebut memerlukan input berupa kejadian $x$ serta parameter `prob` yaitu $p$, probabilitas sukses.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbern(0, prob = 0.7)\ndbern(1, prob = 0.7)\n```\n:::\n\n\n\nApabila kita ingin *plot* PMF dengan cepat, kita bisa tulis kode seperti berikut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupport_bern <- c(0, 1)\nplot(support_bern,\n     dbern(support_bern, prob = 0.7),\n     ylim = c(0, 1),\n     xaxp = c(x1=0, x2=1, n=1))\n```\n:::\n\n\n\n*Plot* PMF memang seperti itu, hanya terdiri dari titik-titik saja, toh PMF memang untuk distribusi diskrit. Kebetulan, secara pemrograman, kita sedang menggambar *scatter plot* di *base R*.\n\n- Opsi `ylim` seperti itu dibutuhkan untuk memaksakan rentang sumbu $y$ dari nol ke satu, karena secara umum, probabilitas bisa bernilai paling rendah nol dan paling tinggi satu.\n\n- Opsi `xaxp` menentukan pelabelan sumbu x, yaitu agar *tick* paling kiri adalah `x1=0`, *tick* paling kanan adalah `x2=1`, dan banyaknya interval di antara kedua ujung adalah `n=1` (tiap interval dibatasi dua *tick*).\n\n     Sebenarnya, menulis `xaxp = c(0, 1, 1)` saja juga sudah cukup, tanpa menulis `x1=`, `x2=`, ataupun `n=`\n\nSebagaimana *plot* di *base R* pada umumnya, kita bisa menambahkan opsi-opsi lainnya agar lebih detail dan lebih bagus.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(support_bern,\n     dbern(support_bern, prob = 0.7),\n     ylim = c(0, 1),\n     xaxp = c(0, 1, 1),\n     main = \"PMF Distribusi Bernoulli dengan p = 0.7\",\n     pch = 20,\n     cex = 2)\n```\n:::\n\n\n\n### CDF\n\nIngat kembali bahwa untuk variabel acak $X$, fungsi CDF menghitung\n\n$$\\text{Pr}(X \\leq x)$$\n\nUntuk distribusi Bernoulli, perhatikan bahwa nilai CDF di nol adalah\n\n$$\\begin{align*}\n     \\text{Pr}(X \\leq 0) &= \\text{Pr}(X = 0) \\\\\n     &= q \\\\\n     &= 1-p\n\\end{align*}$$\n\ndan nilai CDF di satu adalah\n\n$$\\begin{align*}\n     \\text{Pr}(X \\leq 1) &= \\text{Pr}(X = 0) \\\\\n                         &+ \\text{Pr}(X = 1) \\\\\n     &= (1-p) + p \\\\\n     &= 1\n\\end{align*}$$\n\nKita gunakan `dbern` untuk PMF, sehingga kita gunakan `pbern` untuk CDF, sesuai pola penamaan `d`, `p`, `q`, `r` di R.\n\nSesuai sifat CDF untuk distribusi diskrit, nilai CDF bisa dihitung secara langsung (dengan `pbern`) ataupun melalui penjumlahan PMF (dengan `dbern`). Misalnya, untuk nol:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbern(0, prob = 0.7)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbern(0, prob = 0.7)\n```\n:::\n\n\n\nSedangkan, untuk satu:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbern(1, prob = 0.7)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbern(0, prob = 0.7) +\n  dbern(1, prob = 0.7)\n```\n:::\n\n\n\nFungsi CDF juga bisa digambar *plot* nya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(support_bern,\n     pbern(support_bern, prob = 0.7),\n     ylim = c(0, 1),\n     xaxp = c(0, 1, 1),\n     main = \"CDF Distribusi Bernoulli dengan p = 0.7\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(support_bern,\n     pbern(support_bern, prob = 0.7),\n     ylim = c(0, 1),\n     xaxp = c(0, 1, 1),\n     main = \"CDF Distribusi Bernoulli dengan p = 0.7\",\n     pch = 20,\n     cex = 2)\n```\n:::\n\n\n\n### *Quantile function*\n\nIngat kembali bahwa, jika diberikan input misalnya $y$, maka fungsi kuantil, atau fungsi *inverse CDF*, mencari nilai $x$ terkecil sehingga nilai CDF minimal $y$.\n\nUntuk distribusi Bernoulli dengan $p=0.7$, perhatikan bahwa\n\n$$\\begin{align*}\n     \\text{Pr}(X \\leq 0) &= \\text{Pr}(X = 0) \\\\\n     &= q \\\\\n     &= 1-p \\\\\n     &= 1-0.7 \\\\\n     &= 0.3\n\\end{align*}$$\n\nSehingga,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqbern(0.1, prob = 0.7)\nqbern(0.2, prob = 0.7)\nqbern(0.3, prob = 0.7)\nqbern(0.4, prob = 0.7)\nqbern(0.5, prob = 0.7)\n```\n:::\n\n\n\n### RNG\n\nBangkitkan n data dari distribusi Bernoulli\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(52)\nn <- 100\nrandom_bern <- rbern(n, prob = 0.7)\nrandom_bern\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_bern_freq <- table(random_bern)\nrandom_bern_freq\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_bern_percent <- table(random_bern)/sum(table(random_bern))\nrandom_bern_percent\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_bern_plot <- barplot(random_bern_freq,\n                            ylim = c(0,100))\ntext(x = random_bern_plot,\n     y = random_bern_freq,\n     labels = random_bern_freq,\n     pos = 3)\n```\n:::\n\n\n\n## Distribusi Binomial\n\nSebagaimana yang sudah dijelaskan sebelumnya, distribusi binomial menggambarkan proses Bernoulli, yaitu percobaan gagal/sukses yang dilakukan **berkali-kali,** misalnya $n$ kali.\n\nDistribusi binomial memiliki dua parameter:\n\n- $n$, yaitu banyaknya *trial*\n\n- $p$, yaitu probabilitas sukses\n\nPerhatikan bahwa distribusi Bernoulli memiliki satu parameter saja, yaitu $p$, yang juga merupakan probabilitas sukses. Bahkan, **distribusi binomial dengan $n=1$ itu sama saja distribusi Bernoulli.**\n\nApabila suatu variabel acak $X$ berdistribusi binomial, biasa digunakan notasi\n\n$$X \\sim \\text{Binomial}(n,p)$$\n\nyang terkadang disingkat $X \\sim \\text{Binom}(n,p)$ atau $X \\sim \\text{Bin}(n,p)$ atau bahkan $X \\sim \\text{B}(n,p)$.\n\n### PMF\n\nPMF untuk distribusi $\\text{Binomial}(n,p)$ adalah\n\n$$\\begin{align*}\nb(x; n,p) &= {n \\choose x} p^x q^{n-x} \\\\\n&= {n \\choose x} p^x \\left(1-p\\right)^{n-x}\n\\end{align*}$$\n\nyang berlaku untuk perhitungan PMF di tiap nilai $x$ di ruang sampel, yaitu untuk tiap $x \\in \\{0,1,2,\\dots,n\\}$.\n\nPMF ini bisa dihitung dengan fungsi `dbinom` yang langsung tersedia dari R (bahkan tanpa *package* `Rlab`). Input yang diterima oleh `dbinom` adalah nilai $x$ yang ingin dihitung PMF nya, diikuti kedua parameter distribusi binomial, yaitu `size` atau $n$, dan `prob` atau $p$.\n\nMelanjutkan contoh inspeksi produk tadi, berikut ini kita menghitung probabilitas bahwa, dari hasil inspeksi $n=10$ buah produk, terdapat **tepat dua** produk yang bagus (sehingga tepat delapan produk cacat).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbinom(2,\n       size = 10,\n       prob = 0.7)\n```\n:::\n\n\n\nDalam hal ini, kita menghitung $\\text{Pr}(X=2)$ ketika $X \\sim \\text{Binomial}(10, 0.7)$.\n\nSeperti biasa, kita bisa membuat *plot* PDF:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupport_binom <- seq(0, 10, by = 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(support_binom,\n     dbinom(support_binom, 10, 0.7),\n     ylim = c(0, 1),\n     xaxp = c(0, 10, 10))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(support_binom,\n     dbinom(support_binom, 10, 0.7),\n     ylim = c(0, 1),\n     xaxp = c(0, 10, 10),\n     main = \"PMF Binomial(10, 0.7)\",\n     xlab = \"x\",\n     ylab = \"b(x; 10, 0.7)\",\n     pch = 20)\n```\n:::\n\n\n\n### CDF\n\nIngat kembali bahwa CDF untuk distribusi diskrit bisa dihitung dengan sumasi PMF. Maka, CDF untuk $\\text{Binomial}(n,p)$ dirumuskan sebagai berikut:\n\n$$B(r; n,p) = \\sum_{x=0}^{r} b(x; n,p)$$\n\ndengan $b(x; n,p)$ adalah nilai PMF di $x$ untuk $\\text{Binomial}(n,p)$. Kalau mau, kalian bisa membayangkan,\n\n$$\\begin{align*}\nB(r; n,p) &= b(0; n,p) \\\\\n          &+ b(1; n,p) \\\\\n          &+ b(2; n,p) \\\\\n          &+ \\dots \\\\\n          &+ b(r; n,p)\n\\end{align*}$$\n\nyaitu\n\n$$\\begin{align*}\n\\text{Pr}(X \\leq x) &= \\text{Pr}(X = 0) \\\\\n                    &+ \\text{Pr}(X = 1) \\\\\n                    &+ \\text{Pr}(X = 2) \\\\\n                    &+ \\dots \\\\\n                    &+ \\text{Pr}(X = x)\n\\end{align*}$$\n\nKalau mau juga, kita bisa saja menjabarkan rumus PMF binomial agar memperoleh:\n\n$$\\begin{align*}\nB(r; n,p) &= \\sum_{x=0}^{r} b(x; n,p) \\\\\n&= \\sum_{x=0}^{r} {n \\choose x} p^x q^{n-x} \\\\\n&= \\sum_{x=0}^{r} {n \\choose x} p^x \\left(1-p\\right)^{n-x}\n\\end{align*}$$\n\nMasih dengan hasil inspeksi $n=10$ buah produk dan probabilitas sukses $p=0.7$, berikut ini kita hitung probabilitas bahwa **paling banyak dua** produk yang bagus. Kita bisa menggunakan CDF, karena memang gunanya untuk itu,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbinom(2, size = 10, prob = 0.7)\n```\n:::\n\n\n\natau kita juga bisa menghitung PMF di 0, 1, dan 2, lalu menjumlahkannya,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbinom(0, size = 10, prob = 0.7) +\n  dbinom(1, size = 10, prob = 0.7) +\n  dbinom(2, size = 10, prob = 0.7)\n```\n:::\n\n\n\nkarena PMF adalah probabilitas di nilai tertentu saja, dan kita ingin menghitung probabilitas nilainya paling besar dua, yang ada tiga kemungkinan yaitu nilainya tepat nol, tepat satu, dan tepat dua.\n\nSecara matematis,\n\n$$\\begin{align*}\n\\text{Pr}(X \\leq 2) &= \\text{Pr}(X = 0) \\\\\n                    &+ \\text{Pr}(X = 1) \\\\\n                    &+ \\text{Pr}(X = 2)\n\\end{align*}$$\n\nSeperti biasa, kita juga bisa membuat *plot* CDF:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(support_binom,\n     pbinom(support_binom, 10, 0.7),\n     ylim = c(0, 1),\n     xaxp = c(0, 10, 10))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(support_binom,\n     pbinom(support_binom, 10, 0.7),\n     ylim = c(0, 1),\n     xaxp = c(0, 10, 10),\n     main = \"CDF Binomial(10, 0.7)\",\n     xlab = \"r\",\n     ylab = \"B(r; 10, 0.7)\",\n     pch = 20)\n```\n:::\n\n\n\n### *Quantile function*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqbinom(0.5, 10, 0.7)\nqbinom(0.6, 10, 0.7)\nqbinom(0.7, 10, 0.7)\nqbinom(0.8, 10, 0.7)\nqbinom(0.9, 10, 0.7)\nqbinom(1, 10, 0.7)\n```\n:::\n\n\n\n### RNG\n\nBangkitkan n data dari distribusi binomial\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(52)\nn <- 100\nrandom_binom <- rbinom(n, size = 10, prob = 0.7)\nrandom_binom\n```\n:::\n\n\n\nSeperti distribusi Bernoulli tadi, kita bisa membuat *bar plot* menggunakan *base R*, dengan terlebih dahulu membentuk tabel frekuensi, barulah membuat *bar plot* frekuensi dengan tiap *bar* mewakili satu nilai:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_binom_freq <- table(random_binom)\nrandom_binom_freq\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_binom_plot <- barplot(random_binom_freq,\n                             ylim = c(0,40))\ntext(x = random_binom_plot,\n     y = random_binom_freq,\n     labels = random_binom_freq,\n     pos = 3)\n```\n:::\n\n\n\nDaripada membuat *bar plot*, kita juga bisa membuat *histogram*, langsung menggunakan data aslinya daripada menggunakan tabel frekuensi, seperti berikut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(random_binom)\n```\n:::\n\n\n\nTentunya, kita juga bisa mengatur `hist` dengan berbagai opsi, sebagaimana di [Modul 3 PSD tahun 2024 ini](./modul03.qmd) ketika mempelajari fitur *plotting* di *base R*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(random_binom,\n     breaks = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(random_binom,\n     breaks = 4,\n     main = \"Histogram 100 sampel dari Binom(10, 0.7)\",\n     xlab = \"Nilai X\",\n     ylab = \"Banyaknya sampel\",\n     col = \"blue\")\n```\n:::\n\n\n\nSebenarnya, *bar plot* juga sudah termasuk *histogram*, sehingga tidak masalah apabila kalian membuat *bar plot* saja, apalagi untuk distribusi Bernoulli.\n\n## Contoh soal distribusi binomial\n\nSuatu ujian yang terdiri dari 15 pertanyaan pilihan berganda, masing-masing memiliki 5 kemungkinan jawaban dan hanya satu yang benar. Hitunglah berapa probabilitas seseorang yang menjawab secara menebak-nebak akan memperoleh\n\na. 5 sampai 10 jawaban yang benar\n\nb. Antara 5 sampai 10 jawaban yang benar\n\nc. 4 jawaban yang benar\n\nd. Lebih dari 5 jawaban yang benar\n\nJawab\n\nVariabel acak $X$ menyatakan banyaknya jawaban yang benar.\n\nPerhatikan bahwa $X$ berdistribusi binomial dengan $n=15$ dan $p=\\frac{1}{5}=0.2$\n\na. 5 sampai 10 jawaban yang benar\n\nArtinya $\\text{Pr}(5 \\leq X \\leq 10)$\n\nPerhatikan bahwa\n\n$$\\text{Pr}(5 \\leq X \\leq 10) = \\text{Pr}(X \\leq 10) - \\text{Pr}(X \\leq 4)$$\n\nSehingga kita tinggal menghitung nilai CDF di 10 dan di 4, lalu menghitung selisihnya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbinom(10, size = 15, prob = 0.2) - pbinom(4, size = 15, prob = 0.2)\n```\n:::\n\n\n\nb. Antara 5 sampai 10 jawaban yang benar\n\nArtinya $\\text{Pr}(5 < X < 10)$\n\nPerhatikan bahwa\n\n$$\\text{Pr}(5 < X < 10) = \\text{Pr}(X \\leq 9) - \\text{Pr}(X \\leq 5)$$\n\nSehingga kita tinggal menghitung nilai CDF di 9 dan di 5, lalu menghitung selisihnya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbinom(9, size = 15, prob = 0.2) - pbinom(5, size = 15, prob = 0.2)\n```\n:::\n\n\n\nc. 4 jawaban yang benar\n\nArtinya $\\text{Pr}(X=4)$\n\nTinggal hitung PMF di 4\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbinom(4, size = 15, prob = 0.2)\n```\n:::\n\n\n\nd. Lebih dari 5 jawaban yang benar\n\nArtinya $\\text{Pr}(X>5)$\n\nPerhatikan bahwa\n\n$$\\text{Pr}(X>5) = 1 - \\text{Pr}(X \\leq 5)$$\n\nSehingga kita tinggal menghitung\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 - pbinom(5, size = 15, prob = 0.2)\n```\n:::\n\n\n\n## Distribusi Poisson\n\nSebelumnya, kita telah membahas bagaimana fenomena kejadian gagal/sukses bisa dipelajari melalui distribusi Bernoulli dan distribusi binomial.\n\nKali ini, kita akan membahas distribusi Poisson, yang biasa memodelkan banyaknya kemunculan sesuatu dalam suatu rentang waktu. Contohnya, distribusi Poisson bisa memodelkan\n\n- banyaknya telpon masuk per jam di layanan *customer service*,\n\n- banyaknya tanggal merah tiap semester, dan\n\n- banyaknya kedatangan orang ke suatu acara tiap menit.\n\nMenariknya, distribusi Poisson hanya memiliki satu parameter saja, yaitu lambda atau $\\lambda$, melambangkan rata-rata kemunculannya per satuan waktu.\n\nApabila suatu variabel acak $X$ berdistribusi Poisson, biasa ditulis\n\n$$X \\sim \\text{Poisson}(\\lambda)$$\n\natau terkadang disingkat $X \\sim \\text{Pois}(\\lambda)$.\n\nVariabel acak $X$ dalam hal ini melambangkan banyaknya kemunculan tersebut. Sehingga, ketika kita menuliskan misalnya\n\n$$\\text{Pr}(X=3)$$\n\nartinya adalah probabilitas kemunculan **tepat tiga kali** di suatu satuan waktu, misalnya di satu jam, di satu semester, di satu menit, atau satuan waktu lainnya, tergantung konteks permasalahan (lebih tepatnya tergantung satuan si $\\lambda$).\n\n### PMF\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndpois(0, lambda = 2)\ndpois(1, lambda = 2)\ndpois(2, lambda = 2)\ndpois(3, lambda = 2)\ndpois(4, lambda = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx_pois <- seq(0, 10, by = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x_pois,\n     dpois(x_pois, lambda = 2),\n     ylim = c(0, 1),\n     xaxp = c(0, 10, 10))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x_pois,\n     dpois(x_pois, lambda = 2),\n     ylim = c(0, 1),\n     xaxp = c(0, 10, 10),\n     main = \"PMF Poisson(2)\",\n     xlab = \"x\",\n     ylab = \"p(x; 2t)\",\n     pch = 20)\n```\n:::\n\n\n\n### CDF\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppois(3, lambda = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndpois(0, lambda = 2) +\n  dpois(1, lambda = 2) +\n  dpois(2, lambda = 2) +\n  dpois(3, lambda = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x_pois,\n     dpois(x_pois, lambda = 2),\n     ylim = c(0, 1),\n     xaxp = c(0, 10, 10))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x_pois,\n     ppois(x_pois, lambda = 2),\n     ylim = c(0, 1),\n     xaxp = c(0, 10, 10),\n     main = \"CDF Poisson(2)\",\n     xlab = \"r\",\n     ylab = \"P(r; 2t)\",\n     pch = 20)\n```\n:::\n\n\n\n### *Quantile function*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpois(0.1, lambda = 2)\nqpois(0.2, lambda = 2)\nqpois(0.3, lambda = 2)\nqpois(0.4, lambda = 2)\nqpois(0.5, lambda = 2)\n```\n:::\n\n\n\n### RNG\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(55)\nn <- 100\nrandom_pois <- rpois(n, lambda = 2)\nrandom_pois\n```\n:::\n\n\n\nLagi-lagi, kita bisa membuat tabel frekuensi dan *bar plot* darinya,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_pois_freq <- table(random_pois)\nrandom_pois_freq\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_pois_plot <- barplot(random_pois_freq,\n                            ylim = c(0,40))\ntext(x = random_pois_plot,\n     y = random_pois_freq,\n     labels = random_pois_freq,\n     pos = 3)\n```\n:::\n\n\n\natau juga bisa langsung membuat *histogram*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(random_pois)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(random_pois,\n     breaks = 3)\n```\n:::\n\n\n\nIngat bahwa *bar plot* sebenarnya sudah termasuk *histogram*.\n\n# (Pengayaan) Visualisasi Distribusi Diskrit dengan ggplot2\n\n*(work in progress)*\n\n# Distribusi Diskrit dengan `distr`\n\nAda suatu *package* bernama `distr` yang menawarkan pendekatan agak berbeda daripada *base R* dalam hal distribusi. Daripada fungsi-fungsi terpisah untuk tiap kemungkinan **awalan** `d`..., `p`..., `q`..., dan `r`... sebagaimana di *base R*, kita malah bisa membuat suatu \"benda\" atau \"objek\" distribusi, yang kemudian bisa diterapkan keempat fungsi **satu huruf** berikut: `d`, `p`, `q`, dan `r`.\n\nBahkan, dengan pendekatan ini, kita bisa dengan cukup mudah membuat distribusi kita sendiri.\n\nSeperti biasa, silakan instal terlebih dahulu *package* `distr` apabila belum,\n\n```\ninstall.packages(\"distr\")\n```\n\nkemudian jangan lupa aktifkan:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"distr\")\n```\n:::\n\n\n\n## Membuat distribusi diskrit sendiri\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupp1 <- c(1, 2, 3)\nprob1 <- c(0.3, 0.4, 0.3)\ndist1 <- DiscreteDistribution(supp = supp1, prob = prob1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dist1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd(dist1)(1)\nd(dist1)(2)\nd(dist1)(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np(dist1)(1)\np(dist1)(2)\np(dist1)(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nq(dist1)(0.6)\nq(dist1)(0.7)\nq(dist1)(0.8)\nq(dist1)(0.9)\nq(dist1)(1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nn <- 100\nrandom_dist1 <- r(dist1)(n)\nrandom_dist1\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_dist1_freq <- table(random_dist1)\nrandom_dist1_freq\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_dist1_plot <- barplot(random_dist1_freq,\n                             ylim = c(0,50))\ntext(x = random_dist1_plot,\n     y = random_dist1_freq,\n     labels = random_dist1_freq,\n     pos = 3)\n```\n:::\n\n\n\n## Ekspektasi dan Variansi\n\n```\ninstall.packages(\"distrEx\")\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"distrEx\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nE(dist1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(dist1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsupp2 <- c(0, 1, 2, 3, 4)\nprob2 <- c(0.2, 0.1, 0.3, 0.3, 0.1)\ndist2 <- DiscreteDistribution(supp = supp2, prob = prob2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dist2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nE(dist2)\nvar(dist2)\n```\n:::\n\n\n\nPerhatikan bahwa ekspektasi dari `dist1` maupun `dist2` sama,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nE(dist1)\nE(dist2)\n```\n:::\n\n\n\ntetapi variansinya berbeda:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(dist1)\nvar(dist2)\n```\n:::\n\n\n\n## Distribusi Binomial\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist3 <- Binom(size = 15, prob = 0.2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dist3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nE(dist3)\nvar(dist3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd(dist3)(9)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np(dist3)(9)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nq(dist3)(0.7)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(122)\nn <- 100\nrandom_dist3 <- r(dist3)(n)\nrandom_dist3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_dist3_freq <- table(random_dist3)\nrandom_dist3_freq\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_dist3_plot <- barplot(random_dist3_freq,\n                             ylim = c(0,40))\ntext(x = random_dist3_plot,\n     y = random_dist3_freq,\n     labels = random_dist3_freq,\n     pos = 3)\n```\n:::\n\n\n\n## Distribusi Poisson\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist4 <- Pois(lambda = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dist4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nE(dist4)\nvar(dist4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd(dist4)(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np(dist4)(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nq(dist4)(0.7)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(55)\nn <- 100\nrandom_dist4 <- r(dist4)(n)\nrandom_dist4\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_dist4_freq <- table(random_dist4)\nrandom_dist4_freq\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_dist4_plot <- barplot(random_dist4_freq,\n                             ylim = c(0,40))\ntext(x = random_dist4_plot,\n     y = random_dist4_freq,\n     labels = random_dist4_freq,\n     pos = 3)\n```\n:::\n\n\n\n## Distribusi *Uniform* Diskrit\n\nUmum dibahas dalam pengantar statistik adalah probabilitas dadu. Jelas, dadu dengan 6 (enam) sisi memiliki probabilitas $\\frac{1}{6}$ untuk kemunculan tiap angka 1, 2, 3, 4, 5, 6. Perhatikan bahwa *support* dalam hal ini adalah $\\{1,2,3,4,5,6\\}$, yang terdiri dari 6 elemen. Probabilitas $\\frac{1}{6}$ ini **sama** atau **seragam**, dan distribusi yang bersangkutan disebut **distribusi *uniform* diskrit**.\n\nDistribusi *uniform* diskrit memiliki satu parameter saja, yaitu $k$, banyaknya elemen di *support*. PMFnya bisa ditulis\n\n$$\\text{Pr}(X=x) = \\begin{cases}\n     \\frac{1}{k} & x \\in \\text{ support} \\\\\n     0 & x \\text{ lainnya}\n\\end{cases}$$\n\ndan CDF bisa dihitung dari penjumlahan PMF hingga $x$ yang diminta.\n\nCara membuat distribusi *uniform* diskrit dengan `distr` agak manual, tetapi tidak sulit. Intinya membuat distribusi sendiri, tetapi tiap nilai di *support* (misal terdiri dari $k$ elemen) memiliki probabilitas yang **sama** yaitu $\\frac{1}{k}$, sehingga jumlah semua probabilitasnya adalah satu (berdasarkan sifat probabilitas).\n\nIstilah ***uniform*** atau **\"seragam\"** di sini artinya **kesamaan probabilitas** untuk tiap nilai di *support*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupp5 <- c(1, 2, 3, 4, 5, 6)\nk <- length(supp5)\nprob5 <- rep(1/k, k) # 1/k sebanyak k kali\ndist5 <- DiscreteDistribution(supp5, prob5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dist5)\n```\n:::\n\n\n\nSemua nilai PMF sama:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd(dist5)(1)\nd(dist5)(2)\nd(dist5)(3)\nd(dist5)(4)\nd(dist5)(5)\nd(dist5)(6)\n```\n:::\n\n\n\nNilai CDF terlihat kumulatif terus bertambah:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np(dist5)(1)\np(dist5)(2)\np(dist5)(3)\np(dist5)(4)\np(dist5)(5)\np(dist5)(6)\n```\n:::\n\n\n\nFungsi kuantil atau *inverse CDF* juga bisa dihitung:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq(dist5)(1/6)\nq(dist5)(2/6)\nq(dist5)(3/6)\nq(dist5)(4/6)\nq(dist5)(5/6)\nq(dist5)(1)\n```\n:::\n\n\n\nKita juga bisa membangkitkan n data *random* dari distribusi *uniform* diskrit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(56)\nn <- 120\nrandom_dist5 <- r(dist5)(n)\nrandom_dist5\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_dist5_freq <- table(random_dist5)\nrandom_dist5_freq\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_dist5_plot <- barplot(random_dist5_freq,\n                             ylim = c(0,40))\ntext(x = random_dist5_plot,\n     y = random_dist5_freq,\n     labels = random_dist5_freq,\n     pos = 3)\n```\n:::\n\n\n\n(Pengayaan) Berikut ini, kita bisa saja membuat fungsi umum untuk memperoleh distribusi *uniform* diskrit, agar cukup menyediakan *support* saja:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDiscreteUniform <- function(supp) {\n     supp2 <- unique(supp) # hilangkan duplikat\n     k <- length(supp2)\n     prob <- rep(1/k, k)\n     DiscreteDistribution(supp2, prob) # return value\n}\n```\n:::\n\n\n\nSehingga bisa digunakan seperti berikut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupp6 <- c(1, 2, 3, 4, 5, 6)\ndist6 <- DiscreteUniform(supp6)\n```\n:::\n\n\n\nDengan demikian, `dist6` sekarang bisa di-*plot* ataupun diterapkan fungsi `d`, `p`, `q`, dan `r` seperti biasa, juga dihitung ekspektasi dan variansinya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dist6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd(dist6)(4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np(dist6)(4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nE(dist6)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(dist6)\n```\n:::\n\n\n\n## Kekonvergenan distribusi binomial ke distribusi Poisson\n\nMisalkan kita punya distribusi $\\text{Binomial}(n,p)$ dan distribusi $\\text{Poisson}(\\lambda)$.\n\nMisalkan pula, ternyata $\\lambda = np$. Yaitu, rata-rata dari distribusi binomial tersebut sama dengan rata-rata dari distribusi Poisson tersebut.\n\nKita pilih saja, misalnya $\\lambda = 1$ dan $n=2$ sehingga $p=\\frac{1}{2}$. Mari kita *plot* keduanya:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Pois(1))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Binom(size = 2, prob = 1/2))\n```\n:::\n\n\n\nSangat berbeda, ya! Tapi ternyata, jika $n \\to \\infty$ dan $p \\to 0$ dengan tetap mempertahankan $\\lambda = np$, maka bentuk (PMF) distribusi $\\text{Binomial}(n,p)$ akan **konvergen** ke bentuk (PMF) distribusi $\\text{Poisson}(\\lambda)$.\n\nMari kita lihat. Kita perlukan $\\lambda = np$, dengan $\\lambda$ tetap (misalnya 1), dan kita akan terus membesarkan $n$, maka nilai $p$ akan menyesuaikan yaitu $p = \\frac{\\lambda}{n}$.\n\nKita coba buat $n$ makin besar, dan nilai $p$ selalu menyesuaikan yaitu $p = \\frac{\\lambda}{n}$. Kita coba *plot* terus...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Binom(size = 3, prob = 1/3))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Binom(size = 5, prob = 1/5))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Binom(size = 10, prob = 1/10))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Binom(size = 20, prob = 1/20))\n```\n:::\n\n\n\nWow! Mari kita bandingkan lagi dengan $\\text{Poisson}(\\lambda)$:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Pois(1))\n```\n:::\n\n\n\nSangat mirip, ya! Kalian bisa mencoba hal yang sama dengan nilai $\\lambda$ yang lain, terus membesarkan $n$, nilai $p$ selalu menyesuaikan yaitu $p = \\frac{\\lambda}{n}$, dan pada akhirnya, akan terlihat juga bahwa bentuk PMF $\\text{Binomial}(n,p)$ konvergen ke bentuk PMF $\\text{Poisson}(\\lambda)$.\n\n# (Pengayaan) Distribusi Multinomial\n\n*(work in progress)*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}