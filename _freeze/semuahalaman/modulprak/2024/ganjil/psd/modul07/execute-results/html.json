{
  "hash": "cb2eb01bf10eebb98982d239db4a361a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"(Pertemuan 07) Distribusi Sampling di R\"\nsubtitle: \"Sampling Distributions in R\"\ndescription: \"Offline di Departemen Matematika\"\ndate: 11/04/2024\npage-navigation: true\nformat: html\n---\n\n\n\nKembali ke [Pengantar Sains Data](./psd2024.qmd)\n\nKebetulan, materi modul kali ini adalah revisi dari [modul PSD tahun lalu](../../../2023/ganjil/psd/Pekan%203/modul3.qmd).\n\nDalam menganalisis suatu populasi secara statistik, apabila populasinya tidak kecil, realitanya kita tidak bisa memperoleh data yang benar-benar lengkap tentang keseluruhan populasi tersebut. Kita hanya bisa mengambil **sampel**, yaitu *subset* dari populasi. Sampel yang kita ambil diharapkan cukup \"mewakili\" data populasi, yaitu nilai-nilai statistiknya (baik ukuran pemusatan data, seperti rata-rata, maupun ukuran persebaran/keragaman data, seperti variansi) tidak berbeda jauh.\n\n(Metode-metode pengambilan sampel dengan baik dipelajari di mata kuliah Sampling dan Rancangan Survey.)\n\nMaksud istilah \"statistik\" di sini adalah perhitungan yang bisa dilakukan pada sembarang sampel. Misalnya, sampel apapun bisa dihitung rata-ratanya ataupun variansinya, sehingga rata-rata dan variansi termasuk statistik. Perhatikan bahwa \"sampel\" berupa sekumpulan data, bukan satu titik data saja.\n\nNilai statistik bergantung pada sampel. Dengan demikian, statistik bisa dipandang sebagai variabel acak, sehingga memiliki distribusi. Distribusi dari suatu statistik disebut ***sampling distribution*** atau **distribusi *sampling***.\n\nContoh: distribusi dari rata-rata disebut **distribusi *sample mean***.\n\nSebagaimana distribusi pada umumnya, distribusi *sampling* sebenarnya menggambarkan probabilitas memperoleh nilai statistik tertentu. Misalnya, distribusi *sample mean* menggambarkan probabilitas memperoleh nilai rata-rata tertentu dari sampel yang kebetulan kita miliki.\n\nDengan demikian, sejatinya, kita bisa membentuk distribusi *sampling* dengan **mencoba semua kemungkinan sampel** serta mendata probabilitas memperoleh tiap sampel tersebut, kemudian menghitung statistiknya untuk tiap sampel, barulah mendata semua nilai yang mungkin untuk statistik tersebut beserta probabilitasnya.\n\nNamun, karena ada amat sangat banyak kemungkinan sampel, seringkali kita malah **memperkirakan** bentuk distribusi *sampling* tersebut melalui **simulasi**, yaitu mencoba mengambil sampel berkali-kali secara *random*, kemudian menghitung statistiknya di tiap sampel, barulah membentuk distribusi dari statistik tersebut.\n\nBagaimanapun juga, ketika membahas distribusi *sampling*, yang melibatkan pengambilan sampel hingga berkali-kali, tentu ada semacam konsep pengulangan.\n\nJangan lupa bahwa R adalah bahasa pemrograman, sehingga juga memiliki fitur pernyataan berulang, sebagaimana yang kalian pelajari di mata kuliah Algoritma dan Pemrograman, seperti di Python yang kalian pelajari di mata kuliah Praktikum Algoritma dan Pemrograman. Sebelum mempelajari distribusi *sampling* di R, kita perlu membahas itu dulu.\n\n# Pengulangan *(looping)* di R\n\n## *For loop*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (k in 1:5) {\n  print(k*2)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (k in 1:5) {\n  print(runif(1, min = 25, max = 100))\n}\n```\n:::\n\n\n\n## Fungsi `replicate`\n\n::: {.callout-warning}\nSintaks/penulisan kode seperti di bawah ini, yaitu dengan fungsi `replicate`, hanya berlaku di bahasa pemrograman R.\n\n**Jangan gunakan `replicate` di mata kuliah Algoritma dan Pemrograman!**\n:::\n\nMengeksekusi ulang fungsi/perintah yang diberikan, sebanyak yang kita minta, tanpa harus membuat *for loop*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreplicate(5,\n          runif(1, min = 25, max = 100))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nreplicate(5,\n          runif(3, min = 25, max = 100))\n```\n:::\n\n\n\n## (Pengayaan) *While loop*, pernyataan kondisional\n\n*(work in progress)*\n\n# Distribusi *Sample Mean*\n\nUntuk mempermudah urusan distribusi, mari kita aktifkan *package* `distr` dan `distrEx` yang sudah kita kenal sebelumnya\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"distr\")\nlibrary(\"distrEx\")\n```\n:::\n\n\n\n## Dengan melakukan simulasi\n\nMisalkan kita punya suatu populasi seperti berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopu1 <- 1:8\npopu1\n```\n:::\n\n\n\nKita bisa saja membentuk distribusi dari populasi tersebut, dengan pertama membuat tabel frekuensi,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopu1_freq <- table(popu1)\npopu1_freq\n```\n:::\n\n\n\nKemudian membagi tiap nilai di tabelnya dengan total frekuensi, agar memperoleh tabel probabilitas (yang menjadi tabel PMF):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopu1_prob <- popu1_freq/sum(popu1_freq)\npopu1_prob\n```\n:::\n\n\n\nKita bisa peroleh baris pertama (nilai-nilai yang mungkin),\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(popu1_prob)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(names(popu1_prob))\n```\n:::\n\n\n\nSehingga kita bisa membentuk distribusi populasi tersebut dengan `distr` seperti berikut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupp1 <- as.numeric(names(popu1_prob))\nprob1 <- popu1_prob\ndist1 <- DiscreteDistribution(supp = supp1,\n                              prob = prob1)\n```\n:::\n\n\n\nKita bisa peroleh kembali *support* dan sebaran probabilitasnya seperti berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupport(dist1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprob(dist1)\n```\n:::\n\n\n\nKita bisa melihat sebarannya:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nE(dist1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(dist1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dist1)\n```\n:::\n\n\n\nSekarang, mari kita coba mengambil berbagai ukuran sampel dari populasi tersebut, dengan pengembalian. Secara pemrograman, kita bisa langsung mengambil sampel dari `popu1`, atau bisa juga mengambil sampel dari distribusi `dist1` yang bersesuaian. Pengambilan sampel yang berkali-kali itu bisa dilakukan dengan *for loop* ataupun dengan fungsi `replicate`\n\n::: {.panel-tabset}\n\n## Dengan `replicate`, dari populasi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(211)\n```\n:::\n\n\n\nSample size 3, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <-\n  replicate(\n    1000,\n    mean(\n      sample(x = popu1,\n             size = 3,\n             replace = TRUE)))\n\nhist(sample_means,\n     main = \"Sample Size of 3\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\nSample size 10, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <-\n  replicate(\n    1000,\n    mean(\n      sample(x = popu1,\n             size = 10,\n             replace = TRUE)))\n\nhist(sample_means,\n     main = \"Sample Size of 10\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\nSample size 50, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <-\n  replicate(\n    1000,\n    mean(\n      sample(x = popu1,\n             size = 50,\n             replace = TRUE)))\n\nhist(sample_means,\n     main = \"Sample Size of 50\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\n## Dengan `replicate`, dari distribusi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(211)\n```\n:::\n\n\n\nSample size 3, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <-\n  replicate(\n    1000,\n    mean(\n      sample(x = support(dist1),\n             prob = prob(dist1),\n             size = 3,\n             replace = TRUE)))\n\nhist(sample_means,\n     main = \"Sample Size of 3\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\nSample size 10, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <-\n  replicate(\n    1000,\n    mean(\n      sample(x = support(dist1),\n             prob = prob(dist1),\n             size = 10,\n             replace = TRUE)))\n\nhist(sample_means,\n     main = \"Sample Size of 10\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\nSample size 50, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <-\n  replicate(\n    1000,\n    mean(\n      sample(x = support(dist1),\n             prob = prob(dist1),\n             size = 50,\n             replace = TRUE)))\n\nhist(sample_means,\n     main = \"Sample Size of 50\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\n## Dengan *for loop*, dari populasi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(211)\n```\n:::\n\n\n\nSample size 3, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor (i in 1:1000) {\n  sample_means[i] <-\n    mean(\n      sample(x = popu1,\n             size = 3,\n             replace = TRUE))\n}\n\nhist(sample_means,\n     main = \"Sample Size of 3\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\nSample size 10, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor (i in 1:1000) {\n  sample_means[i] <-\n    mean(\n      sample(x = popu1,\n             size = 10,\n             replace = TRUE))\n}\n\nhist(sample_means,\n     main = \"Sample Size of 10\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\nSample size 50, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor (i in 1:1000) {\n  sample_means[i] <-\n    mean(\n      sample(x = popu1,\n             size = 50,\n             replace = TRUE))\n}\n\nhist(sample_means,\n     main = \"Sample Size of 50\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\n## Dengan *for loop*, dari distribusi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(211)\n```\n:::\n\n\n\nSample size 3, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor (i in 1:1000) {\n  sample_means[i] <-\n    mean(\n      sample(x = support(dist1),\n             prob = prob(dist1),\n             size = 3,\n             replace = TRUE))\n}\n\nhist(sample_means,\n     main = \"Sample Size of 3\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\nSample size 10, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor (i in 1:1000) {\n  sample_means[i] <-\n    mean(\n      sample(x = support(dist1),\n             prob = prob(dist1),\n             size = 10,\n             replace = TRUE))\n}\n\nhist(sample_means,\n     main = \"Sample Size of 10\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\nSample size 50, 1000 kali percobaan\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_means <- c( )\nfor (i in 1:1000) {\n  sample_means[i] <-\n    mean(\n      sample(x = support(dist1),\n             prob = prob(dist1),\n             size = 50,\n             replace = TRUE))\n}\n\nhist(sample_means,\n     main = \"Sample Size of 50\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\n:::\n\nJika dilihat berdasarkan histogram dari ketiga *sampling* tadi, bisa terlihat bahwa semakin besar ukuran sampelnya, maka distribusi *sample mean* akan semakin mendekati distribusi normal\n\n## Dengan melihat semua kemungkinan\n\nDaripada melakukan simulasi yang mengandalkan *random*, untuk ukuran sampel yang cukup kecil, kita bisa saja melihat semua kemungkinan pengambilan sampel, menghitung statistiknya (misalnya di sini statistik rata-rata), lalu menghitung probabilitasnya, untuk memperoleh distribusi *sampling* untuk statistik tersebut (misalnya di sini distribusi *sample mean*) secara eksak.\n\nKita akan meninjau semua kemungkinan pengambilan dua sampel dengan pengembalian. Untuk itu, kita memerlukan *package* `gtools` yang menyediakan fungsi-fungsi kombinatorik seperti `permutations` dan `combinations` untuk memperoleh semua kemungkinan seperti itu\n\n```\ninstall.packages(\"gtools\")\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"gtools\")\n```\n:::\n\n\n\nMari kita coba untuk populasi yang berdistribusi diskrit berhingga. Distribusi tersebut bisa kita buat sendiri, misalnya sebagai berikut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupp2 <- c(0, 1, 2, 3)\nprob2 <- c(1/4, 1/4, 1/4, 1/4)\ndist2 <- DiscreteDistribution(supp = supp2,\n                              prob = prob2)\nplot(dist2)\n```\n:::\n\n\n\n(Sebenarnya `dist2` ini juga bisa berupa distribusi Bernoulli, binomial, ataupun distribusi diskrit lainnya.)\n\nKita bisa menghasilkan semua kemungkinan sampel berukuran 2 dengan pengembalian, menggunakan fungsi `permutations` dari *package* `gtools`, sebagai berikut:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat2 <- permutations(n = length(support(dist2)),\n                     r = 2, # ukuran sampel\n                     v = support(dist2),\n                     repeats.allowed = TRUE)\nmat2\n```\n:::\n\n\n\nHasilnya berupa matriks, yang bisa kita ubah jadi *data frame*,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_perm2 <- data.frame(mat2)\ndf_perm2\n```\n:::\n\n\n\nKemudian, kita ingin menghitung rata-rata dari tiap kemungkinan dua sampel. Kita bisa *apply* atau menerapkan fungsi statistik yang kita inginkan, misalnya `mean` atau rata-rata, untuk tiap baris di matriks `mat2`, sebagai berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(mat2, 1, mean)\n```\n:::\n\n\n\nHasilnya bisa kita simpan sebagai kolom baru di *data frame*, misal kolom `Xbar`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_perm2[\"Xbar\"] <- apply(mat2, 1, mean)\ndf_perm2\n```\n:::\n\n\n\nSekarang, `df_perm2` menyimpan semua kemungkinan sampel berukuran 2 dengan pengembalian yang mungkin, disertai rata-rata masing-masing.\n\nSelanjutnya, kita perlu menghitung probabilitas dari tiap kemungkinan sampel. Perhatikan bahwa, karena *sampling* dilakukan **dengan pengembalian**, probabilitas antar tiap pengambilan bersifat **independen**. Sehingga, kita tinggal mengalikan probabilitas untuk masing-masing pengambilan.\n\nCaranya, kita bisa menghitung probabilitas masing-masing pengambilan (membuat matriks baru, misal `mat2_prob`), baru melakukan perkalian per baris.\n\nKarena distribusi `dist2` tergolong diskrit, kita bisa menerapkan PMFnya yaitu fungsi `d`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd(dist2)(mat2)\n```\n:::\n\n\n\nWaduh, hasilnya malah *flat*, daripada berbentuk matriks. Agar tetap berbentuk matriks, kita gunakan fungsi `apply` lagi, sebagai berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat2_prob <- apply(mat2, 1:2, d(dist2))\nmat2_prob\n```\n:::\n\n\n\nSekarang kita tinggal mengalikan tiap baris (dengan `apply` lagi), dan menyimpan hasilnya sebagai kolom baru di *data frame*, misal `prob`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_perm2[\"prob\"] <- apply(mat2_prob, 1, prod)\ndf_perm2\n```\n:::\n\n\n\nKini, tiap kemungkinan sampel berukuran 2 dengan pengembalian sudah disertai rata-rata dan probabilitas. Untuk memperoleh tabel (PMF untuk) distribusi *sample mean*, kita tinggal melakukan \"pengelompokkan\" data untuk tiap nilai statistiknya yaitu `Xbar` atau rata-rata, sembari menjumlahkan probabilitas. Caranya bisa dengan kode seperti berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nXbar_prob2 <- aggregate(prob ~ Xbar,\n                        data = df_perm2,\n                        sum)\nXbar_prob2\n```\n:::\n\n\n\n`Xbar_prob2` adalah tabel PMF dari *sample mean*, yang telah diperoleh secara eksak. Mari kita visualisasikan distribusi *sample mean* tersebut menggunakan *histogram*, tetapi dengan fungsi `barplot` agar tiap nilai rata-rata memiliki bar tersendiri\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(height = Xbar_prob2[[\"prob\"]],\n        names.arg = Xbar_prob2[[\"Xbar\"]],\n        ylim = c(0, 5/16),\n        yaxp = c(0, 5/16, 5))\n```\n:::\n\n\n\nOh iya, karena *sample mean* berupa distribusi, kita juga bisa menggunakan `distr` lagi untuk membentuk distribusinya (karena kita sudah punya tabel PMFnya).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_dist2 <-\n  DiscreteDistribution(supp = Xbar_prob2[[\"Xbar\"]],\n                       prob = Xbar_prob2[[\"prob\"]])\nprob(mean_dist2)\n```\n:::\n\n\n\nSehingga, kita bisa menghitung ekspektasi dan variansinya serta membuat *plot*, seperti berikut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nE(mean_dist2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(mean_dist2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mean_dist2)\n```\n:::\n\n\n\nWhew! Perhatikan bahwa, untuk sampel berukuran 2, ternyata kemungkinannya cukup banyak. Lihat kembali dimensi dari `mat2` yaitu matriks berisi semua kemungkinan sampel berukuran 2 dengan pengembalian:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(mat2)\n```\n:::\n\n\n\nBanyaknya baris bisa sampai 16 ini dihasilkan dari rumus banyaknya permutasi dengan pengulangan *(permutations with repitition)*, yaitu\n\n$$n^r = 4^2 = 16$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4^2\n```\n:::\n\n\n\nDengan 4 adalah ukuran *support* di distribusi asalnya, dan 2 adalah ukuran sampel. Ini masih contoh kecil.\n\nBayangkan apabila ukuran sampelnya besar. Maka banyaknya kemungkinan pengambilan menjadi amat sangat banyak. Terlalu banyak, sehingga lebih baik kita lakukan suatu penghampiran daripada langsung menghitung distribusi *sample mean* secara eksak.\n\nUntuk itu, perhatikan dalil-dalil berikut.\n\n## Dalil 1: Dengan Pengembalian\n\n**Dalil 1**\n\nApabila sampel acak berukuran $n$ diambil **dengan pengembalian** dari populasi berhingga yang berukuran $N$, dimana populasi tersebut mempunyai *mean* $\\mu$ dan variansi $\\sigma^2$ , maka untuk $n$ yang besar, distribusi dari *sample mean* $\\bar{X}$ akan mendekati distribusi normal $N\\left(\\mu_{\\bar{X}}, \\sigma_{\\bar{X}}^2\\right)$ dengan *mean* dan variansi berikut:\n\n$$\\mu_{\\bar{X}} = \\mu$$\n\n$$\\sigma_{\\bar{X}}^2 = \\frac{\\sigma^2}{n}$$\n\nDengan demikian,\n\n$$Z = \\frac{\\bar{X} - \\mu}{\\left(\\frac{\\sigma}{\\sqrt{n}}\\right)} \\; \\text{mendekati} \\; N(0,1)$$\n\nCatatan: Dalil 1 berlaku untuk populasi berhingga dengan **ukuran sampel** $\\mathbf{n \\geq 30}$. Dalil 1 berlaku untuk $n < 30$ apabila distribusi dari populasinya tidak terlalu menyimpang dari distribusi normal.\n\n**Contoh**\n\nMisalkan diberikan populasi 1,1,1,3,4,5,6,6,6,7 dan misalkan diambil sampel acak berukuran 36 dari populasi tersebut dengan pengembalian. Tentukan probabilitas bahwa nilai rata-rata sampelnya antara 3.85 dan 4.45 !\n\nJawab:\n\nSebut saja populasi yang diberikan berdistribusi $X$. Distribusi *sample mean* yang bersesuaian dilambangkan $\\bar{X}$. Soal meminta\n\n$$\\text{Pr}\\left(3.85 < \\bar{X} < 4.45\\right)$$\n\nKita akan menghampiri distribusi $\\bar{X}$ dengan suatu distribusi normal, sesuai yang ditentukan oleh Dalil 1. Kita definisikan dulu populasinya:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopu3 <- c(1, 1, 1, 3, 4,\n           5, 6, 6, 6, 7)\n```\n:::\n\n\n\nMisal $n$ adalah ukuran sampel\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn3 <- 36\n```\n:::\n\n\n\nKita hitung statistik dari populasinya\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx3_mean <- mean(popu3)\nx3_sd <- sd(popu3)\n```\n:::\n\n\n\nVariansi adalah kuadrat dari *standard deviation*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx3_var <- x3_sd^2\n```\n:::\n\n\n\nMemanfaatkan Dalil 1, kita bisa anggap rata-rata populasi $\\mu$ sebagai rata-rata dari suatu distribusi normal, dan variansi populasi $\\sigma^2$ yang kemudian dibagi $n$ menghasilkan variansi dari distribusi normal tersebut, yang akan dihampiri oleh (ataupun menghampiri) distribusi *sample mean*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbar3_mean <- x3_mean\nxbar3_var <- x3_var / n3\n```\n:::\n\n\n\nKita juga bisa menghitung *standard deviation* sebagai akar dari variansi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbar3_sd <- sqrt(xbar3_var)\n```\n:::\n\n\n\nSekarang kita hitung probabilitas yang diminta untuk distribusi *sample mean*, tetapi melalui distribusi normal tersebut (yaitu distribusi normal yang didekati oleh distribusi *sample mean* tersebut)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprob3 <-\n  pnorm(4.45, mean = xbar3_mean, sd = xbar3_var) -\n    pnorm(3.85, mean = xbar3_mean, sd = xbar3_var)\nprob3\n```\n:::\n\n\n\nAtau bisa kita ubah ke normal standar terlebih dahulu\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstandard_error <- x3_sd / sqrt(n3)\nxbar3_lower <- 3.85\nxbar3_upper <- 4.45\nz3_lower <- (xbar3_lower - x3_mean) / standard_error\nz3_upper <- (xbar3_upper - x3_mean) / standard_error\nprob3_z <- pnorm(z3_upper) - pnorm(z3_lower)\nprob3_z\n```\n:::\n\n\n\nBagaimanapun juga, walaupun kita malah menghitung probabilitas menggunakan distribusi normal yang ditentukan di Dalil 1, kira-kira segitulah probabilitasnya di distribusi *sample mean* yang sebenarnya kita inginkan. Itulah manfaat dari Dalil 1, daripada harus bersusah payah membentuk distribusi *sample mean* terlebih dahulu.\n\n## Dalil 2: Tanpa Pengembalian\n\n**Lalu bagaimana kalau tanpa pengembalian?** Misalkan kita punya suatu populasi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopu4 <- c(1:50)\npopu4\n```\n:::\n\n\n\nLihat sebarannya\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(popu4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(popu4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(popu4, main = \"Distribusi Uniform Diskrit\", xlab = \" \")\n```\n:::\n\n\n\nSample size 30, 1000 kali percobaan\n\n::: {.panel-tabset}\n\n## Dengan `replicate`, dari populasi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(623)\nsample_means <- \n  replicate(\n    1000,\n    mean(\n      sample(50,\n             30,\n             replace = FALSE)))\n\nhist(sample_means,\n     main = \"Sample Size of 50\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\n## Dengan *for loop*, dari populasi\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(623)\nsample_means <- c( )\nfor (i in 1:1000) {\n  sample_means[i] <-\n    mean(\n      sample(50,\n             30,\n             replace = FALSE))\n}\n\nhist(sample_means,\n     main = \"Sample Size of 50\",\n     xlab = \"Sample Means\")\n```\n:::\n\n\n\n:::\n\nDapat terlihat juga bahwa bentuk distribusinya mirip dengan distribusi normal! Akan tetapi, rumus rata-rata dan variansi untuk distribusi normal tersebut agak berbeda (karena kali ini **tanpa pengembalian**), lihat Dalil 2 berikut!\n\n**Dalil 2**\n\nApabila sampel acak berukuran $n$ diambil secara acak **tanpa pengembalian** dari suatu populasi berhingga berukuran $N$, dimana populasi tersebut memiliki *mean* $\\mu$ dan variansi $\\sigma^2$, maka distribusi probabilitas $\\bar{X}$ *(sample mean)* akan menghampiri distribusi normal $N\\left(\\mu_{\\bar{X}}, \\sigma_{\\bar{X}}^2\\right)$, dengan\n\n$$\\mu_{\\bar{X}} = \\mu$$\n\n$$\\sigma_{\\bar{X}}^2 = \\frac{\\sigma^2(N-n)}{n(N-1)}$$\n\nCatatan: lagi-lagi, ada syarat $n \\geq 30$\n\nSecara umum, jika sampel yang diambil sangat besar (yaitu $n \\geq 30$) maka bisa digunakan **CLT** atau ***Central Limit Theorem***, juga disebut **Dalil Limit Pusat**\n\n# *Central Limit Theorem* (CLT)\n\nSemakin besar $n$, yaitu ukuran dari sampel yang diambil (misalkan sampelnya memiliki rata-rata $\\mu$ dan variansi $\\sigma^2$), distribusi *sample mean* nya makin mendekati distribusi normal $N\\left(\\mu_{\\bar{X}}, \\sigma_{\\bar{X}}^2\\right)$, dengan\n\n$$\\mu_{\\bar{X}} = \\mu$$\n\n$$\\sigma_{\\bar{X}}^2 = \\frac{\\sigma^2}{n}$$\n\nBagaimanapun bentuk distribusi aslinya, apabila $n \\geq 30$, distribusi normal di atas akan didekati oleh (ataupun mendekati) distribusi *sample mean* dengan sangat baik\n\n## Contoh CLT: Menghitung CDF\n\nSebuah perusahaan memproduksi bohlam. Bila umur bohlam itu menyebar normal dengan *mean* 800 jam dan standar deviasi 40 jam, hitunglah peluang bahwa suatu sampel acak 16 bohlam akan mempunyai umur rata-rata kurang dari 775 jam.\n\nJawab: misalkan $X$ adalah variabel acak untuk umur bohlam. Soal menanyakan terkait pengambilan sampel berukuran $n=16$. Walaupun $n < 30$, kebetulan $X$ sudah berdistribusi normal (dengan $\\mu=800$ dan $\\sigma = 40$), sehingga CLT masih bisa digunakan. Diminta\n\n$$\\text{Pr}(\\bar{X} < 775)$$\n\nyaitu CDF dari distribusi *sample mean* $\\bar{X}$ di nilai 775.\n\nMari kita data dulu informasi terkait $X$ dan ukuran sampel\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx5_mean <- 800\nx5_sd <- 40\nx5_var <- x5_sd^2\nn5 <- 16\n```\n:::\n\n\n\nSekarang kita hitung $\\mu_{\\bar{X}}$ dan $\\sigma_{\\bar{X}}^2$ berdasarkan CLT\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbar5_mean <- x5_mean\nxbar5_var <- x5_var / n5\nxbar5_sd <- sqrt(xbar5_var)\n```\n:::\n\n\n\nBaru kita hitung $\\text{Pr}(\\bar{X} < 775)$ dengan distribusi normal $N\\left(\\mu_{\\bar{X}}, \\sigma_{\\bar{X}}^2\\right)$ tersebut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(775,\n      mean = xbar5_mean,\n      sd = xbar5_sd)\n```\n:::\n\n\n\nAtau jika ingin diubah ke dalam normal standar terlebih dahulu,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# otomatis mean = 0, sd = 1\npnorm( (775 - xbar5_mean) / xbar5_sd )\n```\n:::\n\n\n\n## CLT untuk sembarang data\n\ntransformasi data random menjadi normal standar (berlaku untuk distribusi kontinu apapun -\\> sampling dist.) gunakan CLT -\\> scale\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(101)\nn <- 100\nrandom <- rnorm(n, mean = 10, sd = 8)\npar(mfrow = c(1,2))\nplot(density(random), main = \"Sebelum\")\nplot(density(scale(random)), main = \"Sesudah\")\n```\n:::\n\n\n\n# Distribusi-t\n\nDistribusi-t digunakan saat $n < 30$ (sehingga tidak bisa menggunakan CLT) dan variansi populasi tidak diketahui (yang ada hanyalah variasi sampel, misal $S^2$), sesuai Dalil 3 berikut\n\n## Dalil 3: Distribusi-t\n\nApabila $\\bar{x}$ dan $S^2$ masing-masing adalah nilai *mean* dan nilai variansi dari sampel berukuran $n$, yang diambil dari suatu populasi normal dengan *mean* $\\mu$ (yang diketahui) dan variansi $\\sigma^2$ (yang tidak diketahui), maka kita bisa misalkan\n\n$$t = \\frac{\\bar{x} - \\mu}{\\left( \\frac{S}{\\sqrt{n}} \\right)}$$\n\ndan $t$ ini merupakan sebuah nilai dari variabel acak $T$ yang mempunyai distribusi-t dengan (parameter) **derajat bebas** $v = n-1$.\n\nDistribusi-t adalah distribusi kontinu yang memiliki PDF dan CDF, sebagaimana distribusi kontinu pada umumnya, sehingga untuknya tersedia fungsi-fungsi `d`..., `p`..., `q`..., dan `r`... yang biasa kita kenal.\n\nDistribusi-t memiliki satu parameter saja, yaitu ***degrees of freedom*** atau **derajat bebas**, yang dilambangkan `df` di R.\n\n## PDF\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt(x = 0.5, df = 14)\n```\n:::\n\n\n\n## CDF\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npt(0.025, df = 14) \n```\n:::\n\n\n\n## *Quantile function*\n\nPr(T\\<t)=0.05 (alpha) -\\> nyari t nya (t-table)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqt(.95, df = 20)\n```\n:::\n\n\n\n## RNG\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(121)\nn <- 100\nrandomt <- rt(n, df = 20)\n\nhist(randomt, breaks=50, xlim = c(-6, 4))\n```\n:::\n\n\n\n## Contoh soal distribusi-t\n\nTentukan nilai $k$ sedemikian sehingga\n\n$$\\text{Pr}(k < T < -1.761) = 0.045$$\n\ndari suatu sampel acak berukuran 15 diambil dari suatu populasi normal\n\n**Jawab:**\n\nSebelumnya, perhatikan bahwa\n\n$$\\begin{align*}\n\\text{Pr}&(k < T < -1.761) \\\\\n&= \\text{Pr}(T < -1.761) - \\text{Pr}(T < k)\n\\end{align*}$$\n\ndan karena $\\text{Pr}(k < T < -1.761) = 0.045$, haruslah\n\n$$\\text{Pr}(T < -1.761) - \\text{Pr}(T < k) = 0.045$$\n\nsehingga\n\n$$\\text{Pr}(T < k) = \\text{Pr}(T < -1.761) - 0.045$$\n\nsehingga nantinya kita akan menghitung ruas kanan terlebih dahulu (manfaatkan CDF), kemudian memperoleh nilai $k$ dengan *quantile function* yaitu *inverse CDF*.\n\nDiketahui sampel acak berukuran $n=15$. Maka, sesuai Dalil 3, parameter derajat bebas yang digunakan adalah\n\n$$v = n-1 = 15-1 = 14$$\n\nPerhatikan bahwa $\\text{Pr}(T < -1.761)$ adalah CDF di `-1.761`, yang bisa dihitung sebagai berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npt(-1.761, df = 14)\n```\n:::\n\n\n\nsehingga $\\text{Pr}(T < -1.761) - 0.045$ adalah\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npt(-1.761, df = 14) - 0.045\n```\n:::\n\n\n\nMaka,\n\n$$\\begin{align*}\n\\text{Pr}&(T < k) \\\\\n&= \\text{Pr}(T < -1.761) - 0.045 \\\\\n&\\approx 0.005027095\n\\end{align*}$$\n\nKita bisa simpan dulu hasilnya,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprob_k <- pt(-1.761, df = 14) - 0.045\nprob_k\n```\n:::\n\n\n\nKemudian kita bisa menemukan nilai $k$ yang memenuhi\n\n$$\\text{Pr}(T < k) \\approx 0.005027095$$\n\ndengan *quantile function* yaitu *inverse CDF*, sebagai berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- qt(prob_k, df = 14)\nk\n```\n:::\n\n\n\nKesimpulannya,\n\n$$k \\approx -2.974114$$\n\n# Distribusi beda dua *mean*\n\nMisalkan kita punya dua populasi (bisa sama ataupun berbeda), yang masing-masing dibuat distribusi *sample mean* nya, dan kita ingin melihat bagaimana selisih antara kedua distribusi *sample mean* tersebut. Secara tidak langsung, kita bisa melihat seberapa berbeda rata-rata antar kedua populasi, bagaimana persebaran bedanya.\n\nDalil 4 berikut adalah Dalil Limit Pusat yang telah disesuaikan untuk kasus dua populasi.\n\n## Dalil 4: Beda Dua *Mean* Menghampiri Normal\n\nMisalkan\n\n- sampel acak berukuran $n_1$ diambil secara acak dari populasi berukuran besar (tak hingga), misal Populasi I, dengan *mean* $\\mu_1$ dan variansi $\\sigma_1^2$.\n\n- sampel acak berukuran $n_2$ diambil secara acak dari populasi berukuran besar (tak hingga), misal Populasi II, dengan *mean* $\\mu_2$ dan variansi $\\sigma_2^2$.\n\n- Populasi I dan Populasi II saling bebas.\n\nMaka beda dua *mean* dari sampel, yaitu $\\bar{X}_1 - \\bar{X}_2$, akan menyebar menghampiri distribusi normal $N\\left(\\mu_{\\bar{X}_1 - \\bar{X}_2}, \\sigma_{\\bar{X}_1 - \\bar{X}_2}^2\\right)$ dengan *mean* dan variansi berikut:\n\n$$\\mu_{\\bar{X}_1 - \\bar{X}_2} = \\mu_1 - \\mu_2$$\n\n$$\\sigma_{\\bar{X}_1 - \\bar{X}_2}^2 = \\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}$$\n\nDengan demikian, misalkan\n\n$$z= \\frac{\\left( \\bar{x}_1 - \\bar{x}_2 \\right) - \\left( \\mu_1 - \\mu_2 \\right)}{\\sqrt{\\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2}}}$$\n\nmaka $z$ merupakan nilai dari variabel acak normal standar $Z$.\n\nCatatan:\n\n- Distribusi tiap populasi tidak harus normal.\n\n- Apabila $n_1 \\geq 30$ dan $n_2 \\geq 30$, maka distribusi $\\bar{X}_1 - \\bar{X}_2$ mendekati distribusi normal dengan sangat baik\n\n## Contoh distribusi beda dua *mean*\n\n**Contoh:**\n\nSebuah sampel acak berukuran $n_1 = 5$ diambil secara acak dari sebuah populasi yang menyebar normal dengan nilai *mean* $\\mu_1 = 50$ dan $\\sigma_1^2 = 9$ dan diperoleh nilai *mean sample* nya $\\bar{x}_1$.\n\nSebuah sampel acak kedua berukuran $n_2 = 4$, bebas dengan sampel acak pertama, diambil dari populasi lain yang jaga menyebar normal dengan nilai *mean* $\\mu_2 = 40$ dan $\\sigma_1^2 = 4$ dan diperoleh nilai *mean sample* nya $\\bar{x}_2$.\n\nTentukan nilai dari\n\n$$\\text{Pr}\\left( \\left(\\bar{X}_1 - \\bar{X}_2\\right) < 8.2 \\right)$$\n\n**Jawab:**\n\nPerhatikan bahwa nilai yang diminta adalah CDF di 8.2 dari variabel acak $\\bar{X}_1 - \\bar{X}_2$.\n\nKarena Populasi I dan Populasi II berdistribusi normal, walaupun $n_1$ dan $n_2$ berukuran kecil, maka $\\bar{X}_1 - \\bar{X}_2$ juga berdistribusi normal.\n\n(Kombinasi linear dari distribusi normal juga berupa distribusi normal.)\n\nMari kita data terlebih dahulu, semua yang diketahui dari soal\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn1 <- 5\nx1_mean <- 50\nx1_var <- 9\n\nn2 <- 4\nx2_mean <- 40\nx2_var <- 4\n```\n:::\n\n\n\nKemudian, kita bisa mulai menerapkan Dalil 4.\n\n*Mean* dari $\\bar{X}_1 - \\bar{X}_2$ adalah:\n\n$$\\begin{align*}\n\\mu_{\\bar{X}_1 - \\bar{X}_2} &= \\mu_1 - \\mu_2 \\\\\n                            &= 50 - 40 = 10\n\\end{align*}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbeda_mean <- x1_mean - x2_mean\nxbeda_mean\n```\n:::\n\n\n\ndan variansinya adalah:\n\n$$\\begin{align*}\n\\sigma_{\\bar{X}_1 - \\bar{X}_2}^2 &= \\frac{\\sigma_1^2}{n_1} + \\frac{\\sigma_2^2}{n_2} \\\\\n&= \\frac{9}{5} + \\frac{4}{4} \\\\\n&= 2.8\n\\end{align*}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbeda_var <- (x1_var / n1) + (x2_var / n2)\nxbeda_var\n```\n:::\n\n\n\nKita juga bisa menghitung *standard deviation* untuk $\\bar{X}_1 - \\bar{X}_2$ sebagai akar dari variansinya, seperti berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbeda_sd <- sqrt(xbeda_var)\nxbeda_sd\n```\n:::\n\n\n\nJadi, mengikuti Dalil 4, kita bisa menghitung CDF dari $\\bar{X}_1 - \\bar{X}_2$ melalui CDF dari distribusi normal yang dihampiri olehnya (ataupun menghampirinya), yaitu distribusi normal yang nilai rata-ratanya, variansinya, dan *standard deviation*-nya baru saja kita tentukan.\n\nDengan demikian, nilai $\\text{Pr}\\left( \\left(\\bar{X}_1 - \\bar{X}_2\\right) < 8.2 \\right)$ bisa dihitung melalui distribusi normal tersebut, sebagai berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(8.2, mean = xbeda_mean, sd = xbeda_sd)\n```\n:::\n\n\n\nAtau bisa juga kita ubah ke normal standar terlebih dahulu,\n\n$$\\begin{align*}\n\\text{Pr}&\\left( \\left(\\bar{X}_1 - \\bar{X}_2\\right) < 8.2 \\right) \\\\\n&= \\text{Pr}\\left( \\frac{\\left(\\bar{X}_1 - \\bar{X}_2\\right) - 10}{\\sqrt{2.8}} < \\frac{8.2 - 10}{\\sqrt{2.8}} \\right) \\\\\n&= \\text{Pr}\\left( Z < \\frac{8.2 - 10}{\\sqrt{2.8}} \\right)\n\\end{align*}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# otomatis mean = 0, sd = 1\npnorm( (8.2 - xbeda_mean) / sqrt(xbeda_var) )\n```\n:::\n\n\n\natau sama saja\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm( (8.2 - xbeda_mean) / xbeda_sd )\n```\n:::\n\n\n\nMaka\n$$\\begin{align*}\n\\text{Pr}&\\left( \\left(\\bar{X}_1 - \\bar{X}_2\\right) < 8.2 \\right) \\\\\n&= \\text{Pr}\\left( Z < \\frac{8.2 - 10}{\\sqrt{2.8}} \\right) \\\\\n&\\approx 0.1410294\n\\end{align*}$$\n\nKesimpulannya,\n$$\\begin{align*}\n\\text{Pr}&\\left( \\left(\\bar{X}_1 - \\bar{X}_2\\right) < 8.2 \\right) \\\\\n&\\approx 0.1410294\n\\end{align*}$$\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}