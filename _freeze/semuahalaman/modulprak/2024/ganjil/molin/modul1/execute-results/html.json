{
  "hash": "74f1b7a9549b2e47fef4a8c46bc3525e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Review R dan Regresi Linier Sederhana\"\nsubtitle: \"Simple Linear Regression\"\nimage: static\\Plot regresi.png\ndescription: \"Offline di Departemen Matematika\"\ndate: 09/23/2024\npage-navigation: true\nformat: html\n---\n\n\n\n# Review R\n\n## Instalasi Library\n\n**<span style=\"color: #FF6F61;\">install.packages</span>**\n(**<span style=\"color: #FF6F61;\">`Nama Packages`</span>**) , untuk mengunduh library yang diperlukan kita dapat mengganti `Nama Packages` dengan packages yang kita butuhkan. Jangan lupa untuk menambahkan tanda `\" \"` atau `' '` sebelum dan sesudah Nama packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('psych')\n```\n:::\n\n\n\n## Mengimport Library\n\n**<span style=\"color: #FF6F61;\">library</span>**\n(**<span style=\"color: #FF6F61;\">`Nama Packages`</span>**) , untuk mengimport atau menggunakan library yang sudah diunduh sebelumnya kita dapat menggunakan fungsi tersebut dengan mengubah `Nama Packages` menjadi packages yang dibutuhkan atau yang sudah diunduh sebelumnya. Pada bagian import library tidak diperlukan tanda `\" \"` atau `' '`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(psych)\n```\n:::\n\n\n\n## Membaca Data\n\npada dasarnya pembacaan file di R studio bisa berbagai macam format file , untuk contohnya:\n\n- **<span style=\"color: #FF6F61;\">library</span>** (**<span style=\"color: #FF6F61;\">`readxl`</span>**) untuk membaca data yang berformat `.xlsx` atau `.xls`\n- **<span style=\"color: #FF6F61;\">library</span>** (**<span style=\"color: #FF6F61;\">`readr`</span>**) untuk membaca data yang berformat `.csv`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(readr)\n```\n:::\n\n\n\n### Tahap - Tahap Membaca Data\n\n1. Membuka Menu File pada RStudio\n\n![](static/File%20Menu.png)\n\n2. Memilih File / Data yang diinginkan\n\n![](static/File%20Name.png)\n\n3. Memilih section `import dataset`\n\n![](static/File%20Section.png)\n\n4. Megcopy File Path URL\n\n![](static/File%20URL.png)\n\nsetelah mendapatkan file url , selanjutnya akan dibaca menggunakan **<span style=\"color: #FF6F61;\">read_csv</span>**\n(**<span style=\"color: #FF6F61;\">`'file_url'`</span>**) , jangan lupa untuk mengubah file url sesuai file url yang didapatkan dari tahap mecari data. Selain itu jangan lupa untuk menambahkan tanda `' '` atau `\" \"` sebelum dan sesudah file url yang didapatkan. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\ndata <- read_csv('~/Downloads/Iris.csv')\n```\n:::\n\n\n\n## Memeriksa Data\n\nUntuk melanjutkan modul ini, akan digunakan dataset iris bawaan r yang dapat diakses dengan syntax berikut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\ndata <- iris\n```\n:::\n\n\n\nUntuk memeriksa data dapat menggunakan banyak cara diantaranya:\n\n1. **<span style=\"color: #FF6F61;\">View</span>** (**<span style=\"color: #FF6F61;\">`data`</span>**) , untuk melihat keseluruhan data\n2. **<span style=\"color: #FF6F61;\">head</span>** (**<span style=\"color: #FF6F61;\">`data`</span>**) , untuk melihat 6 data teratas\n3. **<span style=\"color: #FF6F61;\">tail</span>** (**<span style=\"color: #FF6F61;\">`data`</span>**) , untuk melihat 6 data terbawah \n\njangan lupa untuk mengubah variabel `data` sesuai dengan variabel yang didefinisikan sebelumnya.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(data)\n```\n:::\n\n\n\n## Tipe Data\n\nUntuk memperoleh informasi tipe data dari sebuah data kita akan menggunakan  **<span style=\"color: #FF6F61;\">str</span>** (**<span style=\"color: #FF6F61;\">`data`</span>**) , jangan lupa untuk mengubah `data` sesuai variabel yang didefinisikan sebelumnya\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n\n\nPenjelasan tipe data:\n\n- `num` : Num mengartikan bahwa variabel tersebut adalah nilai numerik / sebuah angka\n- `chr` : Chr mengartikan bahwa variabel tersebut adalah nilai yang berupa tulisan atau bisa disebut juga string\n\n## Statistik Deksriptif\n\nUntuk memeriksa statisika deskriptif dari data dapat menggunakan:\n\n1. **<span style=\"color: #FF6F61;\">library</span>** (**<span style=\"color: #FF6F61;\">`psych`</span>**)\n2. **<span style=\"color: #FF6F61;\">library</span>** (**<span style=\"color: #FF6F61;\">`DescTools`</span>**)\n3. **<span style=\"color: #FF6F61;\">library</span>** (**<span style=\"color: #FF6F61;\">`moments`</span>**)\n\nUntuk penjelasan fungsi statistik deskriptif bisa dilihat pada tabel berikut:\n\n\n| **Fungsi**                            | **Penjelasan**                                                                          | **Library**     |\n|----------------------------------------|------------------------------------------------------------------------------------------|-----------------|\n| `mean(data)`                             | Menghitung rata-rata dari data.                                                       | Base R          |\n| `median(data)`                           | Menghitung nilai tengah dari data.                                                    | Base R          |\n| `sum(data)`                              | Menghitung jumlah total elemen dalam data.                                                 | Base R          |\n| `sd(data)`                               | Menghitung standar deviasi dari data.                                                 | Base R          |\n| `var(data)`                              | Menghitung varians dari data.                                                         | Base R          |\n| `Mode(data)`                             | Menghitung modus dari data, nilai yang paling sering muncul.                          | DescTools       |\n| `standarerror <- sd(data)/sqrt(length(data))`| Menghitung standar error dari data.                                                   | Base R          |\n| `sort(data)`                             | Mengurutkan elemen dalam dari nilai terkecil ke terbesar.                             | Base R          |\n| `min(data)`                              | Menghitung nilai minimum dari data.                                                   | Base R          |\n| `max(data)`                              | Menghitung nilai maksimum dari data.                                                  | Base R          |\n| `range(data)`                            | Menghitung selisih antara nilai maksimum dan minimum dari data.                       | Base R          |\n| `quantile(data, prob=0.25)`              | Menghitung kuartil ke-1 (Q1) atau persentil ke-25 dari data.                          | Base R          |\n| `quantile(data, prob=0.75)`              | Menghitung kuartil ke-3 (Q3) atau persentil ke-75 dari data.                          | Base R          |\n| `skewness(data)`                         | Menghitung kemiringan distribusi (skewness) dari data.                                | moments         |\n| `kurtosis(data)`                         | Menghitung keruncingan distribusi (kurtosis) dari data.                               | moments         |\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(psych)\nlibrary(DescTools)\nlibrary(moments)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(data$Petal.Length)\nmedian(data$Petal.Length)\nsd(data$Petal.Length)\nvar(data$Petal.Length)\n```\n:::\n\n\n\nuntuk melihat keseluruhan statistika deskriptif dapat menggunakan :\n\n- **<span style=\"color: #FF6F61;\">summary</span>** (**<span style=\"color: #FF6F61;\">`data`</span>**) , \n- **<span style=\"color: #FF6F61;\">describe</span>** (**<span style=\"color: #FF6F61;\">`data`</span>**) , menggunakan library `psych` untuk statistika deksriptif yang lebih advance\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndescribe(data)\n```\n:::\n\n\n\n## Split Data\n\n- untuk membuat split data kita dapat menggunakan : **<span style=\"color: #FF6F61;\">sample</span>**() ,\n\n- untuk memperoleh hasil yang selalu sama jangan lupa untuk mengatur seed dengan cara :\n**<span style=\"color: #FF6F61;\">set.seed</span>**(**<span style=\"color: #FF6F61;\">`42`</span>**) , angka `42` dapat digantikan sesuai yang diinginkan.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42) \n\nindex <- sample(1:nrow(data), size = 0.8 * nrow(data))\n\ntrain_data <- data[index, ]  # 80% of the data\ntest_data <- data[-index, ] # 20% of the data\n```\n:::\n\n\n\n`size` dapaat diatur sesuai ketentuan , jika ketentuannya diambil 70% data maka dapat mengubah `size` menjadi 0.7.\n\n# Regresi Linier Sederhana\n\nUntuk mendefinisikan suatu regresi linier sederhana kita dapat menggunakan fungsi **<span style=\"color: #FF6F61;\">lm()</span>** , dengan cara:\n\n**<span style=\"color: #FF6F61;\">lm</span>**(**<span style=\"color: #FF6F61;\">`variabel response` ~ `variabel prediktor` , data = `data`</span>**)\n\ndimana :\n\n- Variabel Response (`y`)\n- Variabel Prediktor (`X`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Petal.Length ~ Petal.Width, data = train_data)\nmodel\n```\n:::\n\n\n\n## Interpretasi `summary(model)`\n\nFungsi `summary(model)` dapat digunakan untuk melihat informasi mengenai model yang telah dibentuk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model)\n```\n:::\n\n\n\n## Visualisasi Model\n\nUntuk membuat visualisasi regresi linier sederhana, lakukan langkah-langkah berikut:\n1. Buat scatter plot variabel respons dan variabel prediktor dengan function `plot(pred, resp)`\n2. Buat garis regresi dengan function `abline(model)`\n3. Buat keterangan garis regresi dengan function `legend()` (*optional)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter Plot Petal.Width ~ Petal.Length\nplot(iris$Petal.Width,\n     iris$Petal.Length,\n     xlab = \"Petal Width\",\n     ylab = \"Petal Length\",\n     main = \"Plot Regresi Petal Length ~ Petal Width\",\n     pch = 20)\n\n# Garis Regresi\nabline(model,\n       col = \"red\",\n       lwd = 2)\n\nlegend(\"bottomright\",\n       legend = \"Garis Regresi\",\n       col = \"blue\",\n       lwd = 2,\n       bty = \"n\")\n```\n:::\n\n\n\n![](static/Plot%20regresi.png)\n\n## Interval Kepercayaan dan Interval Prediksi \n\nInterval Kepercayaan untuk taksiran koefisien dapat dihitung dengan fungsi `confint(model)`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(model, level = 0.9)\n```\n:::\n\n\n\nInterval Prediksi untuk suatu nilai-nilai di luar data yang digunakan untuk pemodelan dapat dihitung dengan fungsi `predict(model, newdata, interval='prediction')`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(model, newdata = test_data, interval = \"prediction\", level = 0.9)\n```\n:::\n\n\n\nUntuk suatu nilai x tertentu, dapat dicari interval prediksinya dengan syntax berikut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(model, newdata = data.frame(Petal.Width=20), interval = \"prediction\", level = 0.9)\n```\n:::\n\n\n\n## Representasi Grafik Residual Model\n\nResidual model dapat diakses dengan memanggil `model$residual` atau `resid(model)`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(model$residual)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(resid(model))\n```\n:::\n\n\n\nPlot residual dapat dibentuk dengan cara-cara berikut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(model$residual)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(model, 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(model$residual)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}