{
  "hash": "95a6271662dfdf77aaf9a4aa9f9ed67e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pertemuan 4 : Data Visualization (seaborn)\"\nimage: static\\images\\seaborn.png\ndescription: \"Data visualization in python using seaborn\"\ndate: 04/30/2024\npage-navigation: true\njupyter: python3\nformat: html\n---\n\n\n\n\nKembali ke [EDA](./eda2024genap.qmd)\n\n# Seaborn\n\n<div style='text-align: justify;'>\nSeaborn adalah library visualisasi data yang dibangun di atas **matplotlib**, dan menggunakan struktur data yang ada pada library **pandas**. Seaborn banyak digunakan karena penggunaannya yang cukup *simple* dibandingkan dengan matplotlib.pyplot dengan hasil visualisasi yang lebih beragam.\n\nbaca dokumentasi seaborn di sini : [Seaborn](https://seaborn.pydata.org/tutorial/introduction.html)\n</div>\n___\n\n::: {#d591bf82 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#load dataset yang disediakan oleh modul atau library seaborn\niris = sns.load_dataset('iris')\niris\n```\n:::\n\n\n<div style='text-align: justify;'>\nBerikut salah satu contoh visualisasi dari data iris yang dihasilkan oleh seaborn.\n</div>\n\n\n\n___\n\n# Inputs\n\n<div style='text-align: justify;'>\nSeaborn memiliki 3 cara untuk menginput data sebagai parameter (sumbu y dan/atau sumbu x) dari fungsi-fungsi visualisasinya.\n\n1. List/Series/Array\n2. Pandas Dataframe dan kolom\n3. Langsung masuk ke dataframenya untuk diolah\n\n</div>\n\n## List/Series/Array\n\n::: {#4f413afb .cell execution_count=3}\n``` {.python .cell-code}\n#Mengambil isinya saja dari kolom sepal length dan sepal width\nlength = iris['sepal_length'].values\nwidth = iris['sepal_width'].values\nprint(length, width)\n```\n:::\n\n\n::: {#090865bb .cell execution_count=4}\n``` {.python .cell-code}\nsns.scatterplot(x=length, y=width)\n\nplt.show()\n```\n:::\n\n\n## Dataframe dan kolomnya\n\n::: {#dc2e834d .cell execution_count=5}\n``` {.python .cell-code}\nsns.scatterplot(x=iris['sepal_length'], y=iris['sepal_width'])\n\nplt.show()\n```\n:::\n\n\natau\n\n::: {#70152954 .cell execution_count=6}\n``` {.python .cell-code}\nsns.scatterplot(x='sepal_length', y='sepal_width', data=iris)\n\nplt.show()\n```\n:::\n\n\n## Olah dataframe\n\n::: {#cc14e702 .cell execution_count=7}\n``` {.python .cell-code}\nsns.boxplot(data=iris)\n\nplt.show()\n```\n:::\n\n\n# Plots\n\n<div style='text-align: justify;'>\nSeaborn memiliki banyak sekali jenis plot dengan fungsi yang berbeda-beda. 5 diantaranya yang akan dibahas pada pertemuan ini :\n\n1. Distribution Plot\n2. Count Plot\n3. Heatmap\n4. Scatter Plot\n5. Box Plot\n\nuntuk plot lainnya, silakan telusuri dokumentasi seaborn berikut :\n\n[Seaborn Plots](https://seaborn.pydata.org/examples/index.html)\n</div>\n\n## Distribution Plot\n\n::: {#8d116c97 .cell execution_count=8}\n``` {.python .cell-code}\nsns.displot(iris['petal_length'])\n\nplt.show()\n```\n:::\n\n\n::: {#58fbae07 .cell execution_count=9}\n``` {.python .cell-code}\niris['petal_length'].skew()\n```\n:::\n\n\n::: {#73c11687 .cell execution_count=10}\n``` {.python .cell-code}\nsns.displot(iris['sepal_width'])\n\nplt.show()\n```\n:::\n\n\n::: {#e4a1c2a2 .cell execution_count=11}\n``` {.python .cell-code}\niris['sepal_width'].skew()\n```\n:::\n\n\n::: {#d72c3887 .cell execution_count=12}\n``` {.python .cell-code}\nsns.histplot(iris['sepal_length'])\n\nplt.show()\n```\n:::\n\n\n::: {#b4d03634 .cell execution_count=13}\n``` {.python .cell-code}\nsns.histplot(iris['sepal_width'])\n\nplt.show()\n```\n:::\n\n\n::: {#b8bc6be7 .cell execution_count=14}\n``` {.python .cell-code}\n# Histogram kumulatif dari sepal width\nsns.histplot(iris['sepal_width'], cumulative=True)\n\nplt.show()\n```\n:::\n\n\n## Count Plot\n\n::: {#cbaf9673 .cell execution_count=15}\n``` {.python .cell-code}\n#tips dari seaborn\ntips=sns.load_dataset('tips')\ntips\n```\n:::\n\n\n___\n\n::: {#5260b222 .cell execution_count=16}\n``` {.python .cell-code}\n# Histogram kumulatif dari sepal width\nsns.countplot(x='day', data=tips)\n\nplt.show()\n```\n:::\n\n\n::: {#17ef4773 .cell execution_count=17}\n``` {.python .cell-code}\n# Histogram kumulatif dari sepal width\nsns.countplot(x=tips['day'])\n\nplt.show()\n```\n:::\n\n\n::: {#26b3ac4e .cell execution_count=18}\n``` {.python .cell-code}\n# Histogram kumulatif dari sepal width\nsns.countplot(x='sex', data=tips, palette='Accent', hue='sex')\n\nplt.show()\n```\n:::\n\n\n::: {#1da6073d .cell execution_count=19}\n``` {.python .cell-code}\n# Histogram kumulatif dari sepal width\nsns.countplot(x='day', data=tips, palette='Blues', hue='sex')\n\nplt.show()\n```\n:::\n\n\n::: {#cf11137f .cell execution_count=20}\n``` {.python .cell-code}\n# Histogram kumulatif dari sepal width\nsns.countplot(x='sex', data=tips, palette='Blues', hue='day')\n\nplt.show()\n```\n:::\n\n\n::: {#557af66d .cell execution_count=21}\n``` {.python .cell-code}\n#Jika ingin mengammbar dalam sumbu vertikal ya y=\nsns.countplot(y='day', data=tips, palette='Blues', hue='sex')\n\nplt.show()\n```\n:::\n\n\n::: {#ecce4ca7 .cell execution_count=22}\n``` {.python .cell-code}\nsns.countplot(x='sex', data=tips, hue='smoker')\n\nplt.show()\n```\n:::\n\n\n::: {#891255ed .cell execution_count=23}\n``` {.python .cell-code}\nsns.countplot(x='smoker', data=tips, hue='sex')\n\nplt.show()\n```\n:::\n\n\n## Heatmap\n\n::: {#417b2556 .cell execution_count=24}\n``` {.python .cell-code}\niris.drop('species', axis=1, inplace=True)\niris\n```\n:::\n\n\n___\n\n::: {#e010aa2d .cell execution_count=25}\n``` {.python .cell-code}\nkorelasi_iris = iris.corr()\nkorelasi_iris\n```\n:::\n\n\n::: {#196f361e .cell execution_count=26}\n``` {.python .cell-code}\nsns.heatmap(iris.corr())\n\nplt.show()\n```\n:::\n\n\n::: {#60a9ab2f .cell execution_count=27}\n``` {.python .cell-code}\nsns.heatmap(iris.corr(), cmap='YlGnBu')\n\nplt.show()\n```\n:::\n\n\n::: {#fd4f544d .cell execution_count=28}\n``` {.python .cell-code}\nsns.heatmap(iris.corr(), cmap='YlGnBu')\n\nplt.xticks(rotation=45)\n\nplt.show()\n```\n:::\n\n\n::: {#65884f1f .cell execution_count=29}\n``` {.python .cell-code}\nsns.heatmap(iris.corr(), cmap='YlGnBu')\n\nplt.yticks(rotation=45)\n\nplt.show()\n```\n:::\n\n\n::: {#05ad1319 .cell execution_count=30}\n``` {.python .cell-code}\nsns.heatmap(iris.corr(), cmap='YlGnBu')\n\nplt.xticks(rotation=45)\n\nplt.yticks(rotation=45)\n\nplt.show()\n```\n:::\n\n\n::: {#21679235 .cell execution_count=31}\n``` {.python .cell-code}\nsns.heatmap(korelasi_iris[(korelasi_iris >= 0.5)])\n\nplt.show()\n```\n:::\n\n\n::: {#b157c8f0 .cell execution_count=32}\n``` {.python .cell-code}\nsns.heatmap(korelasi_iris[(korelasi_iris >= 0.5) | (korelasi_iris <= -0.2)])\n\nplt.show()\n```\n:::\n\n\n::: {#de410d37 .cell execution_count=33}\n``` {.python .cell-code}\nsns.heatmap(korelasi_iris[(korelasi_iris >= 0.5) | (korelasi_iris <= -0.2)], annot = True)\n\nplt.show()\n```\n:::\n\n\n::: {#6076a3dd .cell execution_count=34}\n``` {.python .cell-code}\nsns.heatmap(korelasi_iris[(korelasi_iris >= 0.5) | (korelasi_iris <= -0.2)], annot = True, cmap='Blues')\n\nplt.show()\n```\n:::\n\n\n::: {#b69ea474 .cell execution_count=35}\n``` {.python .cell-code}\nsns.heatmap(korelasi_iris[(korelasi_iris >= 0.5) | (korelasi_iris <= -0.2) ], annot = True, cmap = 'Blues', linewidth = 1, linecolor = 'black')\n\nplt.show()\n```\n:::\n\n\n## Scatter Plot\n\n::: {#c760a891 .cell execution_count=36}\n``` {.python .cell-code}\niris = sns.load_dataset('iris')\niris\n```\n:::\n\n\n___\n\n::: {#cf19aa0c .cell execution_count=37}\n``` {.python .cell-code}\nsns.scatterplot(x='sepal_length', y='sepal_width', data=iris, palette='Accent_r', hue='species')\n\nplt.show()\n```\n:::\n\n\n::: {#2b651efc .cell execution_count=38}\n``` {.python .cell-code}\nsns.regplot(x='sepal_length', y='sepal_width', data=iris)\n\nplt.show()\n```\n:::\n\n\n::: {#38501e0a .cell execution_count=39}\n``` {.python .cell-code}\nsns.regplot(x='petal_length', y='petal_width', data=iris)\n\nplt.show()\n```\n:::\n\n\n::: {#5750937c .cell execution_count=40}\n``` {.python .cell-code}\niris['petal_length'].corr(iris['petal_width'])\n```\n:::\n\n\n## Box Plot\n\n::: {#389717c0 .cell execution_count=41}\n``` {.python .cell-code}\nsns.boxplot(x='petal_length', data=iris)\n\nplt.show()\n```\n:::\n\n\n::: {#351c168b .cell execution_count=42}\n``` {.python .cell-code}\nsns.boxplot(x='sepal_width', data=iris)\n\nplt.show()\n```\n:::\n\n\n::: {#f1111cdd .cell execution_count=43}\n``` {.python .cell-code}\n?sns.countplot\n```\n:::\n\n\n",
    "supporting": [
      "modul4_files"
    ],
    "filters": [],
    "includes": {}
  }
}