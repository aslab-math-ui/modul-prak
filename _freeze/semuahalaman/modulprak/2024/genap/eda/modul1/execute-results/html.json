{
  "hash": "a02ecd0f216c803c76fe740c08cea3dd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pertemuan 1 : Python for Data Analysis\"\nsubtitle: \"Intro to Pandas\"\nimage: static\\images\\eda_py_img.png\ndescription: \"Offline di Departemen Matematika: sesi 1 di lab komputer D.311, sesi 2 di lab statistika D.406\"\ndate: 02/27/2024\npage-navigation: true\njupyter: python3\nformat: html\n---\n\n\n\n\nKembali ke [EDA](./eda2024genap.qmd)\n\n# Data Analysis Libraries\n\n<div style='text-align: justify;'>\nLibrary pada python adalah potongan kode yang *reusable* dan dapat kita akses dengan mengimpornya ke dalam program kita. Pada mata kuliah algoritma dan pemrograman yang telah kalian ambil di semester 1, telah diperkenalkan beberapa library yang dapat kalian import ke dalam script kalian seperti numpy, scipy, sympy, pandas, matplotlib dan lainnya.\n\nDalam bidang data analysis, library python yang umum digunakan adalah `numpy` dan `pandas` untuk pengolahan data tabular, `matplotlib` dan  `seaborn` untuk visualisasi\n\nJika anda menggunakan jupyter notebook secara local pada perangkat anda, anda perlu menginstall 3 library tersebut untuk praktikum ini. Gunakan python package manager (pip) untuk menginstall library `numpy`, `pandas`, `matplotlib` dan `seaborn` dengan memanggil `pip install <nama-library>` di terminal. Jika anda menggunakan conda atau google colab, library-library ini sudah terinstall secara otomatis dan dapat kita import secara langsung. \n\nUntuk mengecek apakah library yang diperlukan sudah terinstall, run blok kode di bawah ini.\n\n```python\n# Untuk library lain, ubah `pandas` -> <nama-library>\nimport pandas\npandas.__version__\n```\n\nJika library sudah terinstall, maka output akan menunjukkan versi dari library yang terinstall.\n\n::: {.callout-tip}\n## Kesepakatan Penamaan Library\n\nKomunitas python memiliki kesepakatan penamaan untuk beberapa library untuk memudahkan pembacaan kode. Beberapa diantaranya yang kita gunakan adalah\n```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n</div>\n\n# Struktur Data Pandas (Series, DataFrame, Index Objects)\n\n<div style='text-align: justify;'>\nPada dasarnya, pandas dibuat atas struktur data yang terdapat pada library NumPy yaitu **Array**. Array sendiri sudah pernah dibahas dalam mata kuliah algoritma dan pemrograman sehingga kita tidak akan mendalaminya pada praktikum ini. \n</div>\n\n## Series\n\n<div style='text-align: justify;'>\n**Series** adalah suatu object yang menyerupai array 1 dimensi yang memiliki nilai dengan array index yang berkaitan dengan masing-masing nilai.\n\n::: {#4aa39d60 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\nobj = pd.Series([4, 7, -5, 3])\nobj\n```\n:::\n\n\nkolom kiri adalah ***index***, kolom kanan adalah ***Values*** (nilai).\n\n___\nUntuk mengakses values saja :\n\n::: {#acc34380 .cell execution_count=2}\n``` {.python .cell-code}\nobj.values\n```\n:::\n\n\n___\nUntuk mengakses index saja :\n\n::: {#8bd708b0 .cell execution_count=3}\n``` {.python .cell-code}\nobj.index\n```\n:::\n\n\n</div>\n\n___\n### Perbedaan Series dengan Array\n\n<div style='text-align: justify;'>\nDengan Series kita bisa menggunakan index untuk mengakses value yang berkaitan dengan index tersebut.\n\n::: {#4f7c622c .cell execution_count=4}\n``` {.python .cell-code}\nobj[0]\n```\n:::\n\n\n::: {#9b03e050 .cell execution_count=5}\n``` {.python .cell-code}\nobj[1] = 2\nobj[[0, 1, 3]]\n```\n:::\n\n\n::: {#337c8f90 .cell execution_count=6}\n``` {.python .cell-code}\nobj[0:2]\n```\n:::\n\n\n</div>\n\n___\n### Series dengan custom index\n\n<div style='text-align: justify;'>\n\n::: {#3a4b1bf2 .cell execution_count=7}\n``` {.python .cell-code}\nobj2 = pd.Series([0.25, 0.5, 0.75, 1.0], index=['d', 'b', 'a', 'c'])\nobj2\n```\n:::\n\n\n::: {.callout-warning}\n## Error warning\nPerhatikan jumlah index harus sama dengan jumlah value yang ditetapkan.\n:::\n\n::: {#cac010ea .cell execution_count=8}\n``` {.python .cell-code}\nobj2.index\n```\n:::\n\n\n::: {#74682dcd .cell execution_count=9}\n``` {.python .cell-code}\nobj2['b']\n```\n:::\n\n\n::: {#944ca828 .cell execution_count=10}\n``` {.python .cell-code}\nobj2['d':'a']\n```\n:::\n\n\n___\nUntuk mengubah index suatu series bisa juga dengan mengubah nilai `<series>.index`\n\n::: {#b6a0a70f .cell execution_count=11}\n``` {.python .cell-code}\nobj2.index = ['A', 'B', 'C', 'D']\nobj2\n```\n:::\n\n\n</div>\n\n___\n### Series as specialized dictionary\n\n<div style='text-align: justify;'>\nDictionary pada python adalah struktur data yang berisi pasangan *key-value*. Kita dapat melihat series sebagai pasangan key-value dengan index sebagai key. Bahkan kita bisa membuat suatu series dari sebuah dictionary.\n\n::: {#10399c14 .cell execution_count=12}\n``` {.python .cell-code}\ndata_dict = {\n  'Jakarta': 400,\n  'Bandung': 200,\n  'Bogor': 300,\n  'Depok': 500\n}\ndata_dict\n```\n:::\n\n\n::: {#0af53130 .cell execution_count=13}\n``` {.python .cell-code}\ndata_series = pd.Series(data_dict)\ndata_series\n```\n:::\n\n\n___\nJika kita ingin index dengan urutan tertentu, maka kita dapat memasukkan argumen index berupa list index sesuai dengan urutan yang kita inginkan.\n\n::: {#405eb947 .cell execution_count=14}\n``` {.python .cell-code}\nkota = ['Surabaya', 'Bandung', 'Bogor', 'Jakarta']\ndata_series2 = pd.Series(data_dict, index=kota)\ndata_series2\n```\n:::\n\n\n::: {.callout-tip}\nPerhatikan bahwa jika kita memasukkan index yang tidak ada pada dictionary awal, index akan dimasukkan dengan nilai `NaN` (Not a Number)\n:::\n</div>\n\n___\n### Operasi Aritmatika\n\n<div style='text-align: justify;'>\nSeries secara otomatis menyamakan index ketika melakukan operasi aritmatika.\n\n::: {#b3879969 .cell execution_count=15}\n``` {.python .cell-code}\ndata_series + data_series2 # Silahkan coba untuk operasi aritmatika lainnya\n```\n:::\n\n\n::: {.callout-tip}\nPerhatikan bahwa `Depok` dan `Surabaya` bernilai `NaN`. Hal ini dikarenakan kedua index tersebut tidak terdapat pada kedua series yang kita operasikan.\n:::\n</div>\n\n___\n### `name` attribute\n\n<div style='text-align: justify;'>\nObject series dan index pada pandas memiliki atribut `name` yaitu nama dari series/index tersebut.\n\n::: {#bad17e73 .cell execution_count=16}\n``` {.python .cell-code}\ndata_series.name = 'populasi'\ndata_series.index.name = 'kota'\ndata_series\n```\n:::\n\n\n</div>\n\n## DataFrame\n\n<div style='text-align: justify;'>\n**DataFrame** adalah struktur data 2 dimensi yang terdiri atas baris dan kolom (disebut juga tabel). Kita dapat melihat dataframe sebagai gabungan dari 2 atau lebih series.\n</div>\n\n![](static\\images\\series_dataframe.png)\n\n<div style='text-align: justify;'>\n\nKarena memiliki 2 dimensi (baris dan kolom), DataFrame memiliki indeks untuk masing-masing baris dan kolom.\n\n___\nAda banyak cara untuk membangun DataFrame, salah satu yang paling umum adalah membuat *dictionary* dengan \n\n| *key*   : nama kolom\n| *value* : nilai-nilai dalam list atau NumPy Array dengan panjang yang sama untuk setiap kolom.\n\n::: {#eed8fb38 .cell execution_count=17}\n``` {.python .cell-code}\ndata = {'kota': ['Bogor', 'Bogor', 'Bogor', 'Depok', 'Depok', 'Depok'],\n 'tahun': [2000, 2001, 2002, 2001, 2002, 2003],\n 'populasi': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}\n\ndf = pd.DataFrame(data) # `df` adalah singkatan yang umum digunakan oleh komunitas python dalam mendefinisikan suatu `dataframe`\n\ndf\n```\n:::\n\n\n`pd.DataFrame()` menerima argumen `columns=` yang dapat digunakan untuk menentukan urutan kolom dataframe.\n\n::: {#b3c04d6f .cell execution_count=18}\n``` {.python .cell-code}\ndf2 = pd.DataFrame(data, columns=['tahun', 'kota', 'populasi'])\n\ndf2\n```\n:::\n\n\n::: {.callout-tip}\n- menambahkan kolom baru yang tidak ada pada data akan menghasilkan kolom berisi nilai `NaN` \n- `pd.DataFrame` juga menerima argumen `index=` untuk mengubah index seperti pada `pd.Series`\n\n::: {#79b87ff2 .cell execution_count=19}\n``` {.python .cell-code}\ndf2 = pd.DataFrame(data, columns=['tahun', 'kota', 'populasi', 'luas_wilayah'], \n                   index=['one', 'two', 'three', 'four', 'five', 'six'])\n\ndf2\n```\n:::\n\n\n:::\n</div>\n\n### Importing datasets\n\n<div style='text-align: justify;'>\nDalam mengolah suatu data, tidaklah mungkin kita harus menulis ulang seluruh data yang sudah tertulis dengan format tertentu (misalnya Spreadsheet/.xlsx, .csv, atau .dat) pastinya kita perlu suatu cara untuk mengimpor data yang memiliki berbagai format. Pandas memiliki beberapa function yang dapat kita gunakan untuk membaca data dengan berbagai format.\n\n- **.csv (comma separated values)**\n\n```python\ndf = pd.read_csv('<path-to-csv>')\n```\n\n- **.xlsx (excel spreadsheet)**\n\n```python\ndf = pd.read_excel('<path-to-xlsx>')\n```\n\n- **Others**\n\nUntuk tipe file lainnya, silahkan baca dokumentasi pandas di link berikut : [Pandas IO Tools](https://pandas.pydata.org/docs/user_guide/io.html#)\n\n</div>\n\n### DataFrame Attributes/Properties and Methods\n<div style='text-align: justify;'>\nSejauh ini kita sudah berkenalan dengan 2 object pandas yaitu Series dan DataFrame. Dalam pemrograman python, sebuah object bisa memiliki suatu method, attribute/property, atau keduanya. \n\nUntuk materi selanjutnya, kita akan menggunakan dataset pokemon sebagai contoh. Jalankan code block di bawah ini.\n\n::: {#dc5d661d .cell execution_count=20}\n``` {.python .cell-code}\ndf = pd.read_csv('https://raw.githubusercontent.com/farhanage/dataset-for-study/main/pokemon_data.csv')\n```\n:::\n\n\n</div>\n\n___\n#### `head()`\n\nMemanggil method head akan mengembalikan beberapa baris pertama dari suatu dataframe.\n\n::: {#5652382e .cell class='output' execution_count=21}\n``` {.python .cell-code}\ndf.head(3)  # Membaca 3 baris pertama\n```\n:::\n\n\n___\n#### `tail()`\n\nMemanggil method tail akan mengembalikan beberapa baris terakhir dari suatu dataframe.\n\n::: {#81e079da .cell execution_count=22}\n``` {.python .cell-code}\ndf.tail(3)  # Membaca 3 baris terakhir\n```\n:::\n\n\n:::{.callout-tip}\nSecara default, method head() dan tail() akan mengembalikan 5 baris pertama/terakhir jika tidak diberikan suatu argumen.\n:::\n\n\n___\n#### `shape`\n\nMemanggil attribute shape akan memberikan kita jumlah baris dan kolom dari suatu dataframe.\n\n::: {#701869f2 .cell execution_count=23}\n``` {.python .cell-code}\ndf.shape  # Mengembalikan (jumlah_baris, jumlah_kolom)\n```\n:::\n\n\n___\n#### `columns`\n\nMemanggil attribute columns akan memberikan kita index object berisi semua nama kolom dari suatu dataframe.\n\n::: {#497c79ce .cell execution_count=24}\n``` {.python .cell-code}\ndf.columns  # Mengembalikan index object berisi semua nama kolom dari suatu dataframe\n```\n:::\n\n\n___\n#### `index`\n\nMemanggil attribute columns akan memberikan kita index object berisi index baris suatu dataframe.\n\n::: {#23a61f5b .cell execution_count=25}\n``` {.python .cell-code}\ndf.index  # Mengembalikan index object berisi index suatu dataframe\n```\n:::\n\n\nPandas dataframe memiliki banyak sekali methods dan attributes/properties. Untuk mempelajari lebih lanjut mengenai dataframe pandas, dokumentasi library pandas bisa diakses pada link berikut : [Pandas essential basic functionality](https://pandas.pydata.org/docs/user_guide/basics.html#head-and-tail)\n\n\n## Index\n<div style='text-align: justify;'>\n\nPerhatikan pada atribut `columns` dan `index` yang telah dibahas sebelumnya, output kode adalah object index. Apa itu object `index`? Dalam library *Pandas*, object index digunakan sebagai object yang menyimpan label suatu object lainnya.\n\nContoh : dalam object DataFrame, index object digunakan untuk menyimpan label baris (`df.index`) dan kolom (`df.columns`).\n\n::: {#cc6fe1f1 .cell execution_count=26}\n``` {.python .cell-code}\nobj = pd.Series(range(3), index=['a', 'b', 'c'])\nobj.index\n```\n:::\n\n\n::: {#921861d1 .cell execution_count=27}\n``` {.python .cell-code}\nobj.index[1]\n```\n:::\n\n\n::: {#e9bb0527 .cell execution_count=28}\n``` {.python .cell-code}\nobj.index[1:]\n```\n:::\n\n\n::: {.callout-warning}\n## Error warning\nIndex object bersifat ***immutable***, artinya nilai dari suatu index tidak dapat diubah.\n\n::: {#cc58838f .cell execution_count=29}\n``` {.python .cell-code}\nobj.index[1] = 'd'\n```\n:::\n\n\n:::\n\nIndex object juga memiliki beberapa attribute dan methods. Beberapa diantaranya :\n\n![](static\\images\\index_attr.png)\n</div>\n\n## Basic Functionality\n### Indexing, Selection and Filtering\n#### Indexing and Selection\n<div style='text-align: justify;'>\nSeries indexing digunakan untuk mengambil value yang berkaitan dengan suatu index.\n\n::: {#2af666ba .cell execution_count=30}\n``` {.python .cell-code}\nimport numpy as np\nobj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])\nobj\n```\n:::\n\n\n::: {#8b82eaa2 .cell execution_count=31}\n``` {.python .cell-code}\nobj['b']  # Memanggil nilai dengan index `a`\n```\n:::\n\n\n::: {#2b5ddb74 .cell execution_count=32}\n``` {.python .cell-code}\nobj['a':'c']  # Memanggil nilai dengan index `a` hingga `c`\n```\n:::\n\n\n:::{.callout-important}\nPerhatikan, saat melakukan slicing dengan explicit index (misal, `data['a':'c']`), final index diikutsertakan dalam outputnya (inklusif), sementara ketika melakukan slicing dengan implicit index (misal, `data[0:2]`), final index tidak diikutsertakan dalam outputnya (tidak inklusif).\n:::\n___\nDataFrame indexing digunakan untuk mengambil 1 atau beberapa kolom dengan memanggil label/nama kolom yang bersesuaian.\n\n::: {#e11ddb2d .cell execution_count=33}\n``` {.python .cell-code}\ndf['Name']\n```\n:::\n\n\n::: {#87b58de9 .cell execution_count=34}\n``` {.python .cell-code}\ndf[['Name']]\n```\n:::\n\n\n:::{.callout-important}\n| `df['<column-name>']` akan mengembalikan kolom yang bersesuaian dalam bentuk Series. \n| `df[['<column-name>']]` akan mengembalikan kolom yang bersesuaian dalam bentuk dataframe.\n:::\n\n::: {#f6d86cbf .cell execution_count=35}\n``` {.python .cell-code}\ndf[['Name','HP','Defense']]\n```\n:::\n\n\n___\nKita bisa membuat suatu kolom baru dari kolom-kolom yang sudah ada. Misalkan kita buat suatu variabel bernama `Total Attack` yang berisi hasil penjumlahan variabel `Attack` dan `Sp. Atk`\n\n::: {#6a0a721b .cell execution_count=36}\n``` {.python .cell-code}\ndf['Total Attack'] = df['Attack'] + df['Sp. Atk']\ndf[['Attack','Sp. Atk','Total Attack']]\n```\n:::\n\n\n___\nUntuk indexing baris suatu dataframe, gunakan index baris\n\n::: {#c7597917 .cell execution_count=37}\n``` {.python .cell-code}\ndf[:3] # Mengambil baris dengan index 0 - 2\n```\n:::\n\n\n::: {#f58e8b76 .cell execution_count=38}\n``` {.python .cell-code}\ndf[0:5:2]  # Mengambil dengan index 0 sampai 4 dengan step 2\n```\n:::\n\n\n</div>\n\n#### Filtering\n<div style='text-align: justify;'>\nUntuk melakukan filtering pada suatu dataframe :\n\n::: {#a472f225 .cell execution_count=39}\n``` {.python .cell-code}\ndf[df['HP'] == 50]  # Mengambil data pada dataframe df yang memiliki nilai kolom `HP` == 50\n```\n:::\n\n\n::: {#5794bd20 .cell execution_count=40}\n``` {.python .cell-code}\ndf[df['HP'] > 50]  # Mengambil data pada dataframe df yang memiliki nilai kolom `HP` > 50\n```\n:::\n\n\n::: {#aa1fdba1 .cell execution_count=41}\n``` {.python .cell-code}\ndf[(df['HP'] > 100) & (df['Type 1'] == 'Fire')]  # Mengambil data pada dataframe df yang memiliki nilai kolom `HP` > 100 dan `Type 1` == Fire\n```\n:::\n\n\n::: {#7f8b71f6 .cell execution_count=42}\n``` {.python .cell-code}\ndf[(df['HP'] > 100) | (df['Type 1'] == 'Fire')]  # Mengambil data pada dataframe df yang memiliki nilai kolom `HP` > 100 atau `Type 1` == Fire\n```\n:::\n\n\nUntuk filter yang lebih rumit, disarankan untuk mendefinisikan variabel `condition` agar kode mudah terbaca.\n\nContoh : Filter (`HP` >= 150) dan ((`Type 1` == Water) atau (`Legendary` == True))\n\n::: {#2b24b3fd .cell execution_count=43}\n``` {.python .cell-code}\ncondition = (df['HP'] >= 150) & ((df['Type 1'] == 'Water') | (df['Legendary'] == True))\ndf[condition]\n```\n:::\n\n\n</div>\n___\n\n# Case Study (Toko Baju Unikloh)\n<div style='text-align: justify;'>\nLink Dataset : [Data Penjualan Toko Baju Unikloh](https://drive.google.com/file/d/15QnrvA6-0rlF-bh3n3Fylmfq07XSDRXk/view?usp=sharing)\n\nSebuah toko baju unikloh membutuhkan jasa seorang analis untuk menganalisis data penjualan baju yang mereka miliki. Sebelum itu, Pak Joko selaku pemilik toko ingin tahu beberapa hal mengenai data yang dia miliki. Berikut yang beliau minta :\n\n\n\n1. Ada berapa banyak data penjualan kita?\n\n::: {#be17ac6b .cell execution_count=45}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Hint\"}\n# Jumlah data penjualan bisa kita akses dengan melihat `jumlah baris` suatu dataframe.\n```\n:::\n\n\n::: {#41eb3535 .cell execution_count=46}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Answer\"}\nsales_df.shape\n```\n:::\n\n\n2. Beliau minta 10 data pertama untuk melihat gambaran umum nilai masing-masing variabel.\n\n::: {#0b7cf513 .cell execution_count=47}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Hint\"}\n# Gunakan method `.head()`\n```\n:::\n\n\n::: {#0153138f .cell execution_count=48}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Answer\"}\nsales_df.head(10)\n```\n:::\n\n\n3. Beliau mau fokus melihat kolom `price_per_unit` dan `quantity` saja.\n\n::: {#26643024 .cell execution_count=49}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Hint\"}\n# Untuk mengambil beberapa kolom dari suatu dataframe, gunakan `df[[<nama-kolom-1>, <nama-kolom-2>, <nama-kolom-3>, ...]]`\n```\n:::\n\n\n::: {#55e7e0ef .cell execution_count=50}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Answer\"}\nsales_df[['price_per_unit','quantity']]\n```\n:::\n\n\n4. Harusnya di data ini ada kolom total harga pembelian yang dinamakan `total_price`, tapi sepertinya kolomnya hilang. Tolong buatkan kolomnya berdasarkan data yang ada.\n\n::: {#6bf00c98 .cell execution_count=51}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Hint 1\"}\n# Perhatikan bahwa total harga pembelian = kuantitas x harga per unit\n```\n:::\n\n\n::: {#15dbc63d .cell execution_count=52}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Hint 2\"}\n# Buat kolom baru dari hasil kali 2 kolom tersebut dengan df[...] = df[...]*df[...].\n```\n:::\n\n\n::: {#ae044008 .cell execution_count=53}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Answer\"}\nsales_df['total_price'] = sales_df['price_per_unit']*sales_df['quantity']\n```\n:::\n\n\n5. Beliau mau tau ada berapa banyak penjualan yang total harganya lebih besar dari $200\n\n::: {#e87a5101 .cell execution_count=54}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Hint\"}\n# Untuk memfilter suatu dataset, gunakan df[kondisi]\n```\n:::\n\n\n::: {#34b0cb0c .cell execution_count=55}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Answer\"}\nsales_df[sales_df['total_price'] > 200]\n```\n:::\n\n\n6. Beliau mau tau ada berapa banyak penjualan yang total harganya berada di kisaran $200-250\n\n::: {#50bb11ed .cell execution_count=56}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Hint\"}\n# Gunakan `&` untuk filter dengan 2 kondisi yang dihubungkan operator `dan`.\n```\n:::\n\n\n::: {#7d169d34 .cell execution_count=57}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Answer\"}\nsales_df[(sales_df['total_price'] > 200) & (sales_df['total_price'] < 200)]\n```\n:::\n\n\n7. Terakhir, Beliau mau tau ada berapa banyak penjualan yang total harganya di kisaran $200-250 + penjualan 3 barang dalam satu pesanan.\n\n::: {#55d995c4 .cell execution_count=58}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Hint\"}\n# Gunakan `|` untuk filter dengan 2 kondisi yang dihubungkan operator `atau`.\n```\n:::\n\n\n::: {#2836cfa8 .cell execution_count=59}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Answer\"}\ncondition = (((sales_df['total_price'] > 200) & (sales_df['total_price'] < 200)) | (sales_df['quantity'] == 3))\nsales_df[condition]\n```\n:::\n\n\n</div>\n___\n\n",
    "supporting": [
      "modul1_files"
    ],
    "filters": [],
    "includes": {}
  }
}