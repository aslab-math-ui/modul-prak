{
  "hash": "73a87c474115eca380e10cdc96794a72",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pertemuan 6 : Interactive Data Visualization (plotly)\"\nimage: static\\images\\plotly.png\ndescription: \"Interactive Data Visualization using Plotly\"\ndate: 05/14/2024\npage-navigation: true\njupyter: python3\nformat: html\n---\n\n\n\n\nKembali ke [EDA](./eda2024genap.qmd)\n\n# `plotly.express`\n\nJika belum terinstall pada jupyter notebook anda, jalankan `pip install plotly` pada terminal.\n\n::: {#4506d273 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n```\n:::\n\n\n# Basic Charts\n\n## Line Chart\n\n::: {#5925d160 .cell execution_count=2}\n``` {.python .cell-code}\n# using the iris dataset\ndf = px.data.iris()\n \n# plotting the line chart\nfig = px.line(df, y=\"sepal_width\")\n \n# showing the plot\nfig.show()\n```\n:::\n\n\nApa bedanya dengan line plot biasa?\n\n___\n\n::: {#0a68360e .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# plotting the line chart\nsns.lineplot(df, y=\"sepal_width\", x=df.index)\n\n# showing the plot\nplt.show()\n```\n:::\n\n\n### Grouping \n\n::: {#600fca15 .cell execution_count=4}\n``` {.python .cell-code}\n# plotting the line chart\nfig = px.line(df, y=\"sepal_width\", line_group='species')\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n::: {#c684a436 .cell execution_count=5}\n``` {.python .cell-code}\n# plotting the line chart\nfig = px.line(df, y=\"sepal_width\", line_dash='species',\n              color='species')\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n## Bar Chart\n\n::: {#8407d395 .cell execution_count=6}\n``` {.python .cell-code}\n# Loading the data\ndf = px.data.tips()\n \n# Creating the bar chart\nfig = px.bar(df, x='day', y=\"total_bill\")\n \nfig.show()\n```\n:::\n\n\n### Grouping\n\n::: {#ef9383ec .cell execution_count=7}\n``` {.python .cell-code}\n# Creating the bar chart\nfig = px.bar(df, x='day', y=\"total_bill\", color='sex',\n             facet_row='time', facet_col='sex')\n \nfig.show()\n```\n:::\n\n\n## Scatter Plot\n\n::: {#8812b60c .cell execution_count=8}\n``` {.python .cell-code}\n# plotting the scatter chart\nfig = px.scatter(df, x='total_bill', y=\"tip\")\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n### Grouping\n\n::: {#c7cb3abc .cell execution_count=9}\n``` {.python .cell-code}\n# plotting the scatter chart\nfig = px.scatter(df, x='total_bill', y=\"tip\", color='time',\n                 symbol='sex', size='size', facet_row='day',\n                 facet_col='time')\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n## Histogram\n\n::: {#b0a6e6fb .cell execution_count=10}\n``` {.python .cell-code}\n# plotting the histogram\nfig = px.histogram(df, x=\"total_bill\")\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n### Grouping\n\n::: {#ff94ece0 .cell execution_count=11}\n``` {.python .cell-code}\n# plotting the histogram\nfig = px.histogram(df, x=\"total_bill\", color='sex',\n                   nbins=50, histnorm='percent',\n                   barmode='overlay')\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n## Pie Chart\n\n::: {#974052d9 .cell execution_count=12}\n``` {.python .cell-code}\n# plotting the pie chart\nfig = px.pie(df, values=\"total_bill\", names=\"day\")\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n## Donut Chart\n\n::: {#95df6bb6 .cell execution_count=13}\n``` {.python .cell-code}\n# plotting the donut chart\nfig = px.pie(df, values=\"total_bill\", names=\"day\",\n             color_discrete_sequence=px.colors.sequential.RdBu,\n             opacity=0.7, hole=0.5)\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n## Box Plot\n\n::: {#bfb84d9d .cell execution_count=14}\n``` {.python .cell-code}\n# plotting the boxplot\nfig = px.box(df, x=\"day\", y=\"tip\")\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n### Grouping\n\n::: {#2b00ffcc .cell execution_count=15}\n``` {.python .cell-code}\n# plotting the boxplot\nfig = px.box(df, x=\"day\", y=\"tip\", color='sex',\n             facet_row='time', boxmode='group',\n             notched=True)\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n## Violin Plot\n\n::: {#8ffbcabe .cell execution_count=16}\n``` {.python .cell-code}\n# plotting the violin plot\nfig = px.violin(df, x=\"day\", y=\"tip\")\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n### Grouping\n\n::: {#c7aea4a9 .cell execution_count=17}\n``` {.python .cell-code}\n# plotting the violin plot\nfig = px.violin(df, x=\"day\", y=\"tip\", color='sex',\n                facet_row='time', box=True)\n \n# showing the plot\nfig.show()\n```\n:::\n\n\n## 3D Plot\n\n::: {#09aa4de8 .cell execution_count=18}\n``` {.python .cell-code}\n# plotting the figure\nfig = px.scatter_3d(df, x=\"total_bill\", y=\"sex\", z=\"tip\")\n \nfig.show()\n```\n:::\n\n\n### Grouping\n\n::: {#455036b0 .cell execution_count=19}\n``` {.python .cell-code}\n# plotting the figure\nfig = px.scatter_3d(df, x=\"total_bill\", y=\"sex\", z=\"tip\", color='day', \n                    size='total_bill', symbol='time')\n \nfig.show()\n```\n:::\n\n\n# Adding interaction\n\nUntuk memunculkan tombol-tombol interaktif pada plot, kita menggunakan submodule dari library plotly yaitu `plotly.graph_objects`\n\n## Dropdown Menu\n\n::: {#39d79306 .cell execution_count=20}\n``` {.python .cell-code}\nimport plotly.graph_objects as go\n\nplot = go.Figure(data=[go.Scatter(\n    x=df['day'],\n    y=df['tip'],\n    mode='markers',)\n])\n \n# Add dropdown\nplot.update_layout(\n    updatemenus=[\n        dict(buttons=list([\n            dict(\n                args=[\"type\", \"scatter\"],\n                label=\"Scatter Plot\",\n                method=\"restyle\"\n            ),\n            dict(\n                args=[\"type\", \"bar\"],\n                label=\"Bar Chart\",\n                method=\"restyle\"\n            )\n        ]),\n            direction=\"down\",\n        ),\n    ]\n)\n \nplot.show()\n```\n:::\n\n\n:::{.callout-note}\n# `plotly.graph_objects`\n\nPada saat kita menggunakan `plotly.express` (px), secara tidak langsung kita menggunakan `plotly.graph_objects` untuk menghasilkan suatu plot karena `plotly.express` dibangun di atas `plotly.graph_objects`, sehingga kedua library ini pada dasarnya memiliki fungsi yang sama. Hanya saja penggunaan pada plotly.express jauh lebih simple dan bersih.\n\nLebih lanjut silakan baca dokumentasi berikut : [Dokumentasi `plotly.express`](https://plotly.com/python/graph-objects/)\n:::\n\n## Buttons\n\n::: {#4dbf3ce2 .cell execution_count=21}\n``` {.python .cell-code}\nplot = go.Figure(data=[go.Scatter(\n    x=df['day'],\n    y=df['tip'],\n    mode='markers',)\n])\n \n# Add dropdown\nplot.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"left\",\n            buttons=list([\n                dict(\n                    args=[\"type\", \"scatter\"],\n                    label=\"Scatter Plot\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"type\", \"bar\"],\n                    label=\"Bar Chart\",\n                    method=\"restyle\"\n                )\n            ]),\n        ),\n    ]\n)\n \nplot.show()\n```\n:::\n\n\n## Sliders and Selectors\n\n::: {#99d30c70 .cell execution_count=22}\n``` {.python .cell-code}\nx = df['total_bill']\ny = df['tip']\n \nplot = go.Figure(data=[go.Scatter(\n    x=x,\n    y=y,\n    mode='markers',)\n])\n \nplot.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                    step=\"day\",\n                    stepmode=\"backward\"),\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n    )\n)\n \nplot.show()\n```\n:::\n\n\nLebih lanjut silakan buka dokumentasi library plotly pada link berikut : [Dokumentasi Plotly](https://plotly.com/python/)\n\n___\n\n\nUntuk memperbaiki dan meningkatkan kualitas praktikum kedepannya, silakan berikan feedback anda melalui link berikut : [Feedback Praktikum EDA 2023/2024](https://forms.gle/w48Jrx8RzGnRU7L96)\n\n",
    "supporting": [
      "modul6_files"
    ],
    "filters": [],
    "includes": {}
  }
}