{
  "hash": "135adfd3a08f3c49b25a2c14387bc544",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pertemuan 5 : Time Series Visualization\"\nimage: static\\images\\timeseries.png\ndescription: \"Handling time series data\"\ndate: 05/07/2024\npage-navigation: true\njupyter: python3\nformat: html\n---\n\n\n\n\nKembali ke [EDA](./eda2024genap.qmd)\n\n# `datetime` object\n\n::: {#0560817b .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\ndf = pd.read_csv('https://raw.githubusercontent.com/farhanage/dataset-for-study/main/Electric_Production.csv', names=['date', 'electric_production'], header=0)\n\ndf.head(15)\n```\n:::\n\n\n::: {#d230ad29 .cell execution_count=2}\n``` {.python .cell-code}\n# Mengecek tipe data tiap kolom\ndf.info()\n```\n:::\n\n\nPerhatikan bahwa kolom date memiliki tipe data `object` (string). Pada pertemuan ini, kita akan membahas suatu tipe data baru yang bernama `datetime` yang digunakan untuk memanipulasi data runtun waktu (time series).\n\n## Converting `object` to `datetime`\n\nPerhatikan code cell berikut untuk mengubah data bertipe `object` menjadi `datetime`\n\n::: {#0be2f0cd .cell execution_count=3}\n``` {.python .cell-code}\n# Mengubah data `object` -> `datetime`\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%Y')\n```\n:::\n\n\n:::{.callout-note}\n# Date Format\n\nArgumen `format='%m/%d/%Y'` digunakan untuk membaca format penanggalan yang tertulis pada kolom yang ingin kita ubah. `%d` menandakan hari, `%m` untuk bulan, `%y` untuk tahun 2 digit dan `%Y` untuk tahun 4 digit.\n\n```\ne.g. : '2024-05-26' -> '%Y-%m-%d'\n```\n:::\n\n::: {#bc6f7e60 .cell execution_count=4}\n``` {.python .cell-code}\ndf.info()\n```\n:::\n\n\nTerlihat bahwa kolom `date` kini memiliki tipe data `datetime64[ns]`.\n\n::: {#303db858 .cell execution_count=5}\n``` {.python .cell-code}\ndf.head()\n```\n:::\n\n\nTerlihat setelah dilakukan perubahan tipe data, format penanggalan pada kolom `date` juga berubah.\n\n# Apa perbedaan `string` dan `datetime`?\n\nObject `datetime` memiliki attribut tanggal, bulan, waktu, hari, jam, menit, bahkan detik suatu observasi yang dapat kita akses melalui library datetime.\n\n::: {#bc214a7e .cell execution_count=6}\n``` {.python .cell-code}\n# Ambil tahun dari setiap observasi\ndf['date'].dt.year\n```\n:::\n\n\n::: {#2974190b .cell execution_count=7}\n``` {.python .cell-code}\n# Ambil Bulan dari setiap observasi\ndf['date'].dt.month\n```\n:::\n\n\n::: {#9417f584 .cell execution_count=8}\n``` {.python .cell-code}\n# Ambil Tanggal dari setiap observasi\ndf['date'].dt.day\n```\n:::\n\n\nobject `datetime` dapat digunakan sebagai nilai numerik dalam visualisasi data\n\n::: {#4061045d .cell execution_count=9}\n``` {.python .cell-code}\nsns.lineplot(x='date', y='electric_production', data=df)\n\nplt.title('Jumlah produksi listrik per tahun (1985-2018)')\n\nplt.show()\n```\n:::\n\n\n# Grouping\n\nBagaimana cara kita memanfaatkan attribut-attribut datetime? Gunakan grouping method (`groupby`) untuk mendapatkan insight baru dari data per satuan waktu tertentu.\n\n**Informasi jumlah total produksi energi per tahunnya**\n\n::: {#b472bc80 .cell execution_count=10}\n``` {.python .cell-code}\ndf['electric_production'].groupby(df['date'].dt.year).sum() # sum of electric_production, grouped by year\n```\n:::\n\n\n**Informasi rata-rata produksi energi setiap bulan selama 33 tahun terakhir**\n\n::: {#98fe9c17 .cell execution_count=11}\n``` {.python .cell-code}\ndf['electric_production'].groupby(df['date'].dt.month).mean() # mean of electric_production, grouped by month\n```\n:::\n\n\n## Plots\n\n::: {#7822ad93 .cell execution_count=12}\n``` {.python .cell-code}\nsum_per_year = df['electric_production'].groupby(df['date'].dt.year).sum() # sum of electric_production, grouped by year\n\nsns.lineplot(sum_per_year)\n\nplt.title('Jumlah produksi listrik per tahun (1985-2018)')\n\nplt.show()\n```\n:::\n\n\nkenapa tahun 2018 turun drastis? cek semua observasi pada tahun 2018\n\n::: {#12bf4720 .cell execution_count=13}\n``` {.python .cell-code}\n# Ambil data dengan tahun == 2018\ndf[df['date'].dt.year == 2018]\n```\n:::\n\n\nTernyata tahun 2018 hanya memiliki 1 observasi, sehingga tidak dapat dibandingkan dengan jumlah produksi tahun-tahun sebelumnya.\n\n::: {#ce72c6f4 .cell execution_count=14}\n``` {.python .cell-code}\n# buang data tahun 2018\ndf.drop(df[df['date'].dt.year == 2018].index, axis=0, inplace=True)\n```\n:::\n\n\n::: {#eaa4b1ae .cell execution_count=15}\n``` {.python .cell-code}\ndf[df['date'].dt.year == 2018]\n```\n:::\n\n\nData sudah berhasil dibuang, sehingga dapat dilakukan visualisasi yang lebih akurat\n\n::: {#c7bfb746 .cell execution_count=16}\n``` {.python .cell-code}\nsum_per_year = df['electric_production'].groupby(df['date'].dt.year).sum() # sum of electric_production, grouped by year\n\nsns.lineplot(sum_per_year)\n\nplt.xlabel('year')\n\nplt.ylabel('electric production')\n\nplt.title('Jumlah produksi listrik per tahun (1985-2017)')\n\nplt.show()\n```\n:::\n\n\nInterpretasinya?\n\n::: {#dd8edb18 .cell execution_count=17}\n``` {.python .cell-code}\navg_per_month = df['electric_production'].groupby(df['date'].dt.month).mean() # mean of electric_production, grouped by month\n\nsns.barplot(avg_per_month)\n\nplt.xlabel('month')\n\nplt.ylabel('average electric production')\n\nplt.title('Rata-rata produksi listrik per bulan (1985-2017)')\n\nplt.show()\n```\n:::\n\n\nInterpretasi? Kaitkan dengan musim?\n\n# Case Study\n\nDownload dataset di sini : [Energy Time Series](https://drive.google.com/drive/folders/122UC_72nX8DocmqdmNfBIPXMmk3zr_EP?usp=sharing)\n\nMetadata :\n\n1. energy_reading.csv\n- `building_id` - Foreign key for the building metadata.\n- `meter` - The meter id code. Read as {0: electricity, 1: chilledwater, 2: steam, 3: hotwater}. Not every building has all meter types.\n- `timestamp` - When the measurement was taken\n- `meter_reading` - The target variable. Energy consumption in kWh (or equivalent). Note that this is real data with measurement error, which we expect will impose a baseline level of modeling error. UPDATE: as discussed here, the site 0 electric meter readings are in kBTU.\n\n2. building_metadata.csv\n- `site_id` - Foreign key for the weather files.\n- `building_id` - Foreign key for training.csv\n- `primary_use` - Indicator of the primary category of activities for the building based on EnergyStar property type definitions\n- `square_feet` - Gross floor area of the building\n- `year_built` - Year building was opened\n- `floor_count` - Number of floors of the building\n\n3. weather.csv\nWeather data from a meteorological station as close as possible to the site.\n- `site_id`\n- `air_temperature` - Degrees Celsius\n- `cloud_coverage` - Portion of the sky covered in clouds, in oktas\n- `dew_temperature` - Degrees Celsius\n- `precip_depth_1_hr` - Millimeters\n- `sea_level_pressure` - Millibar/hectopascals\n- `wind_direction` - Compass direction (0-360)\n- `wind_speed` - Meters per second\n\nChallenge : Gali informasi sebanyak-banyaknya dari data tersebut\n\n",
    "supporting": [
      "modul5_files"
    ],
    "filters": [],
    "includes": {}
  }
}